<abi-corpus version='2.4' soname='libtcmalloc_and_profiler.so.4'>
  <elf-needed>
    <dependency name='libunwind.so.8'/>
    <dependency name='libpthread.so.0'/>
    <dependency name='libstdc++.so.6'/>
    <dependency name='libm.so.6'/>
    <dependency name='libc.so.6'/>
    <dependency name='ld-linux-x86-64.so.2'/>
    <dependency name='libgcc_s.so.1'/>
  </elf-needed>
  <elf-function-symbols>
    <!-- GetHeapProfile -->
    <elf-symbol name='GetHeapProfile' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfilerDump -->
    <elf-symbol name='HeapProfilerDump' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfilerStart -->
    <elf-symbol name='HeapProfilerStart' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfilerStop -->
    <elf-symbol name='HeapProfilerStop' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- IsHeapProfilerRunning -->
    <elf-symbol name='IsHeapProfilerRunning' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_GetAllocatedSize -->
    <elf-symbol name='MallocExtension_GetAllocatedSize' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_GetEstimatedAllocatedSize -->
    <elf-symbol name='MallocExtension_GetEstimatedAllocatedSize' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_GetNumericProperty -->
    <elf-symbol name='MallocExtension_GetNumericProperty' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_GetOwnership -->
    <elf-symbol name='MallocExtension_GetOwnership' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_GetStats -->
    <elf-symbol name='MallocExtension_GetStats' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_MallocMemoryStats -->
    <elf-symbol name='MallocExtension_MallocMemoryStats' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_MarkThreadBusy -->
    <elf-symbol name='MallocExtension_MarkThreadBusy' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_MarkThreadIdle -->
    <elf-symbol name='MallocExtension_MarkThreadIdle' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_ReleaseFreeMemory -->
    <elf-symbol name='MallocExtension_ReleaseFreeMemory' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_ReleaseToSystem -->
    <elf-symbol name='MallocExtension_ReleaseToSystem' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_SetNumericProperty -->
    <elf-symbol name='MallocExtension_SetNumericProperty' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_VerifyAllMemory -->
    <elf-symbol name='MallocExtension_VerifyAllMemory' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_VerifyArrayNewMemory -->
    <elf-symbol name='MallocExtension_VerifyArrayNewMemory' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_VerifyMallocMemory -->
    <elf-symbol name='MallocExtension_VerifyMallocMemory' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_VerifyNewMemory -->
    <elf-symbol name='MallocExtension_VerifyNewMemory' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddDeleteHook -->
    <elf-symbol name='MallocHook_AddDeleteHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddMmapHook -->
    <elf-symbol name='MallocHook_AddMmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddMremapHook -->
    <elf-symbol name='MallocHook_AddMremapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddMunmapHook -->
    <elf-symbol name='MallocHook_AddMunmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddNewHook -->
    <elf-symbol name='MallocHook_AddNewHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddPreMmapHook -->
    <elf-symbol name='MallocHook_AddPreMmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddPreSbrkHook -->
    <elf-symbol name='MallocHook_AddPreSbrkHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddSbrkHook -->
    <elf-symbol name='MallocHook_AddSbrkHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_GetCallerStackTrace -->
    <elf-symbol name='MallocHook_GetCallerStackTrace' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_InitAtFirstAllocation_HeapLeakChecker -->
    <elf-symbol name='MallocHook_InitAtFirstAllocation_HeapLeakChecker' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveDeleteHook -->
    <elf-symbol name='MallocHook_RemoveDeleteHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveMmapHook -->
    <elf-symbol name='MallocHook_RemoveMmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveMmapReplacement -->
    <elf-symbol name='MallocHook_RemoveMmapReplacement' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveMremapHook -->
    <elf-symbol name='MallocHook_RemoveMremapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveMunmapHook -->
    <elf-symbol name='MallocHook_RemoveMunmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveMunmapReplacement -->
    <elf-symbol name='MallocHook_RemoveMunmapReplacement' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveNewHook -->
    <elf-symbol name='MallocHook_RemoveNewHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemovePreMmapHook -->
    <elf-symbol name='MallocHook_RemovePreMmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemovePreSbrkHook -->
    <elf-symbol name='MallocHook_RemovePreSbrkHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveSbrkHook -->
    <elf-symbol name='MallocHook_RemoveSbrkHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetDeleteHook -->
    <elf-symbol name='MallocHook_SetDeleteHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetMmapHook -->
    <elf-symbol name='MallocHook_SetMmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetMmapReplacement -->
    <elf-symbol name='MallocHook_SetMmapReplacement' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetMremapHook -->
    <elf-symbol name='MallocHook_SetMremapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetMunmapHook -->
    <elf-symbol name='MallocHook_SetMunmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetMunmapReplacement -->
    <elf-symbol name='MallocHook_SetMunmapReplacement' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetNewHook -->
    <elf-symbol name='MallocHook_SetNewHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetPreMmapHook -->
    <elf-symbol name='MallocHook_SetPreMmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetPreSbrkHook -->
    <elf-symbol name='MallocHook_SetPreSbrkHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetSbrkHook -->
    <elf-symbol name='MallocHook_SetSbrkHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandlerGetState -->
    <elf-symbol name='ProfileHandlerGetState' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandlerRegisterCallback -->
    <elf-symbol name='ProfileHandlerRegisterCallback' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandlerRegisterThread -->
    <elf-symbol name='ProfileHandlerRegisterThread' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandlerReset -->
    <elf-symbol name='ProfileHandlerReset' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandlerUnregisterCallback -->
    <elf-symbol name='ProfileHandlerUnregisterCallback' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerDisable -->
    <elf-symbol name='ProfilerDisable' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerEnable -->
    <elf-symbol name='ProfilerEnable' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerFlush -->
    <elf-symbol name='ProfilerFlush' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerGetCurrentState -->
    <elf-symbol name='ProfilerGetCurrentState' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerRegisterThread -->
    <elf-symbol name='ProfilerRegisterThread' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerStart -->
    <elf-symbol name='ProfilerStart' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerStartWithOptions -->
    <elf-symbol name='ProfilerStartWithOptions' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerStop -->
    <elf-symbol name='ProfilerStop' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilingIsEnabledForAllThreads -->
    <elf-symbol name='ProfilingIsEnabledForAllThreads' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- RunningOnValgrind -->
    <elf-symbol name='RunningOnValgrind' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocGetenvSafe -->
    <elf-symbol name='TCMallocGetenvSafe' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMalloc_ListAllProcessThreads -->
    <elf-symbol name='TCMalloc_ListAllProcessThreads' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMalloc_ResumeAllProcessThreads -->
    <elf-symbol name='TCMalloc_ResumeAllProcessThreads' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ValgrindSlowdown -->
    <elf-symbol name='ValgrindSlowdown' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GetStackTrace(void**, int, int) -->
    <elf-symbol name='_Z13GetStackTracePPvii' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GetStackFrames(void**, int*, int, int) -->
    <elf-symbol name='_Z14GetStackFramesPPvPiii' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CyclesPerSecond() -->
    <elf-symbol name='_Z15CyclesPerSecondv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HasPosixThreads() -->
    <elf-symbol name='_Z15HasPosixThreadsv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GetenvBeforeMain(char const*) -->
    <elf-symbol name='_Z16GetenvBeforeMainPKc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- RawOpenForWriting(char const*) -->
    <elf-symbol name='_Z17RawOpenForWritingPKc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GetUniquePathFromEnv(char const*, char*) -->
    <elf-symbol name='_Z20GetUniquePathFromEnvPKcPc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- InitSystemAllocators() -->
    <elf-symbol name='_Z20InitSystemAllocatorsv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SleepForMilliseconds(int) -->
    <elf-symbol name='_Z20SleepForMillisecondsi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMalloc_SystemAlloc(unsigned long, unsigned long*, unsigned long) -->
    <elf-symbol name='_Z20TCMalloc_SystemAllocmPmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMalloc_SystemCommit(void*, unsigned long) -->
    <elf-symbol name='_Z21TCMalloc_SystemCommitPvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMalloc_SystemRelease(void*, unsigned long) -->
    <elf-symbol name='_Z22TCMalloc_SystemReleasePvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- perftools_pthread_once(int*, void (*)()) -->
    <elf-symbol name='_Z22perftools_pthread_oncePiPFvvE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GetStackTraceWithContext(void**, int, int, void const*) -->
    <elf-symbol name='_Z24GetStackTraceWithContextPPviiPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tc_get_sysalloc_override(SysAllocator*) -->
    <elf-symbol name='_Z24tc_get_sysalloc_overrideP12SysAllocator' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GetStackFramesWithContext(void**, int*, int, int, void const*) -->
    <elf-symbol name='_Z25GetStackFramesWithContextPPvPiiiPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- perftools_pthread_key_create(unsigned int*, void (*)(void*)) -->
    <elf-symbol name='_Z28perftools_pthread_key_createPjPFvPvE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- perftools_pthread_key_delete(unsigned int) -->
    <elf-symbol name='_Z28perftools_pthread_key_deletej' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- perftools_pthread_getspecific(unsigned int) -->
    <elf-symbol name='_Z29perftools_pthread_getspecificj' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- perftools_pthread_setspecific(unsigned int, void*) -->
    <elf-symbol name='_Z29perftools_pthread_setspecificjPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker_RunHeapCleanups() -->
    <elf-symbol name='_Z31HeapLeakChecker_RunHeapCleanupsv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker_AfterDestructors() -->
    <elf-symbol name='_Z32HeapLeakChecker_AfterDestructorsv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker_InternalInitStart() -->
    <elf-symbol name='_Z33HeapLeakChecker_InternalInitStartv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker_BeforeConstructors() -->
    <elf-symbol name='_Z34HeapLeakChecker_BeforeConstructorsv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- NumCPUs() -->
    <elf-symbol name='_Z7NumCPUsv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- RAW_LOG(int, char const*, ...) -->
    <elf-symbol name='_Z7RAW_LOGiPKcz' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- RAW_VLOG(int, char const*, ...) -->
    <elf-symbol name='_Z8RAW_VLOGiPKcz' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- RawClose(int) -->
    <elf-symbol name='_Z8RawClosei' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- RawWrite(int, char const*, unsigned long) -->
    <elf-symbol name='_Z8RawWriteiPKcm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- LogPrintf(int, char const*, __va_list_tag*) -->
    <elf-symbol name='_Z9LogPrintfiPKcP13__va_list_tag' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::Insert(void const*, HeapProfileTable::AllocValue) -->
    <elf-symbol name='_ZN10AddressMapIN16HeapProfileTable10AllocValueEE6InsertEPKvS1_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::AddressMap(void* (*)(unsigned long), void (*)(void*)) -->
    <elf-symbol name='_ZN10AddressMapIN16HeapProfileTable10AllocValueEEC1EPFPvmEPFvS3_E' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::AddressMap(void* (*)(unsigned long), void (*)(void*)) -->
    <elf-symbol name='_ZN10AddressMapIN16HeapProfileTable10AllocValueEEC2EPFPvmEPFvS3_E' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN10AddressMapIN16HeapProfileTable10AllocValueEEC1EPFPvmEPFvS3_E' is-defined='yes'/>
    <!-- MallocHook::UnhookedMMap(void*, unsigned long, int, int, int, long) -->
    <elf-symbol name='_ZN10MallocHook12UnhookedMMapEPvmiiil' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::UnhookedMUnmap(void*, unsigned long) -->
    <elf-symbol name='_ZN10MallocHook14UnhookedMUnmapEPvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeNewHookSlow(void const*, unsigned long) -->
    <elf-symbol name='_ZN10MallocHook17InvokeNewHookSlowEPKvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeMmapHookSlow(void const*, void const*, unsigned long, int, int, int, long) -->
    <elf-symbol name='_ZN10MallocHook18InvokeMmapHookSlowEPKvS1_miiil' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeSbrkHookSlow(void const*, long) -->
    <elf-symbol name='_ZN10MallocHook18InvokeSbrkHookSlowEPKvl' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeDeleteHookSlow(void const*) -->
    <elf-symbol name='_ZN10MallocHook20InvokeDeleteHookSlowEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeMremapHookSlow(void const*, void const*, unsigned long, unsigned long, int, void const*) -->
    <elf-symbol name='_ZN10MallocHook20InvokeMremapHookSlowEPKvS1_mmiS1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeMunmapHookSlow(void const*, unsigned long) -->
    <elf-symbol name='_ZN10MallocHook20InvokeMunmapHookSlowEPKvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokePreMmapHookSlow(void const*, unsigned long, int, int, int, long) -->
    <elf-symbol name='_ZN10MallocHook21InvokePreMmapHookSlowEPKvmiiil' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokePreSbrkHookSlow(long) -->
    <elf-symbol name='_ZN10MallocHook21InvokePreSbrkHookSlowEl' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeMmapReplacementSlow(void const*, unsigned long, int, int, int, long, void**) -->
    <elf-symbol name='_ZN10MallocHook25InvokeMmapReplacementSlowEPKvmiiilPPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeMunmapReplacementSlow(void const*, unsigned long, int*) -->
    <elf-symbol name='_ZN10MallocHook27InvokeMunmapReplacementSlowEPKvmPi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::FlushTable() -->
    <elf-symbol name='_ZN11CpuProfiler10FlushTableEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::prof_handler(int, siginfo*, void*, void*) -->
    <elf-symbol name='_ZN11CpuProfiler12prof_handlerEiP7siginfoPvS2_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::EnableHandler() -->
    <elf-symbol name='_ZN11CpuProfiler13EnableHandlerEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::DisableHandler() -->
    <elf-symbol name='_ZN11CpuProfiler14DisableHandlerEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::GetCurrentState(ProfilerState*) -->
    <elf-symbol name='_ZN11CpuProfiler15GetCurrentStateEP13ProfilerState' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::Stop() -->
    <elf-symbol name='_ZN11CpuProfiler4StopEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::Start(char const*, ProfilerOptions const*) -->
    <elf-symbol name='_ZN11CpuProfiler5StartEPKcPK15ProfilerOptions' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::Enabled() -->
    <elf-symbol name='_ZN11CpuProfiler7EnabledEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::CpuProfiler() -->
    <elf-symbol name='_ZN11CpuProfilerC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN11CpuProfilerC2Ev' is-defined='yes'/>
    <!-- CpuProfiler::CpuProfiler() -->
    <elf-symbol name='_ZN11CpuProfilerC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::~CpuProfiler() -->
    <elf-symbol name='_ZN11CpuProfilerD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN11CpuProfilerD2Ev' is-defined='yes'/>
    <!-- CpuProfiler::~CpuProfiler() -->
    <elf-symbol name='_ZN11CpuProfilerD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapCleaner::RunHeapCleanups() -->
    <elf-symbol name='_ZN11HeapCleaner15RunHeapCleanupsEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapCleaner::HeapCleaner(void (*)()) -->
    <elf-symbol name='_ZN11HeapCleanerC1EPFvvE' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN11HeapCleanerC2EPFvvE' is-defined='yes'/>
    <!-- HeapCleaner::HeapCleaner(void (*)()) -->
    <elf-symbol name='_ZN11HeapCleanerC2EPFvvE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::FlushTable() -->
    <elf-symbol name='_ZN11ProfileData10FlushTableEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::FlushEvicted() -->
    <elf-symbol name='_ZN11ProfileData12FlushEvictedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::Add(int, void const* const*) -->
    <elf-symbol name='_ZN11ProfileData3AddEiPKPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::Stop() -->
    <elf-symbol name='_ZN11ProfileData4StopEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::Evict(ProfileData::Entry const&) -->
    <elf-symbol name='_ZN11ProfileData5EvictERKNS_5EntryE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::Reset() -->
    <elf-symbol name='_ZN11ProfileData5ResetEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::Start(char const*, ProfileData::Options const&) -->
    <elf-symbol name='_ZN11ProfileData5StartEPKcRKNS_7OptionsE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::Options::Options() -->
    <elf-symbol name='_ZN11ProfileData7OptionsC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN11ProfileData7OptionsC2Ev' is-defined='yes'/>
    <!-- ProfileData::Options::Options() -->
    <elf-symbol name='_ZN11ProfileData7OptionsC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::ProfileData() -->
    <elf-symbol name='_ZN11ProfileDataC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN11ProfileDataC2Ev' is-defined='yes'/>
    <!-- ProfileData::ProfileData() -->
    <elf-symbol name='_ZN11ProfileDataC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::~ProfileData() -->
    <elf-symbol name='_ZN11ProfileDataD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN11ProfileDataD2Ev' is-defined='yes'/>
    <!-- ProfileData::~ProfileData() -->
    <elf-symbol name='_ZN11ProfileDataD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SymbolTable::Add(void const*) -->
    <elf-symbol name='_ZN11SymbolTable3AddEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SymbolTable::GetSymbol(void const*) -->
    <elf-symbol name='_ZN11SymbolTable9GetSymbolEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SymbolTable::Symbolize() -->
    <elf-symbol name='_ZN11SymbolTable9SymbolizeEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SysAllocator::~SysAllocator() -->
    <elf-symbol name='_ZN12SysAllocatorD0Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SysAllocator::~SysAllocator() -->
    <elf-symbol name='_ZN12SysAllocatorD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN12SysAllocatorD2Ev' is-defined='yes'/>
    <!-- SysAllocator::~SysAllocator() -->
    <elf-symbol name='_ZN12SysAllocatorD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- LowLevelAlloc::DeleteArena(LowLevelAlloc::Arena*) -->
    <elf-symbol name='_ZN13LowLevelAlloc11DeleteArenaEPNS_5ArenaE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- LowLevelAlloc::DefaultArena() -->
    <elf-symbol name='_ZN13LowLevelAlloc12DefaultArenaEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- LowLevelAlloc::AllocWithArena(unsigned long, LowLevelAlloc::Arena*) -->
    <elf-symbol name='_ZN13LowLevelAlloc14AllocWithArenaEmPNS_5ArenaE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- LowLevelAlloc::Free(void*) -->
    <elf-symbol name='_ZN13LowLevelAlloc4FreeEPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- LowLevelAlloc::Alloc(unsigned long) -->
    <elf-symbol name='_ZN13LowLevelAlloc5AllocEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- LowLevelAlloc::NewArena(int, LowLevelAlloc::Arena*) -->
    <elf-symbol name='_ZN13LowLevelAlloc8NewArenaEiPNS_5ArenaE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocGuard::TCMallocGuard() -->
    <elf-symbol name='_ZN13TCMallocGuardC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN13TCMallocGuardC2Ev' is-defined='yes'/>
    <!-- TCMallocGuard::TCMallocGuard() -->
    <elf-symbol name='_ZN13TCMallocGuardC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocGuard::~TCMallocGuard() -->
    <elf-symbol name='_ZN13TCMallocGuardD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN13TCMallocGuardD2Ev' is-defined='yes'/>
    <!-- TCMallocGuard::~TCMallocGuard() -->
    <elf-symbol name='_ZN13TCMallocGuardD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::StartTimer() -->
    <elf-symbol name='_ZN14ProfileHandler10StartTimerEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::EnableHandler() -->
    <elf-symbol name='_ZN14ProfileHandler13EnableHandlerEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::SignalHandler(int, siginfo*, void*) -->
    <elf-symbol name='_ZN14ProfileHandler13SignalHandlerEiP7siginfoPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::DisableHandler() -->
    <elf-symbol name='_ZN14ProfileHandler14DisableHandlerEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::IsTimerRunning() -->
    <elf-symbol name='_ZN14ProfileHandler14IsTimerRunningEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::RegisterThread() -->
    <elf-symbol name='_ZN14ProfileHandler14RegisterThreadEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::RegisterCallback(void (*)(int, siginfo*, void*, void*), void*) -->
    <elf-symbol name='_ZN14ProfileHandler16RegisterCallbackEPFviP7siginfoPvS2_ES2_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::UnregisterCallback(ProfileHandlerToken*) -->
    <elf-symbol name='_ZN14ProfileHandler18UnregisterCallbackEP19ProfileHandlerToken' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::IsSignalHandlerAvailable() -->
    <elf-symbol name='_ZN14ProfileHandler24IsSignalHandlerAvailableEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::Init() -->
    <elf-symbol name='_ZN14ProfileHandler4InitEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::Reset() -->
    <elf-symbol name='_ZN14ProfileHandler5ResetEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::GetState(ProfileHandlerState*) -->
    <elf-symbol name='_ZN14ProfileHandler8GetStateEP19ProfileHandlerState' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::Instance() -->
    <elf-symbol name='_ZN14ProfileHandler8InstanceEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::StopTimer() -->
    <elf-symbol name='_ZN14ProfileHandler9StopTimerEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::ProfileHandler() -->
    <elf-symbol name='_ZN14ProfileHandlerC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN14ProfileHandlerC2Ev' is-defined='yes'/>
    <!-- ProfileHandler::ProfileHandler() -->
    <elf-symbol name='_ZN14ProfileHandlerC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::~ProfileHandler() -->
    <elf-symbol name='_ZN14ProfileHandlerD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN14ProfileHandlerD2Ev' is-defined='yes'/>
    <!-- ProfileHandler::~ProfileHandler() -->
    <elf-symbol name='_ZN14ProfileHandlerD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SpinLockHolder::SpinLockHolder(SpinLock*) -->
    <elf-symbol name='_ZN14SpinLockHolderC1EP8SpinLock' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SpinLockHolder::SpinLockHolder(SpinLock*) -->
    <elf-symbol name='_ZN14SpinLockHolderC2EP8SpinLock' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN14SpinLockHolderC1EP8SpinLock' is-defined='yes'/>
    <!-- SpinLockHolder::~SpinLockHolder() -->
    <elf-symbol name='_ZN14SpinLockHolderD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN14SpinLockHolderD2Ev' is-defined='yes'/>
    <!-- SpinLockHolder::~SpinLockHolder() -->
    <elf-symbol name='_ZN14SpinLockHolderD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::GlobalChecker() -->
    <elf-symbol name='_ZN15HeapLeakChecker13GlobalCheckerEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::NoGlobalLeaks() -->
    <elf-symbol name='_ZN15HeapLeakChecker13NoGlobalLeaksEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::DoIgnoreObject(void const*) -->
    <elf-symbol name='_ZN15HeapLeakChecker14DoIgnoreObjectEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::GetAllocCaller(void*) -->
    <elf-symbol name='_ZN15HeapLeakChecker14GetAllocCallerEPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::UnIgnoreObject(void const*) -->
    <elf-symbol name='_ZN15HeapLeakChecker14UnIgnoreObjectEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::DisableChecksIn(char const*) -->
    <elf-symbol name='_ZN15HeapLeakChecker15DisableChecksInEPKc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::DoMainHeapCheck() -->
    <elf-symbol name='_ZN15HeapLeakChecker15DoMainHeapCheckEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::CancelGlobalCheck() -->
    <elf-symbol name='_ZN15HeapLeakChecker17CancelGlobalCheckEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::UseProcMapsLocked(HeapLeakChecker::ProcMapsTask) -->
    <elf-symbol name='_ZN15HeapLeakChecker17UseProcMapsLockedENS_12ProcMapsTaskE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::TurnItselfOffLocked() -->
    <elf-symbol name='_ZN15HeapLeakChecker19TurnItselfOffLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::MakeProfileNameLocked() -->
    <elf-symbol name='_ZN15HeapLeakChecker21MakeProfileNameLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::IgnoreLiveObjectsLocked(char const*, char const*) -->
    <elf-symbol name='_ZN15HeapLeakChecker23IgnoreLiveObjectsLockedEPKcS1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::IgnoreLiveThreadsLocked(void*, int, int*, __va_list_tag*) -->
    <elf-symbol name='_ZN15HeapLeakChecker23IgnoreLiveThreadsLockedEPviPiP13__va_list_tag' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::BeforeConstructorsLocked() -->
    <elf-symbol name='_ZN15HeapLeakChecker24BeforeConstructorsLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::DisableChecksFromToLocked(void const*, void const*, int) -->
    <elf-symbol name='_ZN15HeapLeakChecker25DisableChecksFromToLockedEPKvS1_i' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::DisableLibraryAllocsLocked(char const*, unsigned long, unsigned long) -->
    <elf-symbol name='_ZN15HeapLeakChecker26DisableLibraryAllocsLockedEPKcmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::IgnoreAllLiveObjectsLocked(void const*) -->
    <elf-symbol name='_ZN15HeapLeakChecker26IgnoreAllLiveObjectsLockedEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::NoGlobalLeaksMaybeSymbolize(HeapLeakChecker::ShouldSymbolize) -->
    <elf-symbol name='_ZN15HeapLeakChecker27NoGlobalLeaksMaybeSymbolizeENS_15ShouldSymbolizeE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::IgnoreNonThreadLiveObjectsLocked() -->
    <elf-symbol name='_ZN15HeapLeakChecker32IgnoreNonThreadLiveObjectsLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::Create(char const*, bool) -->
    <elf-symbol name='_ZN15HeapLeakChecker6CreateEPKcb' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::Disabler::Disabler() -->
    <elf-symbol name='_ZN15HeapLeakChecker8DisablerC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN15HeapLeakChecker8DisablerC2Ev' is-defined='yes'/>
    <!-- HeapLeakChecker::Disabler::Disabler() -->
    <elf-symbol name='_ZN15HeapLeakChecker8DisablerC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::Disabler::~Disabler() -->
    <elf-symbol name='_ZN15HeapLeakChecker8DisablerD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN15HeapLeakChecker8DisablerD2Ev' is-defined='yes'/>
    <!-- HeapLeakChecker::Disabler::~Disabler() -->
    <elf-symbol name='_ZN15HeapLeakChecker8DisablerD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::IsActive() -->
    <elf-symbol name='_ZN15HeapLeakChecker8IsActiveEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::Allocator::Free(void*) -->
    <elf-symbol name='_ZN15HeapLeakChecker9Allocator4FreeEPv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::Allocator::Allocate(unsigned long) -->
    <elf-symbol name='_ZN15HeapLeakChecker9Allocator8AllocateEm' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::DoNoLeaks(HeapLeakChecker::ShouldSymbolize) -->
    <elf-symbol name='_ZN15HeapLeakChecker9DoNoLeaksENS_15ShouldSymbolizeE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::HeapLeakChecker(char const*) -->
    <elf-symbol name='_ZN15HeapLeakCheckerC1EPKc' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN15HeapLeakCheckerC2EPKc' is-defined='yes'/>
    <!-- HeapLeakChecker::HeapLeakChecker() -->
    <elf-symbol name='_ZN15HeapLeakCheckerC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN15HeapLeakCheckerC2Ev' is-defined='yes'/>
    <!-- HeapLeakChecker::HeapLeakChecker(char const*) -->
    <elf-symbol name='_ZN15HeapLeakCheckerC2EPKc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::HeapLeakChecker() -->
    <elf-symbol name='_ZN15HeapLeakCheckerC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::~HeapLeakChecker() -->
    <elf-symbol name='_ZN15HeapLeakCheckerD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN15HeapLeakCheckerD2Ev' is-defined='yes'/>
    <!-- HeapLeakChecker::~HeapLeakChecker() -->
    <elf-symbol name='_ZN15HeapLeakCheckerD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::Initialize() -->
    <elf-symbol name='_ZN15MallocExtension10InitializeEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetOwnership(void const*) -->
    <elf-symbol name='_ZN15MallocExtension12GetOwnershipEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetHeapSample(std::string*) -->
    <elf-symbol name='_ZN15MallocExtension13GetHeapSampleEPSs' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::MarkThreadBusy() -->
    <elf-symbol name='_ZN15MallocExtension14MarkThreadBusyEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::MarkThreadIdle() -->
    <elf-symbol name='_ZN15MallocExtension14MarkThreadIdleEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::ReadStackTraces(int*) -->
    <elf-symbol name='_ZN15MallocExtension15ReadStackTracesEPi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::ReleaseToSystem(unsigned long) -->
    <elf-symbol name='_ZN15MallocExtension15ReleaseToSystemEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::VerifyAllMemory() -->
    <elf-symbol name='_ZN15MallocExtension15VerifyAllMemoryEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::VerifyNewMemory(void const*) -->
    <elf-symbol name='_ZN15MallocExtension15VerifyNewMemoryEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetAllocatedSize(void const*) -->
    <elf-symbol name='_ZN15MallocExtension16GetAllocatedSizeEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*) -->
    <elf-symbol name='_ZN15MallocExtension16GetFreeListSizesEPSt6vectorINS_12FreeListInfoESaIS1_EE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::MallocMemoryStats(int*, unsigned long*, int*) -->
    <elf-symbol name='_ZN15MallocExtension17MallocMemoryStatsEPiPmS0_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::ReleaseFreeMemory() -->
    <elf-symbol name='_ZN15MallocExtension17ReleaseFreeMemoryEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetNumericProperty(char const*, unsigned long*) -->
    <elf-symbol name='_ZN15MallocExtension18GetNumericPropertyEPKcPm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetSystemAllocator() -->
    <elf-symbol name='_ZN15MallocExtension18GetSystemAllocatorEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::SetNumericProperty(char const*, unsigned long) -->
    <elf-symbol name='_ZN15MallocExtension18SetNumericPropertyEPKcm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::SetSystemAllocator(SysAllocator*) -->
    <elf-symbol name='_ZN15MallocExtension18SetSystemAllocatorEP12SysAllocator' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::VerifyMallocMemory(void const*) -->
    <elf-symbol name='_ZN15MallocExtension18VerifyMallocMemoryEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetHeapGrowthStacks(std::string*) -->
    <elf-symbol name='_ZN15MallocExtension19GetHeapGrowthStacksEPSs' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetMemoryReleaseRate() -->
    <elf-symbol name='_ZN15MallocExtension20GetMemoryReleaseRateEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::SetMemoryReleaseRate(double) -->
    <elf-symbol name='_ZN15MallocExtension20SetMemoryReleaseRateEd' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::VerifyArrayNewMemory(void const*) -->
    <elf-symbol name='_ZN15MallocExtension20VerifyArrayNewMemoryEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetEstimatedAllocatedSize(unsigned long) -->
    <elf-symbol name='_ZN15MallocExtension25GetEstimatedAllocatedSizeEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::ReadHeapGrowthStackTraces() -->
    <elf-symbol name='_ZN15MallocExtension25ReadHeapGrowthStackTracesEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::Ranges(void*, void (*)(void*, base::MallocRange const*)) -->
    <elf-symbol name='_ZN15MallocExtension6RangesEPvPFvS0_PKN4base11MallocRangeEE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetStats(char*, int) -->
    <elf-symbol name='_ZN15MallocExtension8GetStatsEPci' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::Register(MallocExtension*) -->
    <elf-symbol name='_ZN15MallocExtension8RegisterEPS_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::instance() -->
    <elf-symbol name='_ZN15MallocExtension8instanceEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::~MallocExtension() -->
    <elf-symbol name='_ZN15MallocExtensionD0Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::~MallocExtension() -->
    <elf-symbol name='_ZN15MallocExtensionD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN15MallocExtensionD2Ev' is-defined='yes'/>
    <!-- MallocExtension::~MallocExtension() -->
    <elf-symbol name='_ZN15MallocExtensionD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::FindRegion(unsigned long, MemoryRegionMap::Region*) -->
    <elf-symbol name='_ZN15MemoryRegionMap10FindRegionEmPNS_6RegionE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::LockIsHeld() -->
    <elf-symbol name='_ZN15MemoryRegionMap10LockIsHeldEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::MremapHook(void const*, void const*, unsigned long, unsigned long, int, void const*) -->
    <elf-symbol name='_ZN15MemoryRegionMap10MremapHookEPKvS1_mmiS1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::MunmapHook(void const*, unsigned long) -->
    <elf-symbol name='_ZN15MemoryRegionMap10MunmapHookEPKvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::LogAllLocked() -->
    <elf-symbol name='_ZN15MemoryRegionMap12LogAllLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::EndRegionLocked() -->
    <elf-symbol name='_ZN15MemoryRegionMap15EndRegionLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::BeginRegionLocked() -->
    <elf-symbol name='_ZN15MemoryRegionMap17BeginRegionLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::IsRecordingLocked() -->
    <elf-symbol name='_ZN15MemoryRegionMap17IsRecordingLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::DoFindRegionLocked(unsigned long) -->
    <elf-symbol name='_ZN15MemoryRegionMap18DoFindRegionLockedEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::InsertRegionLocked(MemoryRegionMap::Region const&) -->
    <elf-symbol name='_ZN15MemoryRegionMap18InsertRegionLockedERKNS_6RegionE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::RecordRegionRemoval(void const*, unsigned long) -->
    <elf-symbol name='_ZN15MemoryRegionMap19RecordRegionRemovalEPKvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::DoInsertRegionLocked(MemoryRegionMap::Region const&) -->
    <elf-symbol name='_ZN15MemoryRegionMap20DoInsertRegionLockedERKNS_6RegionE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::RecordRegionAddition(void const*, unsigned long) -->
    <elf-symbol name='_ZN15MemoryRegionMap20RecordRegionAdditionEPKvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::FindAndMarkStackRegion(unsigned long, MemoryRegionMap::Region*) -->
    <elf-symbol name='_ZN15MemoryRegionMap22FindAndMarkStackRegionEmPNS_6RegionE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::HandleSavedRegionsLocked(void (*)(MemoryRegionMap::Region const&)) -->
    <elf-symbol name='_ZN15MemoryRegionMap24HandleSavedRegionsLockedEPFvRKNS_6RegionEE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::RestoreSavedBucketsLocked() -->
    <elf-symbol name='_ZN15MemoryRegionMap25RestoreSavedBucketsLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::RecordRegionRemovalInBucket(int, void const* const*, unsigned long) -->
    <elf-symbol name='_ZN15MemoryRegionMap27RecordRegionRemovalInBucketEiPKPKvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::Init(int, bool) -->
    <elf-symbol name='_ZN15MemoryRegionMap4InitEib' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::Lock() -->
    <elf-symbol name='_ZN15MemoryRegionMap4LockEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::Unlock() -->
    <elf-symbol name='_ZN15MemoryRegionMap6UnlockEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::MmapHook(void const*, void const*, unsigned long, int, int, int, long) -->
    <elf-symbol name='_ZN15MemoryRegionMap8MmapHookEPKvS1_miiil' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::SbrkHook(void const*, long) -->
    <elf-symbol name='_ZN15MemoryRegionMap8SbrkHookEPKvl' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::Shutdown() -->
    <elf-symbol name='_ZN15MemoryRegionMap8ShutdownEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::GetBucket(int, void const* const*) -->
    <elf-symbol name='_ZN15MemoryRegionMap9GetBucketEiPKPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::MarkAsLive(void const*) -->
    <elf-symbol name='_ZN16HeapProfileTable10MarkAsLiveEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::RecordFree(void const*) -->
    <elf-symbol name='_ZN16HeapProfileTable10RecordFreeEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::RecordAlloc(void const*, unsigned long, int, void const* const*) -->
    <elf-symbol name='_ZN16HeapProfileTable11RecordAllocEPKvmiPKS1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::AddIfNonLive(void const*, HeapProfileTable::AllocValue*, HeapProfileTable::AddNonLiveArgs*) -->
    <elf-symbol name='_ZN16HeapProfileTable12AddIfNonLiveEPKvPNS_10AllocValueEPNS_14AddNonLiveArgsE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::TakeSnapshot() -->
    <elf-symbol name='_ZN16HeapProfileTable12TakeSnapshotEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::WriteProfile(char const*, HeapProfileBucket const&, AddressMap<HeapProfileTable::AllocValue>*) -->
    <elf-symbol name='_ZN16HeapProfileTable12WriteProfileEPKcRK17HeapProfileBucketP10AddressMapINS_10AllocValueEE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::AddToSnapshot(void const*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot*) -->
    <elf-symbol name='_ZN16HeapProfileTable13AddToSnapshotEPKvPNS_10AllocValueEPNS_8SnapshotE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::MarkAsIgnored(void const*) -->
    <elf-symbol name='_ZN16HeapProfileTable13MarkAsIgnoredEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::UnparseBucket(HeapProfileBucket const&, char*, int, int, char const*, HeapProfileStats*) -->
    <elf-symbol name='_ZN16HeapProfileTable13UnparseBucketERK17HeapProfileBucketPciiPKcP16HeapProfileStats' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::AllocValueSize(HeapProfileTable::AllocValue const&) -->
    <elf-symbol name='_ZN16HeapProfileTable14AllocValueSizeERKNS_10AllocValueE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::NonLiveSnapshot(HeapProfileTable::Snapshot*) -->
    <elf-symbol name='_ZN16HeapProfileTable15NonLiveSnapshotEPNS_8SnapshotE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::ReleaseSnapshot(HeapProfileTable::Snapshot*) -->
    <elf-symbol name='_ZN16HeapProfileTable15ReleaseSnapshotEPNS_8SnapshotE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::CleanupOldProfiles(char const*) -->
    <elf-symbol name='_ZN16HeapProfileTable18CleanupOldProfilesEPKc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::DumpBucketIterator(HeapProfileBucket const*, HeapProfileTable::BufferArgs*) -->
    <elf-symbol name='_ZN16HeapProfileTable18DumpBucketIteratorEPK17HeapProfileBucketPNS_10BufferArgsE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::DumpNonLiveIterator(void const*, HeapProfileTable::AllocValue*, HeapProfileTable::DumpArgs const&) -->
    <elf-symbol name='_ZN16HeapProfileTable19DumpNonLiveIteratorEPKvPNS_10AllocValueERKNS_8DumpArgsE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::GetCallerStackTrace(int, void**) -->
    <elf-symbol name='_ZN16HeapProfileTable19GetCallerStackTraceEiPPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::MapArgsAllocIterator(void const*, HeapProfileTable::AllocValue*, void (*)(void const*, HeapProfileTable::AllocInfo const&)) -->
    <elf-symbol name='_ZN16HeapProfileTable20MapArgsAllocIteratorEPKvPNS_10AllocValueEPFvS1_RKNS_9AllocInfoEE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::Snapshot::ReportLeaks(char const*, char const*, bool) -->
    <elf-symbol name='_ZN16HeapProfileTable8Snapshot11ReportLeaksEPKcS2_b' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::Snapshot::ReportObject(void const*, HeapProfileTable::AllocValue*, char*) -->
    <elf-symbol name='_ZN16HeapProfileTable8Snapshot12ReportObjectEPKvPNS_10AllocValueEPc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::Snapshot::ReportCallback(void const*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot::ReportState*) -->
    <elf-symbol name='_ZN16HeapProfileTable8Snapshot14ReportCallbackEPKvPNS_10AllocValueEPNS0_11ReportStateE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::Snapshot::ReportIndividualObjects() -->
    <elf-symbol name='_ZN16HeapProfileTable8Snapshot23ReportIndividualObjectsEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::GetBucket(int, void const* const*) -->
    <elf-symbol name='_ZN16HeapProfileTable9GetBucketEiPKPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::HeapProfileTable(void* (*)(unsigned long), void (*)(void*), bool) -->
    <elf-symbol name='_ZN16HeapProfileTableC1EPFPvmEPFvS0_Eb' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::HeapProfileTable(void* (*)(unsigned long), void (*)(void*), bool) -->
    <elf-symbol name='_ZN16HeapProfileTableC2EPFPvmEPFvS0_Eb' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN16HeapProfileTableC1EPFPvmEPFvS0_Eb' is-defined='yes'/>
    <!-- HeapProfileTable::~HeapProfileTable() -->
    <elf-symbol name='_ZN16HeapProfileTableD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN16HeapProfileTableD2Ev' is-defined='yes'/>
    <!-- HeapProfileTable::~HeapProfileTable() -->
    <elf-symbol name='_ZN16HeapProfileTableD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MmapSysAllocator::Alloc(unsigned long, unsigned long*, unsigned long) -->
    <elf-symbol name='_ZN16MmapSysAllocator5AllocEmPmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MmapSysAllocator::~MmapSysAllocator() -->
    <elf-symbol name='_ZN16MmapSysAllocatorD0Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MmapSysAllocator::~MmapSysAllocator() -->
    <elf-symbol name='_ZN16MmapSysAllocatorD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN16MmapSysAllocatorD2Ev' is-defined='yes'/>
    <!-- MmapSysAllocator::~MmapSysAllocator() -->
    <elf-symbol name='_ZN16MmapSysAllocatorD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::FormatLine(char*, int, unsigned long, unsigned long, char const*, unsigned long, long, char const*, unsigned long) -->
    <elf-symbol name='_ZN16ProcMapsIterator10FormatLineEPcimmPKcmlS2_m' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::Init(int, ProcMapsIterator::Buffer*, bool) -->
    <elf-symbol name='_ZN16ProcMapsIterator4InitEiPNS_6BufferEb' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::Next(unsigned long*, unsigned long*, char**, unsigned long*, long*, char**) -->
    <elf-symbol name='_ZN16ProcMapsIterator4NextEPmS0_PPcS0_PlS2_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::NextExt(unsigned long*, unsigned long*, char**, unsigned long*, long*, char**, unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long*) -->
    <elf-symbol name='_ZN16ProcMapsIterator7NextExtEPmS0_PPcS0_PlS2_S0_S0_S0_S0_S0_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::ProcMapsIterator(int) -->
    <elf-symbol name='_ZN16ProcMapsIteratorC1Ei' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN16ProcMapsIteratorC2Ei' is-defined='yes'/>
    <!-- ProcMapsIterator::ProcMapsIterator(int, ProcMapsIterator::Buffer*) -->
    <elf-symbol name='_ZN16ProcMapsIteratorC1EiPNS_6BufferE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::ProcMapsIterator(int, ProcMapsIterator::Buffer*, bool) -->
    <elf-symbol name='_ZN16ProcMapsIteratorC1EiPNS_6BufferEb' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN16ProcMapsIteratorC2EiPNS_6BufferEb' is-defined='yes'/>
    <!-- ProcMapsIterator::ProcMapsIterator(int) -->
    <elf-symbol name='_ZN16ProcMapsIteratorC2Ei' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::ProcMapsIterator(int, ProcMapsIterator::Buffer*) -->
    <elf-symbol name='_ZN16ProcMapsIteratorC2EiPNS_6BufferE' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN16ProcMapsIteratorC1EiPNS_6BufferE' is-defined='yes'/>
    <!-- ProcMapsIterator::ProcMapsIterator(int, ProcMapsIterator::Buffer*, bool) -->
    <elf-symbol name='_ZN16ProcMapsIteratorC2EiPNS_6BufferEb' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::~ProcMapsIterator() -->
    <elf-symbol name='_ZN16ProcMapsIteratorD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN16ProcMapsIteratorD2Ev' is-defined='yes'/>
    <!-- ProcMapsIterator::~ProcMapsIterator() -->
    <elf-symbol name='_ZN16ProcMapsIteratorD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SbrkSysAllocator::Alloc(unsigned long, unsigned long*, unsigned long) -->
    <elf-symbol name='_ZN16SbrkSysAllocator5AllocEmPmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SbrkSysAllocator::~SbrkSysAllocator() -->
    <elf-symbol name='_ZN16SbrkSysAllocatorD0Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SbrkSysAllocator::~SbrkSysAllocator() -->
    <elf-symbol name='_ZN16SbrkSysAllocatorD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN16SbrkSysAllocatorD2Ev' is-defined='yes'/>
    <!-- SbrkSysAllocator::~SbrkSysAllocator() -->
    <elf-symbol name='_ZN16SbrkSysAllocatorD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMalloc_Printer::printf(char const*, ...) -->
    <elf-symbol name='_ZN16TCMalloc_Printer6printfEPKcz' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GoogleInitializer::~GoogleInitializer() -->
    <elf-symbol name='_ZN17GoogleInitializerD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GoogleInitializer::~GoogleInitializer() -->
    <elf-symbol name='_ZN17GoogleInitializerD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN17GoogleInitializerD1Ev' is-defined='yes'/>
    <!-- DevMemSysAllocator::Alloc(unsigned long, unsigned long*, unsigned long) -->
    <elf-symbol name='_ZN18DevMemSysAllocator5AllocEmPmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- DevMemSysAllocator::~DevMemSysAllocator() -->
    <elf-symbol name='_ZN18DevMemSysAllocatorD0Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- DevMemSysAllocator::~DevMemSysAllocator() -->
    <elf-symbol name='_ZN18DevMemSysAllocatorD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN18DevMemSysAllocatorD2Ev' is-defined='yes'/>
    <!-- DevMemSysAllocator::~DevMemSysAllocator() -->
    <elf-symbol name='_ZN18DevMemSysAllocatorD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- DefaultSysAllocator::Alloc(unsigned long, unsigned long*, unsigned long) -->
    <elf-symbol name='_ZN19DefaultSysAllocator5AllocEmPmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- DefaultSysAllocator::~DefaultSysAllocator() -->
    <elf-symbol name='_ZN19DefaultSysAllocatorD0Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- DefaultSysAllocator::~DefaultSysAllocator() -->
    <elf-symbol name='_ZN19DefaultSysAllocatorD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN19DefaultSysAllocatorD2Ev' is-defined='yes'/>
    <!-- DefaultSysAllocator::~DefaultSysAllocator() -->
    <elf-symbol name='_ZN19DefaultSysAllocatorD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HugetlbSysAllocator::Initialize() -->
    <elf-symbol name='_ZN19HugetlbSysAllocator10InitializeEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HugetlbSysAllocator::AllocInternal(unsigned long, unsigned long*, unsigned long) -->
    <elf-symbol name='_ZN19HugetlbSysAllocator13AllocInternalEmPmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HugetlbSysAllocator::Alloc(unsigned long, unsigned long*, unsigned long) -->
    <elf-symbol name='_ZN19HugetlbSysAllocator5AllocEmPmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HugetlbSysAllocator::~HugetlbSysAllocator() -->
    <elf-symbol name='_ZN19HugetlbSysAllocatorD0Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HugetlbSysAllocator::~HugetlbSysAllocator() -->
    <elf-symbol name='_ZN19HugetlbSysAllocatorD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN19HugetlbSysAllocatorD2Ev' is-defined='yes'/>
    <!-- HugetlbSysAllocator::~HugetlbSysAllocator() -->
    <elf-symbol name='_ZN19HugetlbSysAllocatorD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileEndWriter::~HeapProfileEndWriter() -->
    <elf-symbol name='_ZN20HeapProfileEndWriterD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN20HeapProfileEndWriterD2Ev' is-defined='yes'/>
    <!-- HeapProfileEndWriter::~HeapProfileEndWriter() -->
    <elf-symbol name='_ZN20HeapProfileEndWriterD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetOwnership(void const*) -->
    <elf-symbol name='_ZN22TCMallocImplementation12GetOwnershipEPKv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetHeapSample(std::string*) -->
    <elf-symbol name='_ZN22TCMallocImplementation13GetHeapSampleEPSs' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::MarkThreadBusy() -->
    <elf-symbol name='_ZN22TCMallocImplementation14MarkThreadBusyEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::MarkThreadIdle() -->
    <elf-symbol name='_ZN22TCMallocImplementation14MarkThreadIdleEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::ReadStackTraces(int*) -->
    <elf-symbol name='_ZN22TCMallocImplementation15ReadStackTracesEPi' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::ReleaseToSystem(unsigned long) -->
    <elf-symbol name='_ZN22TCMallocImplementation15ReleaseToSystemEm' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetAllocatedSize(void const*) -->
    <elf-symbol name='_ZN22TCMallocImplementation16GetAllocatedSizeEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*) -->
    <elf-symbol name='_ZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetNumericProperty(char const*, unsigned long*) -->
    <elf-symbol name='_ZN22TCMallocImplementation18GetNumericPropertyEPKcPm' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetSystemAllocator() -->
    <elf-symbol name='_ZN22TCMallocImplementation18GetSystemAllocatorEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::SetNumericProperty(char const*, unsigned long) -->
    <elf-symbol name='_ZN22TCMallocImplementation18SetNumericPropertyEPKcm' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::SetSystemAllocator(SysAllocator*) -->
    <elf-symbol name='_ZN22TCMallocImplementation18SetSystemAllocatorEP12SysAllocator' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetMemoryReleaseRate() -->
    <elf-symbol name='_ZN22TCMallocImplementation20GetMemoryReleaseRateEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::SetMemoryReleaseRate(double) -->
    <elf-symbol name='_ZN22TCMallocImplementation20SetMemoryReleaseRateEd' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetEstimatedAllocatedSize(unsigned long) -->
    <elf-symbol name='_ZN22TCMallocImplementation25GetEstimatedAllocatedSizeEm' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::ReadHeapGrowthStackTraces() -->
    <elf-symbol name='_ZN22TCMallocImplementation25ReadHeapGrowthStackTracesEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::Ranges(void*, void (*)(void*, base::MallocRange const*)) -->
    <elf-symbol name='_ZN22TCMallocImplementation6RangesEPvPFvS0_PKN4base11MallocRangeEE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetStats(char*, int) -->
    <elf-symbol name='_ZN22TCMallocImplementation8GetStatsEPci' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::~TCMallocImplementation() -->
    <elf-symbol name='_ZN22TCMallocImplementationD0Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::~TCMallocImplementation() -->
    <elf-symbol name='_ZN22TCMallocImplementationD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN22TCMallocImplementationD2Ev' is-defined='yes'/>
    <!-- TCMallocImplementation::~TCMallocImplementation() -->
    <elf-symbol name='_ZN22TCMallocImplementationD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakCheckerGlobalPrePost::~HeapLeakCheckerGlobalPrePost() -->
    <elf-symbol name='_ZN28HeapLeakCheckerGlobalPrePostD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN28HeapLeakCheckerGlobalPrePostD2Ev' is-defined='yes'/>
    <!-- HeapLeakCheckerGlobalPrePost::~HeapLeakCheckerGlobalPrePost() -->
    <elf-symbol name='_ZN28HeapLeakCheckerGlobalPrePostD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::RawPrinter::Printf(char const*, ...) -->
    <elf-symbol name='_ZN4base10RawPrinter6PrintfEPKcz' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::RawPrinter::RawPrinter(char*, int) -->
    <elf-symbol name='_ZN4base10RawPrinterC1EPci' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN4base10RawPrinterC2EPci' is-defined='yes'/>
    <!-- base::RawPrinter::RawPrinter(char*, int) -->
    <elf-symbol name='_ZN4base10RawPrinterC2EPci' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::Update(int) -->
    <elf-symbol name='_ZN4base11ElfMemImage14SymbolIterator6UpdateEi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::SymbolIterator(void const*, int) -->
    <elf-symbol name='_ZN4base11ElfMemImage14SymbolIteratorC1EPKvi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::SymbolIterator(void const*, int) -->
    <elf-symbol name='_ZN4base11ElfMemImage14SymbolIteratorC2EPKvi' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN4base11ElfMemImage14SymbolIteratorC1EPKvi' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::operator++() -->
    <elf-symbol name='_ZN4base11ElfMemImage14SymbolIteratorppEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::Init(void const*) -->
    <elf-symbol name='_ZN4base11ElfMemImage4InitEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::ElfMemImage(void const*) -->
    <elf-symbol name='_ZN4base11ElfMemImageC1EPKv' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN4base11ElfMemImageC2EPKv' is-defined='yes'/>
    <!-- base::ElfMemImage::ElfMemImage(void const*) -->
    <elf-symbol name='_ZN4base11ElfMemImageC2EPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::VDSOSupport::Init() -->
    <elf-symbol name='_ZN4base11VDSOSupport4InitEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::VDSOSupport::SetBase(void const*) -->
    <elf-symbol name='_ZN4base11VDSOSupport7SetBaseEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::VDSOSupport::VDSOSupport() -->
    <elf-symbol name='_ZN4base11VDSOSupportC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN4base11VDSOSupportC2Ev' is-defined='yes'/>
    <!-- base::VDSOSupport::VDSOSupport() -->
    <elf-symbol name='_ZN4base11VDSOSupportC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::SubmitSpinLockProfileData(void const*, long) -->
    <elf-symbol name='_ZN4base25SubmitSpinLockProfileDataEPKvl' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::SpinLockWait(int volatile*, int, base::internal::SpinLockWaitTransition const*) -->
    <elf-symbol name='_ZN4base8internal12SpinLockWaitEPViiPKNS0_22SpinLockWaitTransitionE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::SpinLockWake(int volatile*, bool) -->
    <elf-symbol name='_ZN4base8internal12SpinLockWakeEPVib' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::SpinLockDelay(int volatile*, int, int) -->
    <elf-symbol name='_ZN4base8internal13SpinLockDelayEPViii' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::HookList<void (*)(void const*, unsigned long)>::ExchangeSingular(void (*)(void const*, unsigned long)) -->
    <elf-symbol name='_ZN4base8internal8HookListIPFvPKvmEE16ExchangeSingularES5_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::HookList<void (*)(void const*, unsigned long)>::FixupPrivEndLocked() -->
    <elf-symbol name='_ZN4base8internal8HookListIPFvPKvmEE18FixupPrivEndLockedEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::HookList<void (*)(void const*, unsigned long)>::Add(void (*)(void const*, unsigned long)) -->
    <elf-symbol name='_ZN4base8internal8HookListIPFvPKvmEE3AddES5_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::HookList<void (*)(void const*, unsigned long)>::Remove(void (*)(void const*, unsigned long)) -->
    <elf-symbol name='_ZN4base8internal8HookListIPFvPKvmEE6RemoveES5_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SpinLock::SlowUnlock(unsigned long) -->
    <elf-symbol name='_ZN8SpinLock10SlowUnlockEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SpinLock::SlowLock() -->
    <elf-symbol name='_ZN8SpinLock8SlowLockEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SpinLock::SpinLoop(long, int*) -->
    <elf-symbol name='_ZN8SpinLock8SpinLoopElPi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::DLL_Length(tcmalloc::Span const*) -->
    <elf-symbol name='_ZN8tcmalloc10DLL_LengthEPKNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::DLL_Remove(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc10DLL_RemoveEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::DeleteSpan(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc10DeleteSpanEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::DLL_Prepend(tcmalloc::Span*, tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc11DLL_PrependEPNS_4SpanES1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::BecomeIdle() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache10BecomeIdleEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::InitModule() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache10InitModuleEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::DeleteCache(tcmalloc::ThreadCache*) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache11DeleteCacheEPS0_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::ListTooLong(tcmalloc::ThreadCache::FreeList*, unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache11ListTooLongEPNS0_8FreeListEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::GetThreadStats(unsigned long*, unsigned long*) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache14GetThreadStatsEPmS1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::GetSamplePeriod() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache15GetSamplePeriodEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::DestroyThreadCache(void*) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache18DestroyThreadCacheEPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::IncreaseCacheLimit() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache18IncreaseCacheLimitEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::FetchFromCentralCache(unsigned long, unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache21FetchFromCentralCacheEmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::ReleaseToCentralCache(tcmalloc::ThreadCache::FreeList*, unsigned long, int) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache21ReleaseToCentralCacheEPNS0_8FreeListEmi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::CreateCacheIfNecessary() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache22CreateCacheIfNecessaryEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::IncreaseCacheLimitLocked() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache24IncreaseCacheLimitLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::RecomputePerThreadCacheSize() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache27RecomputePerThreadCacheSizeEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::set_overall_thread_cache_size(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache29set_overall_thread_cache_sizeEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::Init(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache4InitEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::Cleanup() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache7CleanupEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::InitTSD() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache7InitTSDEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::NewHeap(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache7NewHeapEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::GetCache() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache8GetCacheEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::Scavenge() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache8ScavengeEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::MetaDataAlloc(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc13MetaDataAllocEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::InsertRange(void*, void*, int) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList11InsertRangeEPvS1_i' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::RemoveRange(void**, void**, int) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList11RemoveRangeEPPvS2_i' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::ShrinkCache(int, bool) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList11ShrinkCacheEib' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::OverheadBytes() -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList13OverheadBytesEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::MakeCacheSpace() -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList14MakeCacheSpaceEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::ReleaseToSpans(void*) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList14ReleaseToSpansEPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::FetchFromOneSpans(int, void**, void**) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList17FetchFromOneSpansEiPPvS2_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::ReleaseListToSpans(void*) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList18ReleaseListToSpansEPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::EvictRandomSizeClass(int, bool) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList20EvictRandomSizeClassEib' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList21FetchFromOneSpansSafeEiPPvS2_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::Init(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList4InitEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::Populate() -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList8PopulateEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::tc_length() -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList9tc_lengthEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::StackTraceTable::ReadStackTracesAndClear() -->
    <elf-symbol name='_ZN8tcmalloc15StackTraceTable23ReadStackTracesAndClearEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::StackTraceTable::AddTrace(tcmalloc::StackTrace const&) -->
    <elf-symbol name='_ZN8tcmalloc15StackTraceTable8AddTraceERKNS_10StackTraceE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::StackTraceTable::StackTraceTable() -->
    <elf-symbol name='_ZN8tcmalloc15StackTraceTableC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::StackTraceTable::StackTraceTable() -->
    <elf-symbol name='_ZN8tcmalloc15StackTraceTableC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN8tcmalloc15StackTraceTableC1Ev' is-defined='yes'/>
    <!-- tcmalloc::StackTraceTable::~StackTraceTable() -->
    <elf-symbol name='_ZN8tcmalloc15StackTraceTableD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::StackTraceTable::~StackTraceTable() -->
    <elf-symbol name='_ZN8tcmalloc15StackTraceTableD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN8tcmalloc15StackTraceTableD1Ev' is-defined='yes'/>
    <!-- tcmalloc::AlignmentForSize(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc16AlignmentForSizeEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::DumpProcSelfMaps(int) -->
    <elf-symbol name='_ZN8tcmalloc16DumpProcSelfMapsEi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::FillProcSelfMaps(char*, int, bool*) -->
    <elf-symbol name='_ZN8tcmalloc16FillProcSelfMapsEPciPb' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::commandlineflags::StringToBool(char const*, bool) -->
    <elf-symbol name='_ZN8tcmalloc16commandlineflags12StringToBoolEPKcb' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::metadata_system_bytes() -->
    <elf-symbol name='_ZN8tcmalloc21metadata_system_bytesEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Log(tcmalloc::LogMode, char const*, int, tcmalloc::LogItem, tcmalloc::LogItem, tcmalloc::LogItem, tcmalloc::LogItem) -->
    <elf-symbol name='_ZN8tcmalloc3LogENS_7LogModeEPKciNS_7LogItemES3_S3_S3_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Logger::Add(tcmalloc::LogItem const&) -->
    <elf-symbol name='_ZN8tcmalloc6Logger3AddERKNS_7LogItemE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Logger::AddNum(unsigned long, int) -->
    <elf-symbol name='_ZN8tcmalloc6Logger6AddNumEmi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Logger::AddStr(char const*, int) -->
    <elf-symbol name='_ZN8tcmalloc6Logger6AddStrEPKci' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::InitStaticVars() -->
    <elf-symbol name='_ZN8tcmalloc6Static14InitStaticVarsEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::NewSpan(unsigned long, unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc7NewSpanEmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Sampler::InitStatics() -->
    <elf-symbol name='_ZN8tcmalloc7Sampler11InitStaticsEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Sampler::GetSamplePeriod() -->
    <elf-symbol name='_ZN8tcmalloc7Sampler15GetSamplePeriodEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Sampler::PickNextSamplingPoint() -->
    <elf-symbol name='_ZN8tcmalloc7Sampler21PickNextSamplingPointEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Sampler::PopulateFastLog2Table() -->
    <elf-symbol name='_ZN8tcmalloc7Sampler21PopulateFastLog2TableEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Sampler::Init(unsigned int) -->
    <elf-symbol name='_ZN8tcmalloc7Sampler4InitEj' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::SizeMap::NumMoveSize(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc7SizeMap11NumMoveSizeEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::SizeMap::Init() -->
    <elf-symbol name='_ZN8tcmalloc7SizeMap4InitEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::DLL_Init(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8DLL_InitEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::AllocLarge(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap10AllocLargeEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::CommitSpan(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap10CommitSpanEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::EnsureLimit(unsigned long, bool) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap11EnsureLimitEmb' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::DecommitSpan(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap12DecommitSpanEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::GetNextRange(unsigned long, base::MallocRange*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap12GetNextRangeEmPN4base11MallocRangeE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::MayMergeSpans(tcmalloc::Span*, tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap13MayMergeSpansEPNS_4SpanES2_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::CheckExpensive() -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap14CheckExpensiveEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::GetLargeSpanStats(tcmalloc::PageHeap::LargeSpanStats*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap17GetLargeSpanStatsEPNS0_14LargeSpanStatsE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::GetSmallSpanStats(tcmalloc::PageHeap::SmallSpanStats*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap17GetSmallSpanStatsEPNS0_14SmallSpanStatsE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::MergeIntoFreeList(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap17MergeIntoFreeListEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::PrependToFreeList(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap17PrependToFreeListEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::RegisterSizeClass(tcmalloc::Span*, unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap17RegisterSizeClassEPNS_4SpanEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::RemoveFromFreeList(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap18RemoveFromFreeListEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::IncrementalScavenge(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap19IncrementalScavengeEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::ReleaseAtLeastNPages(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap20ReleaseAtLeastNPagesEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::ReleaseLastNormalSpan(tcmalloc::PageHeap::SpanList*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap21ReleaseLastNormalSpanEPNS0_8SpanListE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::SearchFreeAndLargeLists(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap23SearchFreeAndLargeListsEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::New(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap3NewEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::Carve(tcmalloc::Span*, unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap5CarveEPNS_4SpanEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::Check() -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap5CheckEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::Split(tcmalloc::Span*, unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap5SplitEPNS_4SpanEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::Delete(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap6DeleteEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::GrowHeap(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap8GrowHeapEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::CheckList(tcmalloc::Span*, unsigned long, unsigned long, int) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap9CheckListEPNS_4SpanEmmi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::PageHeap() -->
    <elf-symbol name='_ZN8tcmalloc8PageHeapC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN8tcmalloc8PageHeapC2Ev' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::PageHeap() -->
    <elf-symbol name='_ZN8tcmalloc8PageHeapC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::GetCurrentState(ProfileData::State*) const -->
    <elf-symbol name='_ZNK11ProfileData15GetCurrentStateEPNS_5StateE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::BytesLeaked() const -->
    <elf-symbol name='_ZNK15HeapLeakChecker11BytesLeakedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::ObjectsLeaked() const -->
    <elf-symbol name='_ZNK15HeapLeakChecker13ObjectsLeakedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::FindInsideAlloc(void const*, unsigned long, void const**, unsigned long*) const -->
    <elf-symbol name='_ZNK16HeapProfileTable15FindInsideAllocEPKvmPS1_Pm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::FindAllocDetails(void const*, HeapProfileTable::AllocInfo*) const -->
    <elf-symbol name='_ZNK16HeapProfileTable16FindAllocDetailsEPKvPNS_9AllocInfoE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::FillOrderedProfile(char*, int) const -->
    <elf-symbol name='_ZNK16HeapProfileTable18FillOrderedProfileEPci' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::MakeSortedBucketList() const -->
    <elf-symbol name='_ZNK16HeapProfileTable20MakeSortedBucketListEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::IterateOrderedAllocContexts(void (*)(HeapProfileTable::AllocContextInfo const&)) const -->
    <elf-symbol name='_ZNK16HeapProfileTable27IterateOrderedAllocContextsEPFvRKNS_16AllocContextInfoEE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::FindAlloc(void const*, unsigned long*) const -->
    <elf-symbol name='_ZNK16HeapProfileTable9FindAllocEPKvPm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::Valid() const -->
    <elf-symbol name='_ZNK16ProcMapsIterator5ValidEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetSymAddr(Elf64_Sym const*) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage10GetSymAddrEPK9Elf64_Sym' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetVerdefAux(Elf64_Verdef const*) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage12GetVerdefAuxEPK12Elf64_Verdef' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::LookupSymbol(char const*, char const*, int, base::ElfMemImage::SymbolInfo*) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage12LookupSymbolEPKcS2_iPNS0_10SymbolInfoE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetNumSymbols() const -->
    <elf-symbol name='_ZNK4base11ElfMemImage13GetNumSymbolsEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::operator*() const -->
    <elf-symbol name='_ZNK4base11ElfMemImage14SymbolIteratordeEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::operator==(base::ElfMemImage::SymbolIterator const&) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage14SymbolIteratoreqERKS1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::operator!=(base::ElfMemImage::SymbolIterator const&) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage14SymbolIteratorneERKS1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::operator&#45;>() const -->
    <elf-symbol name='_ZNK4base11ElfMemImage14SymbolIteratorptEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::LookupSymbolByAddress(void const*, base::ElfMemImage::SymbolInfo*) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage21LookupSymbolByAddressEPKvPNS0_10SymbolInfoE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::end() const -->
    <elf-symbol name='_ZNK4base11ElfMemImage3endEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::begin() const -->
    <elf-symbol name='_ZNK4base11ElfMemImage5beginEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetPhdr(int) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage7GetPhdrEi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetDynstr(unsigned int) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage9GetDynstrEj' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetDynsym(int) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage9GetDynsymEi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetVerdef(int) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage9GetVerdefEi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetVerstr(unsigned int) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage9GetVerstrEj' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetVersym(int) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage9GetVersymEi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::VDSOSupport::LookupSymbol(char const*, char const*, int, base::ElfMemImage::SymbolInfo*) const -->
    <elf-symbol name='_ZNK4base11VDSOSupport12LookupSymbolEPKcS2_iPNS_11ElfMemImage10SymbolInfoE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::VDSOSupport::LookupSymbolByAddress(void const*, base::ElfMemImage::SymbolInfo*) const -->
    <elf-symbol name='_ZNK4base11VDSOSupport21LookupSymbolByAddressEPKvPNS_11ElfMemImage10SymbolInfoE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::HookList<void (*)(void const*, unsigned long)>::GetSingular() const -->
    <elf-symbol name='_ZNK4base8internal8HookListIPFvPKvmEE11GetSingularEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::HookList<void (*)(void const*, unsigned long)>::empty() const -->
    <elf-symbol name='_ZNK4base8internal8HookListIPFvPKvmEE5emptyEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::HookList<void (*)(void const*, unsigned long)>::Traverse(void (**)(void const*, unsigned long), int) const -->
    <elf-symbol name='_ZNK4base8internal8HookListIPFvPKvmEE8TraverseEPS5_i' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::StackTraceTable::Bucket::KeyEqual(unsigned long, tcmalloc::StackTrace const&) const -->
    <elf-symbol name='_ZNK8tcmalloc15StackTraceTable6Bucket8KeyEqualEmRKNS_10StackTraceE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_M_destroy(STL_Allocator<char, HeapLeakChecker::Allocator> const&) -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep10_M_destroyERKS4_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_S_create(unsigned long, unsigned long, STL_Allocator<char, HeapLeakChecker::Allocator> const&) -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep9_S_createEmmRKS4_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(char const*, STL_Allocator<char, HeapLeakChecker::Allocator> const&) -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC1EPKcRKS4_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const&) -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC1ERKS5_' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC2ERKS5_' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(char const*, STL_Allocator<char, HeapLeakChecker::Allocator> const&) -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC2EPKcRKS4_' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC1EPKcRKS4_' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const&) -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC2ERKS5_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::~basic_string() -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEED1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEED2Ev' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::~basic_string() -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEED2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_M_insert_aux(__gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, AllocObject const&) -->
    <elf-symbol name='_ZNSt6vectorI11AllocObject13STL_AllocatorIS0_N15HeapLeakChecker9AllocatorEEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S5_EERKS0_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_M_insert_aux(__gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >, MallocExtension::FreeListInfo const&) -->
    <elf-symbol name='_ZNSt6vectorIN15MallocExtension12FreeListInfoESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::vector<void (*)(), std::allocator<void (*)()> >::_M_insert_aux(__gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >, void (* const&)()) -->
    <elf-symbol name='_ZNSt6vectorIPFvvESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_M_insert_aux(__gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >, void* const&) -->
    <elf-symbol name='_ZNSt6vectorIPv13STL_AllocatorIS0_N15HeapLeakChecker9AllocatorEEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S5_EERKS0_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_insert_(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, MemoryRegionMap::Region const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSB_RKS1_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_erase(std::_Rb_tree_node<MemoryRegionMap::Region>*) -->
    <elf-symbol name='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS1_E' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<HeapProfileBucket*, std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileBucket*>, std::allocator<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_insert_(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE10_M_insert_EPKSt18_Rb_tree_node_baseSG_RKS7_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<HeapProfileBucket*, std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileBucket*>, std::allocator<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_insert_unique(std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE16_M_insert_uniqueERKS7_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<HeapProfileBucket*, std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileBucket*>, std::allocator<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> >, std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS7_ERKS7_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<HeapProfileBucket*, std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileBucket*>, std::allocator<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_erase(std::_Rb_tree_node<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> >*) -->
    <elf-symbol name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<void const*, std::pair<void const* const, char const*>, std::_Select1st<std::pair<void const* const, char const*> >, std::less<void const*>, std::allocator<std::pair<void const* const, char const*> > >::_M_insert_(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair<void const* const, char const*> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_M_insert_EPKSt18_Rb_tree_node_baseSF_RKS6_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<void const*, std::pair<void const* const, char const*>, std::_Select1st<std::pair<void const* const, char const*> >, std::less<void const*>, std::allocator<std::pair<void const* const, char const*> > >::_M_insert_unique(std::pair<void const* const, char const*> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE16_M_insert_uniqueERKS6_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<void const*, std::pair<void const* const, char const*>, std::_Select1st<std::pair<void const* const, char const*> >, std::less<void const*>, std::allocator<std::pair<void const* const, char const*> > >::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<void const* const, char const*> >, std::pair<void const* const, char const*> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS6_ERKS6_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<void const*, std::pair<void const* const, char const*>, std::_Select1st<std::pair<void const* const, char const*> >, std::less<void const*>, std::allocator<std::pair<void const* const, char const*> > >::_M_erase(std::_Rb_tree_node<std::pair<void const* const, char const*> >*) -->
    <elf-symbol name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_insert_(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE10_M_insert_EPKSt18_Rb_tree_node_baseSM_RKSD_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_insert_unique(std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE16_M_insert_uniqueERKSD_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorISD_ERKSD_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >*) -->
    <elf-symbol name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE8_M_eraseEPSt13_Rb_tree_nodeISD_E' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<unsigned long, std::pair<unsigned long const, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<unsigned long const, HeapLeakChecker::RangeValue> >, std::less<unsigned long>, STL_Allocator<std::pair<unsigned long const, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_M_insert_(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair<unsigned long const, HeapLeakChecker::RangeValue> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeImSt4pairIKmN15HeapLeakChecker10RangeValueEESt10_Select1stIS4_ESt4lessImE13STL_AllocatorIS4_NS2_9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSF_RKS4_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<unsigned long, std::pair<unsigned long const, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<unsigned long const, HeapLeakChecker::RangeValue> >, std::less<unsigned long>, STL_Allocator<std::pair<unsigned long const, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, HeapLeakChecker::RangeValue> >*) -->
    <elf-symbol name='_ZNSt8_Rb_treeImSt4pairIKmN15HeapLeakChecker10RangeValueEESt10_Select1stIS4_ESt4lessImE13STL_AllocatorIS4_NS2_9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS4_E' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<unsigned long, std::pair<unsigned long const, unsigned long>, std::_Select1st<std::pair<unsigned long const, unsigned long> >, std::less<unsigned long>, STL_Allocator<std::pair<unsigned long const, unsigned long>, HeapLeakChecker::Allocator> >::_M_insert_(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair<unsigned long const, unsigned long> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImE13STL_AllocatorIS2_N15HeapLeakChecker9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSE_RKS2_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<unsigned long, std::pair<unsigned long const, unsigned long>, std::_Select1st<std::pair<unsigned long const, unsigned long> >, std::less<unsigned long>, STL_Allocator<std::pair<unsigned long const, unsigned long>, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, unsigned long> >*) -->
    <elf-symbol name='_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImE13STL_AllocatorIS2_N15HeapLeakChecker9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS2_E' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, STL_Allocator<unsigned long, HeapLeakChecker::Allocator> >::_M_insert_(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, unsigned long const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeImmSt9_IdentityImESt4lessImE13STL_AllocatorImN15HeapLeakChecker9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSB_RKm' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, STL_Allocator<unsigned long, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<unsigned long>*) -->
    <elf-symbol name='_ZNSt8_Rb_treeImmSt9_IdentityImESt4lessImE13STL_AllocatorImN15HeapLeakChecker9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeImE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- void std::__adjust_heap<HeapProfileTable::Snapshot::Entry*, long, HeapProfileTable::Snapshot::Entry>(HeapProfileTable::Snapshot::Entry*, long, long, HeapProfileTable::Snapshot::Entry) -->
    <elf-symbol name='_ZSt13__adjust_heapIPN16HeapProfileTable8Snapshot5EntryElS2_EvT_T0_S5_T1_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- void std::__adjust_heap<HeapProfileBucket**, long, HeapProfileBucket*, bool (*)(HeapProfileStats*, HeapProfileStats*)>(HeapProfileBucket**, long, long, HeapProfileBucket*, bool (*)(HeapProfileStats*, HeapProfileStats*)) -->
    <elf-symbol name='_ZSt13__adjust_heapIPP17HeapProfileBucketlS1_PFbP16HeapProfileStatsS4_EEvT_T0_S8_T1_T2_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- void std::__heap_select<HeapProfileBucket**, bool (*)(HeapProfileStats*, HeapProfileStats*)>(HeapProfileBucket**, HeapProfileBucket**, HeapProfileBucket**, bool (*)(HeapProfileStats*, HeapProfileStats*)) -->
    <elf-symbol name='_ZSt13__heap_selectIPP17HeapProfileBucketPFbP16HeapProfileStatsS4_EEvT_S7_S7_T0_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- void std::__insertion_sort<HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
    <elf-symbol name='_ZSt16__insertion_sortIPN16HeapProfileTable8Snapshot5EntryEEvT_S4_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- void std::__insertion_sort<HeapProfileBucket**, bool (*)(HeapProfileStats*, HeapProfileStats*)>(HeapProfileBucket**, HeapProfileBucket**, bool (*)(HeapProfileStats*, HeapProfileStats*)) -->
    <elf-symbol name='_ZSt16__insertion_sortIPP17HeapProfileBucketPFbP16HeapProfileStatsS4_EEvT_S7_T0_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- void std::__introsort_loop<HeapProfileTable::Snapshot::Entry*, long>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*, long) -->
    <elf-symbol name='_ZSt16__introsort_loopIPN16HeapProfileTable8Snapshot5EntryElEvT_S4_T0_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- void std::__introsort_loop<HeapProfileBucket**, long, bool (*)(HeapProfileStats*, HeapProfileStats*)>(HeapProfileBucket**, HeapProfileBucket**, long, bool (*)(HeapProfileStats*, HeapProfileStats*)) -->
    <elf-symbol name='_ZSt16__introsort_loopIPP17HeapProfileBucketlPFbP16HeapProfileStatsS4_EEvT_S7_T0_T1_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) -->
    <elf-symbol name='_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator delete[](void*) -->
    <elf-symbol name='_ZdaPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator delete[](void*, std::nothrow_t const&) -->
    <elf-symbol name='_ZdaPvRKSt9nothrow_t' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator delete(void*) -->
    <elf-symbol name='_ZdlPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator delete(void*, std::nothrow_t const&) -->
    <elf-symbol name='_ZdlPvRKSt9nothrow_t' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator new[](unsigned long) -->
    <elf-symbol name='_Znam' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator new[](unsigned long, std::nothrow_t const&) -->
    <elf-symbol name='_ZnamRKSt9nothrow_t' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator new(unsigned long) -->
    <elf-symbol name='_Znwm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator new(unsigned long, std::nothrow_t const&) -->
    <elf-symbol name='_ZnwmRKSt9nothrow_t' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_calloc -->
    <elf-symbol name='__libc_calloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_cfree -->
    <elf-symbol name='__libc_cfree' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_free -->
    <elf-symbol name='__libc_free' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_malloc -->
    <elf-symbol name='__libc_malloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_memalign -->
    <elf-symbol name='__libc_memalign' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_pvalloc -->
    <elf-symbol name='__libc_pvalloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_realloc -->
    <elf-symbol name='__libc_realloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_valloc -->
    <elf-symbol name='__libc_valloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __posix_memalign -->
    <elf-symbol name='__posix_memalign' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- _fini -->
    <elf-symbol name='_fini' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- _init -->
    <elf-symbol name='_init' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- calloc -->
    <elf-symbol name='calloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- cfree -->
    <elf-symbol name='cfree' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- free -->
    <elf-symbol name='free' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- mallinfo -->
    <elf-symbol name='mallinfo' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- malloc -->
    <elf-symbol name='malloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- malloc_size -->
    <elf-symbol name='malloc_size' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- malloc_stats -->
    <elf-symbol name='malloc_stats' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- malloc_usable_size -->
    <elf-symbol name='malloc_usable_size' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- mallopt -->
    <elf-symbol name='mallopt' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- memalign -->
    <elf-symbol name='memalign' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- mmap -->
    <elf-symbol name='mmap' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- mmap64 -->
    <elf-symbol name='mmap64' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- mremap -->
    <elf-symbol name='mremap' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- munmap -->
    <elf-symbol name='munmap' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- posix_memalign -->
    <elf-symbol name='posix_memalign' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- pvalloc -->
    <elf-symbol name='pvalloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- realloc -->
    <elf-symbol name='realloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- sbrk -->
    <elf-symbol name='sbrk' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tc_calloc -->
    <elf-symbol name='tc_calloc' type='func-type' binding='global-binding' visibility='default-visibility' alias='calloc,__libc_calloc' is-defined='yes'/>
    <!-- tc_cfree -->
    <elf-symbol name='tc_cfree' type='func-type' binding='global-binding' visibility='default-visibility' alias='__libc_cfree,cfree' is-defined='yes'/>
    <!-- tc_delete -->
    <elf-symbol name='tc_delete' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZdlPv' is-defined='yes'/>
    <!-- tc_delete_nothrow -->
    <elf-symbol name='tc_delete_nothrow' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZdlPvRKSt9nothrow_t' is-defined='yes'/>
    <!-- tc_deletearray -->
    <elf-symbol name='tc_deletearray' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZdaPv' is-defined='yes'/>
    <!-- tc_deletearray_nothrow -->
    <elf-symbol name='tc_deletearray_nothrow' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZdaPvRKSt9nothrow_t' is-defined='yes'/>
    <!-- tc_free -->
    <elf-symbol name='tc_free' type='func-type' binding='global-binding' visibility='default-visibility' alias='free,__libc_free' is-defined='yes'/>
    <!-- tc_mallinfo -->
    <elf-symbol name='tc_mallinfo' type='func-type' binding='global-binding' visibility='default-visibility' alias='mallinfo' is-defined='yes'/>
    <!-- tc_malloc -->
    <elf-symbol name='tc_malloc' type='func-type' binding='global-binding' visibility='default-visibility' alias='__libc_malloc,malloc' is-defined='yes'/>
    <!-- tc_malloc_size -->
    <elf-symbol name='tc_malloc_size' type='func-type' binding='global-binding' visibility='default-visibility' alias='malloc_usable_size,malloc_size' is-defined='yes'/>
    <!-- tc_malloc_skip_new_handler -->
    <elf-symbol name='tc_malloc_skip_new_handler' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tc_malloc_stats -->
    <elf-symbol name='tc_malloc_stats' type='func-type' binding='global-binding' visibility='default-visibility' alias='malloc_stats' is-defined='yes'/>
    <!-- tc_mallopt -->
    <elf-symbol name='tc_mallopt' type='func-type' binding='global-binding' visibility='default-visibility' alias='mallopt' is-defined='yes'/>
    <!-- tc_memalign -->
    <elf-symbol name='tc_memalign' type='func-type' binding='global-binding' visibility='default-visibility' alias='memalign,__libc_memalign' is-defined='yes'/>
    <!-- tc_new -->
    <elf-symbol name='tc_new' type='func-type' binding='global-binding' visibility='default-visibility' alias='_Znwm' is-defined='yes'/>
    <!-- tc_new_nothrow -->
    <elf-symbol name='tc_new_nothrow' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZnwmRKSt9nothrow_t' is-defined='yes'/>
    <!-- tc_newarray -->
    <elf-symbol name='tc_newarray' type='func-type' binding='global-binding' visibility='default-visibility' alias='_Znam' is-defined='yes'/>
    <!-- tc_newarray_nothrow -->
    <elf-symbol name='tc_newarray_nothrow' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZnamRKSt9nothrow_t' is-defined='yes'/>
    <!-- tc_posix_memalign -->
    <elf-symbol name='tc_posix_memalign' type='func-type' binding='global-binding' visibility='default-visibility' alias='__posix_memalign,posix_memalign' is-defined='yes'/>
    <!-- tc_pvalloc -->
    <elf-symbol name='tc_pvalloc' type='func-type' binding='global-binding' visibility='default-visibility' alias='pvalloc,__libc_pvalloc' is-defined='yes'/>
    <!-- tc_realloc -->
    <elf-symbol name='tc_realloc' type='func-type' binding='global-binding' visibility='default-visibility' alias='__libc_realloc,realloc' is-defined='yes'/>
    <!-- tc_set_new_mode -->
    <elf-symbol name='tc_set_new_mode' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tc_valloc -->
    <elf-symbol name='tc_valloc' type='func-type' binding='global-binding' visibility='default-visibility' alias='__libc_valloc,valloc' is-defined='yes'/>
    <!-- tc_version -->
    <elf-symbol name='tc_version' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- valloc -->
    <elf-symbol name='valloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
  </elf-function-symbols>
  <elf-variable-symbols>
    <!-- TCMalloc_SystemTaken -->
    <elf-symbol name='TCMalloc_SystemTaken' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::instance_ -->
    <elf-symbol name='_ZN11CpuProfiler9instance_E' size='88' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapCleaner::heap_cleanups_ -->
    <elf-symbol name='_ZN11HeapCleaner14heap_cleanups_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::kBufferLength -->
    <elf-symbol name='_ZN11ProfileData13kBufferLengthE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::kAssociativity -->
    <elf-symbol name='_ZN11ProfileData14kAssociativityE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::kMaxStackDepth -->
    <elf-symbol name='_ZN11ProfileData14kMaxStackDepthE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::kBuckets -->
    <elf-symbol name='_ZN11ProfileData8kBucketsE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::kMaxFrequency -->
    <elf-symbol name='_ZN14ProfileHandler13kMaxFrequencyE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::kDefaultFrequency -->
    <elf-symbol name='_ZN14ProfileHandler17kDefaultFrequencyE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::once_ -->
    <elf-symbol name='_ZN14ProfileHandler5once_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::instance_ -->
    <elf-symbol name='_ZN14ProfileHandler9instance_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::Allocator::alloc_count_ -->
    <elf-symbol name='_ZN15HeapLeakChecker9Allocator12alloc_count_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::Allocator::arena_ -->
    <elf-symbol name='_ZN15HeapLeakChecker9Allocator6arena_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::owner_lock_ -->
    <elf-symbol name='_ZN15MemoryRegionMap11owner_lock_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::unmap_size_ -->
    <elf-symbol name='_ZN15MemoryRegionMap11unmap_size_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::num_buckets_ -->
    <elf-symbol name='_ZN15MemoryRegionMap12num_buckets_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::bucket_table_ -->
    <elf-symbol name='_ZN15MemoryRegionMap13bucket_table_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::client_count_ -->
    <elf-symbol name='_ZN15MemoryRegionMap13client_count_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::saved_buckets_ -->
    <elf-symbol name='_ZN15MemoryRegionMap14saved_buckets_E' size='1120' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::lock_owner_tid_ -->
    <elf-symbol name='_ZN15MemoryRegionMap15lock_owner_tid_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::max_stack_depth_ -->
    <elf-symbol name='_ZN15MemoryRegionMap16max_stack_depth_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::recursion_count_ -->
    <elf-symbol name='_ZN15MemoryRegionMap16recursion_count_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::saved_buckets_keys_ -->
    <elf-symbol name='_ZN15MemoryRegionMap19saved_buckets_keys_E' size='5120' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::saved_buckets_count_ -->
    <elf-symbol name='_ZN15MemoryRegionMap20saved_buckets_count_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::lock_ -->
    <elf-symbol name='_ZN15MemoryRegionMap5lock_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::arena_ -->
    <elf-symbol name='_ZN15MemoryRegionMap6arena_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::regions_ -->
    <elf-symbol name='_ZN15MemoryRegionMap8regions_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::map_size_ -->
    <elf-symbol name='_ZN15MemoryRegionMap9map_size_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::kMaxStackDepth -->
    <elf-symbol name='_ZN16HeapProfileTable14kMaxStackDepthE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::kFileExt -->
    <elf-symbol name='_ZN16HeapProfileTable8kFileExtE' size='6' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakCheckerGlobalPrePost::count_ -->
    <elf-symbol name='_ZN28HeapLeakCheckerGlobalPrePost6count_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::kInvalidBase -->
    <elf-symbol name='_ZN4base11ElfMemImage12kInvalidBaseE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::VDSOSupport::vdso_base_ -->
    <elf-symbol name='_ZN4base11VDSOSupport10vdso_base_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_mmap_log -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead14FLAGS_mmap_logE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nommap_log -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead16FLAGS_nommap_logE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_mmap_profile -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead18FLAGS_mmap_profileE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nommap_profile -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead20FLAGS_nommap_profileE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_malloc_skip_mmap -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead22FLAGS_malloc_skip_mmapE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_malloc_skip_sbrk -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead22FLAGS_malloc_skip_sbrkE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_report -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead23FLAGS_heap_check_reportE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_only_mmap_profile -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead23FLAGS_only_mmap_profileE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomalloc_skip_mmap -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead24FLAGS_nomalloc_skip_mmapE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomalloc_skip_sbrk -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead24FLAGS_nomalloc_skip_sbrkE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_report -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead25FLAGS_noheap_check_reportE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noonly_mmap_profile -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead25FLAGS_noonly_mmap_profileE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_cpu_profiler_unittest -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead27FLAGS_cpu_profiler_unittestE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_strict_check -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead29FLAGS_heap_check_strict_checkE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nocpu_profiler_unittest -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead29FLAGS_nocpu_profiler_unittestE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_run_under_gdb -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead30FLAGS_heap_check_run_under_gdbE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_memfs_malloc_map_private -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead30FLAGS_memfs_malloc_map_privateE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_cleanup_old_heap_profiles -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_cleanup_old_heap_profilesE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_identify_leaks -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_heap_check_identify_leaksE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_strict_check -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_noheap_check_strict_checkE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_memfs_malloc_abort_on_fail -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_memfs_malloc_abort_on_failE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_run_under_gdb -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_noheap_check_run_under_gdbE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomemfs_malloc_map_private -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_nomemfs_malloc_map_privateE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nocleanup_old_heap_profiles -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead33FLAGS_nocleanup_old_heap_profilesE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_identify_leaks -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead33FLAGS_noheap_check_identify_leaksE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_after_destructors -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead34FLAGS_heap_check_after_destructorsE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomemfs_malloc_abort_on_fail -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead34FLAGS_nomemfs_malloc_abort_on_failE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_ignore_global_live -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_heap_check_ignore_global_liveE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_ignore_thread_live -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_heap_check_ignore_thread_liveE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_malloc_disable_memory_release -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_malloc_disable_memory_releaseE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_memfs_malloc_ignore_mmap_fail -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_memfs_malloc_ignore_mmap_failE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_before_constructors -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead36FLAGS_heap_check_before_constructorsE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_after_destructors -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead36FLAGS_noheap_check_after_destructorsE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_ignore_global_live -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_noheap_check_ignore_global_liveE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_ignore_thread_live -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_noheap_check_ignore_thread_liveE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomalloc_disable_memory_release -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_nomalloc_disable_memory_releaseE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomemfs_malloc_ignore_mmap_fail -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_nomemfs_malloc_ignore_mmap_failE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_before_constructors -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead38FLAGS_noheap_check_before_constructorsE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_test_pointer_alignment -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead39FLAGS_heap_check_test_pointer_alignmentE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_test_pointer_alignment -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead41FLAGS_noheap_check_test_pointer_alignmentE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_verbose -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead13FLAGS_verboseE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noverbose -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead15FLAGS_noverboseE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_malloc_devmem_limit -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead25FLAGS_malloc_devmem_limitE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_malloc_devmem_start -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead25FLAGS_malloc_devmem_startE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_heap_check_max_leaks -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead26FLAGS_heap_check_max_leaksE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_nomalloc_devmem_limit -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead27FLAGS_nomalloc_devmem_limitE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_nomalloc_devmem_start -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead27FLAGS_nomalloc_devmem_startE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noheap_check_max_leaks -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead28FLAGS_noheap_check_max_leaksE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_heap_check_delay_seconds -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead30FLAGS_heap_check_delay_secondsE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noheap_check_delay_seconds -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead32FLAGS_noheap_check_delay_secondsE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_heap_check_pointer_source_alignment -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead41FLAGS_heap_check_pointer_source_alignmentE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noheap_check_pointer_source_alignment -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead43FLAGS_noheap_check_pointer_source_alignmentE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_memfs_malloc_limit_mb -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead27FLAGS_memfs_malloc_limit_mbE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_tcmalloc_heap_limit_mb -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead28FLAGS_tcmalloc_heap_limit_mbE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_nomemfs_malloc_limit_mb -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead29FLAGS_nomemfs_malloc_limit_mbE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_notcmalloc_heap_limit_mb -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead30FLAGS_notcmalloc_heap_limit_mbE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_tcmalloc_sample_parameter -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead31FLAGS_tcmalloc_sample_parameterE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_time_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead32FLAGS_heap_profile_time_intervalE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_inuse_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead33FLAGS_heap_profile_inuse_intervalE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_notcmalloc_sample_parameter -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead33FLAGS_notcmalloc_sample_parameterE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_time_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead34FLAGS_noheap_profile_time_intervalE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_check_max_pointer_offset -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead35FLAGS_heap_check_max_pointer_offsetE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_inuse_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead35FLAGS_noheap_profile_inuse_intervalE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_check_max_pointer_offset -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead37FLAGS_noheap_check_max_pointer_offsetE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_allocation_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead38FLAGS_heap_profile_allocation_intervalE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_deallocation_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead40FLAGS_heap_profile_deallocation_intervalE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_allocation_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead40FLAGS_noheap_profile_allocation_intervalE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_deallocation_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead42FLAGS_noheap_profile_deallocation_intervalE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_tcmalloc_large_alloc_report_threshold -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead43FLAGS_tcmalloc_large_alloc_report_thresholdE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_notcmalloc_large_alloc_report_threshold -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead45FLAGS_notcmalloc_large_alloc_report_thresholdE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead::FLAGS_tcmalloc_release_rate -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead27FLAGS_tcmalloc_release_rateE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead::FLAGS_notcmalloc_release_rate -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead29FLAGS_notcmalloc_release_rateE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_heap_check -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead16FLAGS_heap_checkE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_noheap_check -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead18FLAGS_noheap_checkE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_symbolize_pprof -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead21FLAGS_symbolize_pprofE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_memfs_malloc_path -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead23FLAGS_memfs_malloc_pathE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_nosymbolize_pprof -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead23FLAGS_nosymbolize_pprofE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_heap_profile_pprof -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead24FLAGS_heap_profile_pprofE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_nomemfs_malloc_path -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead25FLAGS_nomemfs_malloc_pathE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_noheap_profile_pprof -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead26FLAGS_noheap_profile_pprofE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_heap_check_dump_directory -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead31FLAGS_heap_check_dump_directoryE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_noheap_check_dump_directory -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead33FLAGS_noheap_check_dump_directoryE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SpinLock::LINKER_INITIALIZED -->
    <elf-symbol name='_ZN8SpinLock18LINKER_INITIALIZEDE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::tsd_inited_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache11tsd_inited_E' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::thread_heaps_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache13thread_heaps_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::threadlocal_data_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache17threadlocal_data_E' size='16' type='tls-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::next_memory_steal_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache18next_memory_steal_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::thread_heap_count_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache18thread_heap_count_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::per_thread_cache_size_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache22per_thread_cache_size_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::unclaimed_cache_space_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache22unclaimed_cache_space_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::overall_thread_cache_size_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache26overall_thread_cache_size_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::heap_key_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache9heap_key_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::log_message_writer -->
    <elf-symbol name='_ZN8tcmalloc18log_message_writerE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::threadcache_allocator -->
    <elf-symbol name='_ZN8tcmalloc21threadcache_allocatorE' size='32' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::central_cache_ -->
    <elf-symbol name='_ZN8tcmalloc6Static14central_cache_E' size='107008' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::growth_stacks_ -->
    <elf-symbol name='_ZN8tcmalloc6Static14growth_stacks_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::pageheap_lock_ -->
    <elf-symbol name='_ZN8tcmalloc6Static14pageheap_lock_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::span_allocator_ -->
    <elf-symbol name='_ZN8tcmalloc6Static15span_allocator_E' size='32' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::sampled_objects_ -->
    <elf-symbol name='_ZN8tcmalloc6Static16sampled_objects_E' size='48' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::bucket_allocator_ -->
    <elf-symbol name='_ZN8tcmalloc6Static17bucket_allocator_E' size='32' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::stacktrace_allocator_ -->
    <elf-symbol name='_ZN8tcmalloc6Static21stacktrace_allocator_E' size='32' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::sizemap_ -->
    <elf-symbol name='_ZN8tcmalloc6Static8sizemap_E' size='3936' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::pageheap_ -->
    <elf-symbol name='_ZN8tcmalloc6Static9pageheap_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Sampler::log_table_ -->
    <elf-symbol name='_ZN8tcmalloc7Sampler10log_table_E' size='8192' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_S_terminal -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep11_S_terminalE' size='1' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_S_empty_rep_storage -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep20_S_empty_rep_storageE' size='32' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for SysAllocator -->
    <elf-symbol name='_ZTI12SysAllocator' size='16' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for MallocExtension -->
    <elf-symbol name='_ZTI15MallocExtension' size='16' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for MmapSysAllocator -->
    <elf-symbol name='_ZTI16MmapSysAllocator' size='24' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for SbrkSysAllocator -->
    <elf-symbol name='_ZTI16SbrkSysAllocator' size='24' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for DevMemSysAllocator -->
    <elf-symbol name='_ZTI18DevMemSysAllocator' size='24' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for DefaultSysAllocator -->
    <elf-symbol name='_ZTI19DefaultSysAllocator' size='24' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for HugetlbSysAllocator -->
    <elf-symbol name='_ZTI19HugetlbSysAllocator' size='24' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for TCMallocImplementation -->
    <elf-symbol name='_ZTI22TCMallocImplementation' size='24' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for SysAllocator -->
    <elf-symbol name='_ZTS12SysAllocator' size='15' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for MallocExtension -->
    <elf-symbol name='_ZTS15MallocExtension' size='18' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for MmapSysAllocator -->
    <elf-symbol name='_ZTS16MmapSysAllocator' size='19' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for SbrkSysAllocator -->
    <elf-symbol name='_ZTS16SbrkSysAllocator' size='19' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for DevMemSysAllocator -->
    <elf-symbol name='_ZTS18DevMemSysAllocator' size='21' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for DefaultSysAllocator -->
    <elf-symbol name='_ZTS19DefaultSysAllocator' size='22' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for HugetlbSysAllocator -->
    <elf-symbol name='_ZTS19HugetlbSysAllocator' size='22' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for TCMallocImplementation -->
    <elf-symbol name='_ZTS22TCMallocImplementation' size='25' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for SysAllocator -->
    <elf-symbol name='_ZTV12SysAllocator' size='40' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for MallocExtension -->
    <elf-symbol name='_ZTV15MallocExtension' size='232' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for MmapSysAllocator -->
    <elf-symbol name='_ZTV16MmapSysAllocator' size='40' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for SbrkSysAllocator -->
    <elf-symbol name='_ZTV16SbrkSysAllocator' size='40' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for DevMemSysAllocator -->
    <elf-symbol name='_ZTV18DevMemSysAllocator' size='40' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for DefaultSysAllocator -->
    <elf-symbol name='_ZTV19DefaultSysAllocator' size='40' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for HugetlbSysAllocator -->
    <elf-symbol name='_ZTV19HugetlbSysAllocator' size='40' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for TCMallocImplementation -->
    <elf-symbol name='_ZTV22TCMallocImplementation' size='232' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*)::kPageHeapType -->
    <elf-symbol name='_ZZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EEE13kPageHeapType' size='8' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*)::kLargeSpanType -->
    <elf-symbol name='_ZZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EEE14kLargeSpanType' size='8' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*)::kThreadCacheType -->
    <elf-symbol name='_ZZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EEE16kThreadCacheType' size='8' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*)::kCentralCacheType -->
    <elf-symbol name='_ZZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EEE17kCentralCacheType' size='8' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*)::kTransferCacheType -->
    <elf-symbol name='_ZZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EEE18kTransferCacheType' size='8' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*)::kPageHeapUnmappedType -->
    <elf-symbol name='_ZZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EEE21kPageHeapUnmappedType' size='8' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*)::kLargeUnmappedSpanType -->
    <elf-symbol name='_ZZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EEE22kLargeUnmappedSpanType' size='8' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __free_hook -->
    <elf-symbol name='__free_hook' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __malloc_hook -->
    <elf-symbol name='__malloc_hook' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __memalign_hook -->
    <elf-symbol name='__memalign_hook' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __realloc_hook -->
    <elf-symbol name='__realloc_hook' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- heap_leak_checker_bcad_variable -->
    <elf-symbol name='heap_leak_checker_bcad_variable' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- sys_alloc -->
    <elf-symbol name='sys_alloc' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
  </elf-variable-symbols>
  <abi-instr address-size='64' path='src/base/atomicops-internals-x86.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/dynamic_annotations.c' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C89'>
    <!-- int RunningOnValgrind() -->
    <function-decl name='RunningOnValgrind' mangled-name='RunningOnValgrind' filepath='src/base/dynamic_annotations.c' line='152' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='RunningOnValgrind' hash='388da3fa973fde78'>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- double ValgrindSlowdown() -->
    <function-decl name='ValgrindSlowdown' mangled-name='ValgrindSlowdown' filepath='src/base/dynamic_annotations.c' line='166' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ValgrindSlowdown' hash='14e245f4052d89de'>
      <!-- double -->
      <return type-id='type-id-2'/>
    </function-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/elf_mem_image.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- struct Elf64_Ehdr -->
    <class-decl name='Elf64_Ehdr' is-struct='yes' visibility='default' size-in-bits='512' filepath='/usr/include/elf.h' line='88' column='1' hash='b8444b3606110e44' id='type-id-3'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- unsigned char Elf64_Ehdr::e_ident[16] -->
        <var-decl name='e_ident' type-id='type-id-4' visibility='default' filepath='/usr/include/elf.h' line='89' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- Elf64_Half Elf64_Ehdr::e_type -->
        <var-decl name='e_type' type-id='type-id-5' visibility='default' filepath='/usr/include/elf.h' line='90' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='144'>
        <!-- Elf64_Half Elf64_Ehdr::e_machine -->
        <var-decl name='e_machine' type-id='type-id-5' visibility='default' filepath='/usr/include/elf.h' line='91' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='160'>
        <!-- Elf64_Word Elf64_Ehdr::e_version -->
        <var-decl name='e_version' type-id='type-id-6' visibility='default' filepath='/usr/include/elf.h' line='92' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- Elf64_Addr Elf64_Ehdr::e_entry -->
        <var-decl name='e_entry' type-id='type-id-7' visibility='default' filepath='/usr/include/elf.h' line='93' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- Elf64_Off Elf64_Ehdr::e_phoff -->
        <var-decl name='e_phoff' type-id='type-id-8' visibility='default' filepath='/usr/include/elf.h' line='94' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='320'>
        <!-- Elf64_Off Elf64_Ehdr::e_shoff -->
        <var-decl name='e_shoff' type-id='type-id-8' visibility='default' filepath='/usr/include/elf.h' line='95' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='384'>
        <!-- Elf64_Word Elf64_Ehdr::e_flags -->
        <var-decl name='e_flags' type-id='type-id-6' visibility='default' filepath='/usr/include/elf.h' line='96' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='416'>
        <!-- Elf64_Half Elf64_Ehdr::e_ehsize -->
        <var-decl name='e_ehsize' type-id='type-id-5' visibility='default' filepath='/usr/include/elf.h' line='97' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='432'>
        <!-- Elf64_Half Elf64_Ehdr::e_phentsize -->
        <var-decl name='e_phentsize' type-id='type-id-5' visibility='default' filepath='/usr/include/elf.h' line='98' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='448'>
        <!-- Elf64_Half Elf64_Ehdr::e_phnum -->
        <var-decl name='e_phnum' type-id='type-id-5' visibility='default' filepath='/usr/include/elf.h' line='99' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='464'>
        <!-- Elf64_Half Elf64_Ehdr::e_shentsize -->
        <var-decl name='e_shentsize' type-id='type-id-5' visibility='default' filepath='/usr/include/elf.h' line='100' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='480'>
        <!-- Elf64_Half Elf64_Ehdr::e_shnum -->
        <var-decl name='e_shnum' type-id='type-id-5' visibility='default' filepath='/usr/include/elf.h' line='101' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='496'>
        <!-- Elf64_Half Elf64_Ehdr::e_shstrndx -->
        <var-decl name='e_shstrndx' type-id='type-id-5' visibility='default' filepath='/usr/include/elf.h' line='102' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct Elf64_Phdr -->
    <class-decl name='Elf64_Phdr' is-struct='yes' visibility='default' size-in-bits='448' filepath='/usr/include/elf.h' line='551' column='1' hash='4b4898b4e81729f5' id='type-id-9'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- Elf64_Word Elf64_Phdr::p_type -->
        <var-decl name='p_type' type-id='type-id-6' visibility='default' filepath='/usr/include/elf.h' line='552' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- Elf64_Word Elf64_Phdr::p_flags -->
        <var-decl name='p_flags' type-id='type-id-6' visibility='default' filepath='/usr/include/elf.h' line='553' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- Elf64_Off Elf64_Phdr::p_offset -->
        <var-decl name='p_offset' type-id='type-id-8' visibility='default' filepath='/usr/include/elf.h' line='554' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- Elf64_Addr Elf64_Phdr::p_vaddr -->
        <var-decl name='p_vaddr' type-id='type-id-7' visibility='default' filepath='/usr/include/elf.h' line='555' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- Elf64_Addr Elf64_Phdr::p_paddr -->
        <var-decl name='p_paddr' type-id='type-id-7' visibility='default' filepath='/usr/include/elf.h' line='556' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- Elf64_Xword Elf64_Phdr::p_filesz -->
        <var-decl name='p_filesz' type-id='type-id-10' visibility='default' filepath='/usr/include/elf.h' line='557' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='320'>
        <!-- Elf64_Xword Elf64_Phdr::p_memsz -->
        <var-decl name='p_memsz' type-id='type-id-10' visibility='default' filepath='/usr/include/elf.h' line='558' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='384'>
        <!-- Elf64_Xword Elf64_Phdr::p_align -->
        <var-decl name='p_align' type-id='type-id-10' visibility='default' filepath='/usr/include/elf.h' line='559' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct Elf64_Sym -->
    <class-decl name='Elf64_Sym' is-struct='yes' visibility='default' size-in-bits='192' filepath='/usr/include/elf.h' line='389' column='1' hash='59d1917446b00c8f' id='type-id-11'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- Elf64_Word Elf64_Sym::st_name -->
        <var-decl name='st_name' type-id='type-id-6' visibility='default' filepath='/usr/include/elf.h' line='390' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- unsigned char Elf64_Sym::st_info -->
        <var-decl name='st_info' type-id='type-id-12' visibility='default' filepath='/usr/include/elf.h' line='391' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='40'>
        <!-- unsigned char Elf64_Sym::st_other -->
        <var-decl name='st_other' type-id='type-id-12' visibility='default' filepath='/usr/include/elf.h' line='392' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='48'>
        <!-- Elf64_Section Elf64_Sym::st_shndx -->
        <var-decl name='st_shndx' type-id='type-id-13' visibility='default' filepath='/usr/include/elf.h' line='393' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- Elf64_Addr Elf64_Sym::st_value -->
        <var-decl name='st_value' type-id='type-id-7' visibility='default' filepath='/usr/include/elf.h' line='394' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- Elf64_Xword Elf64_Sym::st_size -->
        <var-decl name='st_size' type-id='type-id-10' visibility='default' filepath='/usr/include/elf.h' line='395' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct Elf64_Verdaux -->
    <class-decl name='Elf64_Verdaux' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/include/elf.h' line='849' column='1' hash='df0b1edc7130741e' id='type-id-14'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- Elf64_Word Elf64_Verdaux::vda_name -->
        <var-decl name='vda_name' type-id='type-id-6' visibility='default' filepath='/usr/include/elf.h' line='850' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- Elf64_Word Elf64_Verdaux::vda_next -->
        <var-decl name='vda_next' type-id='type-id-6' visibility='default' filepath='/usr/include/elf.h' line='851' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct Elf64_Verdef -->
    <class-decl name='Elf64_Verdef' is-struct='yes' visibility='default' size-in-bits='160' filepath='/usr/include/elf.h' line='812' column='1' hash='77561b1a99135bd1' id='type-id-15'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- Elf64_Half Elf64_Verdef::vd_version -->
        <var-decl name='vd_version' type-id='type-id-5' visibility='default' filepath='/usr/include/elf.h' line='813' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='16'>
        <!-- Elf64_Half Elf64_Verdef::vd_flags -->
        <var-decl name='vd_flags' type-id='type-id-5' visibility='default' filepath='/usr/include/elf.h' line='814' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- Elf64_Half Elf64_Verdef::vd_ndx -->
        <var-decl name='vd_ndx' type-id='type-id-5' visibility='default' filepath='/usr/include/elf.h' line='815' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='48'>
        <!-- Elf64_Half Elf64_Verdef::vd_cnt -->
        <var-decl name='vd_cnt' type-id='type-id-5' visibility='default' filepath='/usr/include/elf.h' line='816' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- Elf64_Word Elf64_Verdef::vd_hash -->
        <var-decl name='vd_hash' type-id='type-id-6' visibility='default' filepath='/usr/include/elf.h' line='817' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='96'>
        <!-- Elf64_Word Elf64_Verdef::vd_aux -->
        <var-decl name='vd_aux' type-id='type-id-6' visibility='default' filepath='/usr/include/elf.h' line='818' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- Elf64_Word Elf64_Verdef::vd_next -->
        <var-decl name='vd_next' type-id='type-id-6' visibility='default' filepath='/usr/include/elf.h' line='819' column='1'/>
      </data-member>
    </class-decl>
    <!-- typedef uint64_t Elf64_Addr -->
    <typedef-decl name='Elf64_Addr' type-id='type-id-16' size-in-bits='64' filepath='/usr/include/elf.h' line='50' column='1' hash='8fdc5eea2983a729' id='type-id-7'/>
    <!-- typedef uint16_t Elf64_Half -->
    <typedef-decl name='Elf64_Half' type-id='type-id-17' size-in-bits='16' filepath='/usr/include/elf.h' line='34' column='1' hash='d7723bb93a30b11d' id='type-id-5'/>
    <!-- typedef uint64_t Elf64_Off -->
    <typedef-decl name='Elf64_Off' type-id='type-id-16' size-in-bits='64' filepath='/usr/include/elf.h' line='54' column='1' hash='8fdc5eea2983a729' id='type-id-8'/>
    <!-- typedef uint16_t Elf64_Section -->
    <typedef-decl name='Elf64_Section' type-id='type-id-17' size-in-bits='16' filepath='/usr/include/elf.h' line='58' column='1' hash='d7723bb93a30b11d' id='type-id-13'/>
    <!-- typedef Elf64_Half Elf64_Versym -->
    <typedef-decl name='Elf64_Versym' type-id='type-id-5' size-in-bits='16' filepath='/usr/include/elf.h' line='62' column='1' hash='d7723bb93a30b11d' id='type-id-18'/>
    <!-- typedef uint32_t Elf64_Word -->
    <typedef-decl name='Elf64_Word' type-id='type-id-19' size-in-bits='32' filepath='/usr/include/elf.h' line='39' column='1' hash='e66b43f97c38e87a' id='type-id-6'/>
    <!-- typedef uint64_t Elf64_Xword -->
    <typedef-decl name='Elf64_Xword' type-id='type-id-16' size-in-bits='64' filepath='/usr/include/elf.h' line='45' column='1' hash='8fdc5eea2983a729' id='type-id-10'/>
    <!-- typedef unsigned short int uint16_t -->
    <typedef-decl name='uint16_t' type-id='type-id-20' size-in-bits='16' filepath='/usr/include/stdint.h' line='50' column='1' hash='d7723bb93a30b11d' id='type-id-17'/>
    <!-- unsigned char[16] -->
    <array-type-def dimensions='1' type-id='type-id-12' size-in-bits='128' hash='db96c40792853cfe' id='type-id-4'>
      <!-- <anonymous range>[16] -->
      <subrange length='16' lower-bound='0' upper-bound='15' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='6c35b1e999eba398' id='type-id-22'/>
    </array-type-def>
    <!-- base::ElfMemImage* -->
    <pointer-type-def type-id='type-id-23' size-in-bits='64' hash='1e56033bc929c937' id='type-id-24'/>
    <!-- base::ElfMemImage* const -->
    <qualified-type-def type-id='type-id-24' const='yes' hash='f1b7844269f07355' id='type-id-25'/>
    <!-- base::ElfMemImage::SymbolInfo* -->
    <pointer-type-def type-id='type-id-26' size-in-bits='64' hash='c661d6d612749156' id='type-id-27'/>
    <!-- base::ElfMemImage::SymbolIterator& -->
    <reference-type-def kind='lvalue' type-id='type-id-28' size-in-bits='64' hash='8b6e5057d6b5677d' id='type-id-29'/>
    <!-- base::ElfMemImage::SymbolIterator* -->
    <pointer-type-def type-id='type-id-28' size-in-bits='64' hash='635526182f95463f' id='type-id-30'/>
    <!-- base::ElfMemImage::SymbolIterator* const -->
    <qualified-type-def type-id='type-id-30' const='yes' hash='186b418ac290dd1e' id='type-id-31'/>
    <!-- const Elf64_Ehdr -->
    <qualified-type-def type-id='type-id-3' const='yes' hash='14748f303e55779d' id='type-id-32'/>
    <!-- const Elf64_Ehdr* -->
    <pointer-type-def type-id='type-id-32' size-in-bits='64' hash='59489a54900ba47f' id='type-id-33'/>
    <!-- const Elf64_Phdr -->
    <qualified-type-def type-id='type-id-9' const='yes' hash='51611f98abc3863c' id='type-id-34'/>
    <!-- const Elf64_Phdr* -->
    <pointer-type-def type-id='type-id-34' size-in-bits='64' hash='d7f46a025d7f7c6d' id='type-id-35'/>
    <!-- const Elf64_Sym -->
    <qualified-type-def type-id='type-id-11' const='yes' hash='f86c8f4238204abd' id='type-id-36'/>
    <!-- const Elf64_Sym* -->
    <pointer-type-def type-id='type-id-36' size-in-bits='64' hash='bb500a4acf88d8ae' id='type-id-37'/>
    <!-- const Elf64_Verdaux -->
    <qualified-type-def type-id='type-id-14' const='yes' hash='3122248828a85ad6' id='type-id-38'/>
    <!-- const Elf64_Verdaux* -->
    <pointer-type-def type-id='type-id-38' size-in-bits='64' hash='a8ce44e51dd263b5' id='type-id-39'/>
    <!-- const Elf64_Verdef -->
    <qualified-type-def type-id='type-id-15' const='yes' hash='9213bfaf32811abc' id='type-id-40'/>
    <!-- const Elf64_Verdef* -->
    <pointer-type-def type-id='type-id-40' size-in-bits='64' hash='0b792ee854dc0a3d' id='type-id-41'/>
    <!-- const Elf64_Versym -->
    <qualified-type-def type-id='type-id-18' const='yes' hash='6b03cd1b2e9f59d2' id='type-id-42'/>
    <!-- const Elf64_Versym* -->
    <pointer-type-def type-id='type-id-42' size-in-bits='64' hash='f7c6974d4513ad7a' id='type-id-43'/>
    <!-- const Elf64_Word -->
    <qualified-type-def type-id='type-id-6' const='yes' hash='c64c1cc1c357abd4' id='type-id-44'/>
    <!-- const Elf64_Word* -->
    <pointer-type-def type-id='type-id-44' size-in-bits='64' hash='dac049f837fbb92d' id='type-id-45'/>
    <!-- const base::ElfMemImage -->
    <qualified-type-def type-id='type-id-23' const='yes' hash='27cfb399ca2a9740' id='type-id-46'/>
    <!-- const base::ElfMemImage* -->
    <pointer-type-def type-id='type-id-46' size-in-bits='64' hash='289d86e4e6d3ba90' id='type-id-47'/>
    <!-- const base::ElfMemImage* const -->
    <qualified-type-def type-id='type-id-47' const='yes' hash='5f483868ab6482f6' id='type-id-48'/>
    <!-- const base::ElfMemImage::SymbolInfo -->
    <qualified-type-def type-id='type-id-26' const='yes' hash='582c37401cca44e8' id='type-id-49'/>
    <!-- const base::ElfMemImage::SymbolInfo& -->
    <reference-type-def kind='lvalue' type-id='type-id-49' size-in-bits='64' hash='2019f0f21fb97678' id='type-id-50'/>
    <!-- const base::ElfMemImage::SymbolInfo* -->
    <pointer-type-def type-id='type-id-49' size-in-bits='64' hash='5f8c35f8fe44aeea' id='type-id-51'/>
    <!-- const base::ElfMemImage::SymbolIterator -->
    <qualified-type-def type-id='type-id-28' const='yes' hash='6b9dbc64c2dabfef' id='type-id-52'/>
    <!-- const base::ElfMemImage::SymbolIterator& -->
    <reference-type-def kind='lvalue' type-id='type-id-52' size-in-bits='64' hash='0251d0dc239aaf4e' id='type-id-53'/>
    <!-- const base::ElfMemImage::SymbolIterator* -->
    <pointer-type-def type-id='type-id-52' size-in-bits='64' hash='4042f591ef3d8b00' id='type-id-54'/>
    <!-- const base::ElfMemImage::SymbolIterator* const -->
    <qualified-type-def type-id='type-id-54' const='yes' hash='37778b6ac0e06145' id='type-id-55'/>
    <!-- void* const -->
    <qualified-type-def type-id='type-id-56' const='yes' id='type-id-57'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- class base::ElfMemImage -->
      <class-decl name='ElfMemImage' visibility='default' size-in-bits='576' filepath='./src/base/elf_mem_image.h' line='56' column='1' hash='434e64cbebe51257#2' id='type-id-23'>
        <member-type access='private'>
          <!-- class base::ElfMemImage::SymbolIterator -->
          <class-decl name='SymbolIterator' visibility='default' size-in-bits='384' filepath='./src/base/elf_mem_image.h' line='73' column='1' hash='be3efe276e58a8dd' id='type-id-28'>
            <data-member access='private' layout-offset-in-bits='0'>
              <!-- base::ElfMemImage::SymbolInfo base::ElfMemImage::SymbolIterator::info_ -->
              <var-decl name='info_' type-id='type-id-26' visibility='default' filepath='./src/base/elf_mem_image.h' line='84' column='1'/>
            </data-member>
            <data-member access='private' layout-offset-in-bits='256'>
              <!-- int base::ElfMemImage::SymbolIterator::index_ -->
              <var-decl name='index_' type-id='type-id-1' visibility='default' filepath='./src/base/elf_mem_image.h' line='85' column='1'/>
            </data-member>
            <data-member access='private' layout-offset-in-bits='320'>
              <!-- void* const base::ElfMemImage::SymbolIterator::image_ -->
              <var-decl name='image_' type-id='type-id-57' visibility='default' filepath='./src/base/elf_mem_image.h' line='86' column='1'/>
            </data-member>
            <member-function access='private' constructor='yes'>
              <!-- base::ElfMemImage::SymbolIterator::SymbolIterator(void* const, int) -->
              <function-decl name='SymbolIterator' mangled-name='_ZN4base11ElfMemImage14SymbolIteratorC2EPKvi' filepath='src/base/elf_mem_image.cc' line='358' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11ElfMemImage14SymbolIteratorC2EPKvi' hash='388da3fa973fde78'>
                <!-- implicit parameter of type 'base::ElfMemImage::SymbolIterator*' -->
                <parameter type-id='type-id-30' is-artificial='yes'/>
                <!-- parameter of type 'void* const' -->
                <parameter type-id='type-id-57' filepath='src/base/elf_mem_image.cc' line='358' column='1'/>
                <!-- parameter of type 'int' -->
                <parameter type-id='type-id-1' filepath='src/base/elf_mem_image.cc' line='358' column='1'/>
                <!-- void -->
                <return type-id='type-id-58'/>
              </function-decl>
            </member-function>
            <member-function access='private'>
              <!-- const base::ElfMemImage::SymbolInfo* base::ElfMemImage::SymbolIterator::operator&#45;>() -->
              <function-decl name='operator-&gt;' mangled-name='_ZNK4base11ElfMemImage14SymbolIteratorptEv' filepath='src/base/elf_mem_image.cc' line='362' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage14SymbolIteratorptEv' hash='e9a84514e205fbc5'>
                <!-- implicit parameter of type 'const base::ElfMemImage::SymbolIterator*' -->
                <parameter type-id='type-id-54' is-artificial='yes'/>
                <!-- const base::ElfMemImage::SymbolInfo* -->
                <return type-id='type-id-51'/>
              </function-decl>
            </member-function>
            <member-function access='private'>
              <!-- const base::ElfMemImage::SymbolInfo& base::ElfMemImage::SymbolIterator::operator*() -->
              <function-decl name='operator*' mangled-name='_ZNK4base11ElfMemImage14SymbolIteratordeEv' filepath='src/base/elf_mem_image.cc' line='366' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage14SymbolIteratordeEv' hash='47bdb57ada052f30'>
                <!-- implicit parameter of type 'const base::ElfMemImage::SymbolIterator*' -->
                <parameter type-id='type-id-54' is-artificial='yes'/>
                <!-- const base::ElfMemImage::SymbolInfo& -->
                <return type-id='type-id-50'/>
              </function-decl>
            </member-function>
            <member-function access='private'>
              <!-- bool base::ElfMemImage::SymbolIterator::operator==(const base::ElfMemImage::SymbolIterator&) -->
              <function-decl name='operator==' mangled-name='_ZNK4base11ElfMemImage14SymbolIteratoreqERKS1_' filepath='src/base/elf_mem_image.cc' line='370' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage14SymbolIteratoreqERKS1_' hash='c1dcd64da70beccd'>
                <!-- implicit parameter of type 'const base::ElfMemImage::SymbolIterator*' -->
                <parameter type-id='type-id-54' is-artificial='yes'/>
                <!-- parameter of type 'const base::ElfMemImage::SymbolIterator&' -->
                <parameter type-id='type-id-53'/>
                <!-- bool -->
                <return type-id='type-id-59'/>
              </function-decl>
            </member-function>
            <member-function access='private'>
              <!-- bool base::ElfMemImage::SymbolIterator::operator!=(const base::ElfMemImage::SymbolIterator&) -->
              <function-decl name='operator!=' mangled-name='_ZNK4base11ElfMemImage14SymbolIteratorneERKS1_' filepath='src/base/elf_mem_image.cc' line='374' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage14SymbolIteratorneERKS1_' hash='c1dcd64da70beccd'>
                <!-- implicit parameter of type 'const base::ElfMemImage::SymbolIterator*' -->
                <parameter type-id='type-id-54' is-artificial='yes'/>
                <!-- parameter of type 'const base::ElfMemImage::SymbolIterator&' -->
                <parameter type-id='type-id-53'/>
                <!-- bool -->
                <return type-id='type-id-59'/>
              </function-decl>
            </member-function>
            <member-function access='private'>
              <!-- void base::ElfMemImage::SymbolIterator::Update(int) -->
              <function-decl name='Update' mangled-name='_ZN4base11ElfMemImage14SymbolIterator6UpdateEi' filepath='src/base/elf_mem_image.cc' line='393' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11ElfMemImage14SymbolIterator6UpdateEi' hash='388da3fa973fde78'>
                <!-- implicit parameter of type 'base::ElfMemImage::SymbolIterator*' -->
                <parameter type-id='type-id-30' is-artificial='yes'/>
                <!-- parameter of type 'int' -->
                <parameter type-id='type-id-1'/>
                <!-- void -->
                <return type-id='type-id-58'/>
              </function-decl>
            </member-function>
            <member-function access='private'>
              <!-- base::ElfMemImage::SymbolIterator& base::ElfMemImage::SymbolIterator::operator++() -->
              <function-decl name='operator++' mangled-name='_ZN4base11ElfMemImage14SymbolIteratorppEv' filepath='src/base/elf_mem_image.cc' line='378' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11ElfMemImage14SymbolIteratorppEv' hash='62b99d6f5f9ef80a'>
                <!-- implicit parameter of type 'base::ElfMemImage::SymbolIterator*' -->
                <parameter type-id='type-id-30' is-artificial='yes'/>
                <!-- base::ElfMemImage::SymbolIterator& -->
                <return type-id='type-id-29'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct base::ElfMemImage::SymbolInfo -->
          <class-decl name='SymbolInfo' is-struct='yes' visibility='default' size-in-bits='256' filepath='./src/base/elf_mem_image.h' line='64' column='1' hash='188c20ff50814f74' id='type-id-26'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- const char* base::ElfMemImage::SymbolInfo::name -->
              <var-decl name='name' type-id='type-id-60' visibility='default' filepath='./src/base/elf_mem_image.h' line='65' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- const char* base::ElfMemImage::SymbolInfo::version -->
              <var-decl name='version' type-id='type-id-60' visibility='default' filepath='./src/base/elf_mem_image.h' line='66' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- void* base::ElfMemImage::SymbolInfo::address -->
              <var-decl name='address' type-id='type-id-56' visibility='default' filepath='./src/base/elf_mem_image.h' line='68' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='192'>
              <!-- const Elf64_Sym* base::ElfMemImage::SymbolInfo::symbol -->
              <var-decl name='symbol' type-id='type-id-37' visibility='default' filepath='./src/base/elf_mem_image.h' line='69' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='public' static='yes'>
          <!-- static void* const base::ElfMemImage::kInvalidBase -->
          <var-decl name='kInvalidBase' type-id='type-id-57' mangled-name='_ZN4base11ElfMemImage12kInvalidBaseE' visibility='default' filepath='src/base/elf_mem_image.cc' line='111' column='1' elf-symbol-id='_ZN4base11ElfMemImage12kInvalidBaseE'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- const Elf64_Ehdr* base::ElfMemImage::ehdr_ -->
          <var-decl name='ehdr_' type-id='type-id-33' visibility='default' filepath='./src/base/elf_mem_image.h' line='120' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- const Elf64_Sym* base::ElfMemImage::dynsym_ -->
          <var-decl name='dynsym_' type-id='type-id-37' visibility='default' filepath='./src/base/elf_mem_image.h' line='121' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- const Elf64_Versym* base::ElfMemImage::versym_ -->
          <var-decl name='versym_' type-id='type-id-43' visibility='default' filepath='./src/base/elf_mem_image.h' line='122' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='192'>
          <!-- const Elf64_Verdef* base::ElfMemImage::verdef_ -->
          <var-decl name='verdef_' type-id='type-id-41' visibility='default' filepath='./src/base/elf_mem_image.h' line='123' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='256'>
          <!-- const Elf64_Word* base::ElfMemImage::hash_ -->
          <var-decl name='hash_' type-id='type-id-45' visibility='default' filepath='./src/base/elf_mem_image.h' line='124' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='320'>
          <!-- const char* base::ElfMemImage::dynstr_ -->
          <var-decl name='dynstr_' type-id='type-id-60' visibility='default' filepath='./src/base/elf_mem_image.h' line='125' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='384'>
          <!-- size_t base::ElfMemImage::strsize_ -->
          <var-decl name='strsize_' type-id='type-id-61' visibility='default' filepath='./src/base/elf_mem_image.h' line='126' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='448'>
          <!-- size_t base::ElfMemImage::verdefnum_ -->
          <var-decl name='verdefnum_' type-id='type-id-61' visibility='default' filepath='./src/base/elf_mem_image.h' line='127' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='512'>
          <!-- Elf64_Addr base::ElfMemImage::link_base_ -->
          <var-decl name='link_base_' type-id='type-id-7' visibility='default' filepath='./src/base/elf_mem_image.h' line='128' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- int base::ElfMemImage::GetNumSymbols() -->
          <function-decl name='GetNumSymbols' mangled-name='_ZNK4base11ElfMemImage13GetNumSymbolsEv' filepath='src/base/elf_mem_image.cc' line='119' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage13GetNumSymbolsEv' hash='388da3fa973fde78'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const Elf64_Verdaux* base::ElfMemImage::GetVerdefAux(const Elf64_Verdef*) -->
          <function-decl name='GetVerdefAux' mangled-name='_ZNK4base11ElfMemImage12GetVerdefAuxEPK12Elf64_Verdef' filepath='src/base/elf_mem_image.cc' line='172' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage12GetVerdefAuxEPK12Elf64_Verdef' hash='19f69f6f7c219776'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'const Elf64_Verdef*' -->
            <parameter type-id='type-id-41'/>
            <!-- const Elf64_Verdaux* -->
            <return type-id='type-id-39'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- base::ElfMemImage::SymbolIterator base::ElfMemImage::end() -->
          <function-decl name='end' mangled-name='_ZNK4base11ElfMemImage3endEv' filepath='src/base/elf_mem_image.cc' line='389' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage3endEv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- class base::ElfMemImage::SymbolIterator -->
            <return type-id='type-id-28'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const char* base::ElfMemImage::GetVerstr(Elf64_Word) -->
          <function-decl name='GetVerstr' mangled-name='_ZNK4base11ElfMemImage9GetVerstrEj' filepath='src/base/elf_mem_image.cc' line='177' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage9GetVerstrEj' hash='cf5212e813271279'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'typedef Elf64_Word' -->
            <parameter type-id='type-id-6'/>
            <!-- const char* -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const Elf64_Verdef* base::ElfMemImage::GetVerdef(int) -->
          <function-decl name='GetVerdef' mangled-name='_ZNK4base11ElfMemImage9GetVerdefEi' filepath='src/base/elf_mem_image.cc' line='159' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage9GetVerdefEi' hash='c6a2702b6944e5b2'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- const Elf64_Verdef* -->
            <return type-id='type-id-41'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void* base::ElfMemImage::GetSymAddr(const Elf64_Sym*) -->
          <function-decl name='GetSymAddr' mangled-name='_ZNK4base11ElfMemImage10GetSymAddrEPK9Elf64_Sym' filepath='src/base/elf_mem_image.cc' line='150' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage10GetSymAddrEPK9Elf64_Sym' hash='2685c9e30f0e9c0a'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'const Elf64_Sym*' -->
            <parameter type-id='type-id-37'/>
            <!-- void* -->
            <return type-id='type-id-56'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const char* base::ElfMemImage::GetDynstr(Elf64_Word) -->
          <function-decl name='GetDynstr' mangled-name='_ZNK4base11ElfMemImage9GetDynstrEj' filepath='src/base/elf_mem_image.cc' line='145' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage9GetDynstrEj' hash='cf5212e813271279'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'typedef Elf64_Word' -->
            <parameter type-id='type-id-6'/>
            <!-- const char* -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const Elf64_Phdr* base::ElfMemImage::GetPhdr(int) -->
          <function-decl name='GetPhdr' mangled-name='_ZNK4base11ElfMemImage7GetPhdrEi' filepath='src/base/elf_mem_image.cc' line='137' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage7GetPhdrEi' hash='347de63754287c77'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- const Elf64_Phdr* -->
            <return type-id='type-id-35'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void base::ElfMemImage::Init(void*) -->
          <function-decl name='Init' mangled-name='_ZN4base11ElfMemImage4InitEPKv' filepath='src/base/elf_mem_image.cc' line='182' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11ElfMemImage4InitEPKv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'base::ElfMemImage*' -->
            <parameter type-id='type-id-24' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- base::ElfMemImage::ElfMemImage(void*) -->
          <function-decl name='ElfMemImage' mangled-name='_ZN4base11ElfMemImageC1EPKv' filepath='src/base/elf_mem_image.cc' line='114' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11ElfMemImageC1EPKv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'base::ElfMemImage*' -->
            <parameter type-id='type-id-24' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const Elf64_Versym* base::ElfMemImage::GetVersym(int) -->
          <function-decl name='GetVersym' mangled-name='_ZNK4base11ElfMemImage9GetVersymEi' filepath='src/base/elf_mem_image.cc' line='132' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage9GetVersymEi' hash='ad58fd7867afcd7f'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- const Elf64_Versym* -->
            <return type-id='type-id-43'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const Elf64_Sym* base::ElfMemImage::GetDynsym(int) -->
          <function-decl name='GetDynsym' mangled-name='_ZNK4base11ElfMemImage9GetDynsymEi' filepath='src/base/elf_mem_image.cc' line='127' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage9GetDynsymEi' hash='3f9d161fff24d853'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- const Elf64_Sym* -->
            <return type-id='type-id-37'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- base::ElfMemImage::SymbolIterator base::ElfMemImage::begin() -->
          <function-decl name='begin' mangled-name='_ZNK4base11ElfMemImage5beginEv' filepath='src/base/elf_mem_image.cc' line='383' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage5beginEv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- class base::ElfMemImage::SymbolIterator -->
            <return type-id='type-id-28'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool base::ElfMemImage::LookupSymbolByAddress(void*, base::ElfMemImage::SymbolInfo*) -->
          <function-decl name='LookupSymbolByAddress' mangled-name='_ZNK4base11ElfMemImage21LookupSymbolByAddressEPKvPNS0_10SymbolInfoE' filepath='src/base/elf_mem_image.cc' line='332' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage21LookupSymbolByAddressEPKvPNS0_10SymbolInfoE' hash='b897a0ddbd63cce5'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- parameter of type 'base::ElfMemImage::SymbolInfo*' -->
            <parameter type-id='type-id-27'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool base::ElfMemImage::LookupSymbol(const char*, const char*, int, base::ElfMemImage::SymbolInfo*) -->
          <function-decl name='LookupSymbol' mangled-name='_ZNK4base11ElfMemImage12LookupSymbolEPKcS2_iPNS0_10SymbolInfoE' filepath='src/base/elf_mem_image.cc' line='316' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage12LookupSymbolEPKcS2_iPNS0_10SymbolInfoE' hash='d055b32b0e2d828c'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-60'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-60'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- parameter of type 'base::ElfMemImage::SymbolInfo*' -->
            <parameter type-id='type-id-27'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- base::ElfMemImage::SymbolIterator (base::ElfMemImage::*) () -->
    <function-type method-class-id='type-id-23' const='yes' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-62'>
      <!-- implicit parameter of type 'const base::ElfMemImage*' -->
      <parameter type-id='type-id-47' is-artificial='yes'/>
      <!-- class base::ElfMemImage::SymbolIterator -->
      <return type-id='type-id-28'/>
    </function-type>
    <!-- bool (base::ElfMemImage::*) (const char*, const char*, int, base::ElfMemImage::SymbolInfo*) -->
    <function-type method-class-id='type-id-23' const='yes' size-in-bits='64' hash='d055b32b0e2d828c' id='type-id-63'>
      <!-- implicit parameter of type 'const base::ElfMemImage*' -->
      <parameter type-id='type-id-47' is-artificial='yes'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'base::ElfMemImage::SymbolInfo*' -->
      <parameter type-id='type-id-27'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- bool (base::ElfMemImage::*) (void*, base::ElfMemImage::SymbolInfo*) -->
    <function-type method-class-id='type-id-23' const='yes' size-in-bits='64' hash='b897a0ddbd63cce5' id='type-id-64'>
      <!-- implicit parameter of type 'const base::ElfMemImage*' -->
      <parameter type-id='type-id-47' is-artificial='yes'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'base::ElfMemImage::SymbolInfo*' -->
      <parameter type-id='type-id-27'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- const Elf64_Phdr* (base::ElfMemImage::*) (int) -->
    <function-type method-class-id='type-id-23' const='yes' size-in-bits='64' hash='347de63754287c77' id='type-id-65'>
      <!-- implicit parameter of type 'const base::ElfMemImage*' -->
      <parameter type-id='type-id-47' is-artificial='yes'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- const Elf64_Phdr* -->
      <return type-id='type-id-35'/>
    </function-type>
    <!-- const Elf64_Sym* (base::ElfMemImage::*) (int) -->
    <function-type method-class-id='type-id-23' const='yes' size-in-bits='64' hash='3f9d161fff24d853' id='type-id-66'>
      <!-- implicit parameter of type 'const base::ElfMemImage*' -->
      <parameter type-id='type-id-47' is-artificial='yes'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- const Elf64_Sym* -->
      <return type-id='type-id-37'/>
    </function-type>
    <!-- const Elf64_Verdaux* (base::ElfMemImage::*) (const Elf64_Verdef*) -->
    <function-type method-class-id='type-id-23' const='yes' size-in-bits='64' hash='19f69f6f7c219776' id='type-id-67'>
      <!-- implicit parameter of type 'const base::ElfMemImage*' -->
      <parameter type-id='type-id-47' is-artificial='yes'/>
      <!-- parameter of type 'const Elf64_Verdef*' -->
      <parameter type-id='type-id-41'/>
      <!-- const Elf64_Verdaux* -->
      <return type-id='type-id-39'/>
    </function-type>
    <!-- const Elf64_Verdef* (base::ElfMemImage::*) (int) -->
    <function-type method-class-id='type-id-23' const='yes' size-in-bits='64' hash='c6a2702b6944e5b2' id='type-id-68'>
      <!-- implicit parameter of type 'const base::ElfMemImage*' -->
      <parameter type-id='type-id-47' is-artificial='yes'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- const Elf64_Verdef* -->
      <return type-id='type-id-41'/>
    </function-type>
    <!-- const Elf64_Versym* (base::ElfMemImage::*) (int) -->
    <function-type method-class-id='type-id-23' const='yes' size-in-bits='64' hash='ad58fd7867afcd7f' id='type-id-69'>
      <!-- implicit parameter of type 'const base::ElfMemImage*' -->
      <parameter type-id='type-id-47' is-artificial='yes'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- const Elf64_Versym* -->
      <return type-id='type-id-43'/>
    </function-type>
    <!-- const char* (base::ElfMemImage::*) (Elf64_Word) -->
    <function-type method-class-id='type-id-23' const='yes' size-in-bits='64' hash='cf5212e813271279' id='type-id-70'>
      <!-- implicit parameter of type 'const base::ElfMemImage*' -->
      <parameter type-id='type-id-47' is-artificial='yes'/>
      <!-- parameter of type 'typedef Elf64_Word' -->
      <parameter type-id='type-id-6'/>
      <!-- const char* -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- int (base::ElfMemImage::*) () -->
    <function-type method-class-id='type-id-23' const='yes' size-in-bits='64' hash='388da3fa973fde78' id='type-id-71'>
      <!-- implicit parameter of type 'const base::ElfMemImage*' -->
      <parameter type-id='type-id-47' is-artificial='yes'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- void (base::ElfMemImage::*) (void*) -->
    <function-type method-class-id='type-id-23' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-72'>
      <!-- implicit parameter of type 'base::ElfMemImage*' -->
      <parameter type-id='type-id-24' is-artificial='yes'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void* (base::ElfMemImage::*) (const Elf64_Sym*) -->
    <function-type method-class-id='type-id-23' const='yes' size-in-bits='64' hash='2685c9e30f0e9c0a' id='type-id-73'>
      <!-- implicit parameter of type 'const base::ElfMemImage*' -->
      <parameter type-id='type-id-47' is-artificial='yes'/>
      <!-- parameter of type 'const Elf64_Sym*' -->
      <parameter type-id='type-id-37'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/linuxthreads.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- typedef int (*)(void*, int, pid_t*, typedef __va_list_tag __va_list_tag*) ListAllProcessThreadsCallBack -->
    <typedef-decl name='ListAllProcessThreadsCallBack' type-id='type-id-74' size-in-bits='64' filepath='./src/base/thread_lister.h' line='48' column='1' hash='fd7a63c0c6c822c4' id='type-id-75'/>
    <!-- typedef int __pid_t -->
    <typedef-decl name='__pid_t' type-id='type-id-1' size-in-bits='32' filepath='/usr/include/bits/types.h' line='143' column='1' hash='09d17c08f594edc7' id='type-id-76'/>
    <!-- typedef __pid_t pid_t -->
    <typedef-decl name='pid_t' type-id='type-id-76' size-in-bits='32' filepath='/usr/include/sched.h' line='37' column='1' hash='09d17c08f594edc7' id='type-id-77'/>
    <!-- int (*)(void*, int, pid_t*, typedef __va_list_tag __va_list_tag*) -->
    <pointer-type-def type-id='type-id-78' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-74'/>
    <!-- pid_t* -->
    <pointer-type-def type-id='type-id-77' size-in-bits='64' hash='7e9a76962b5dc492' id='type-id-79'/>
    <!-- int TCMalloc_ListAllProcessThreads(void*, ListAllProcessThreadsCallBack, ...) -->
    <function-decl name='TCMalloc_ListAllProcessThreads' mangled-name='TCMalloc_ListAllProcessThreads' filepath='src/base/linuxthreads.cc' line='551' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='TCMalloc_ListAllProcessThreads' hash='a7f99494147764a8'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/base/linuxthreads.cc' line='551' column='1'/>
      <!-- parameter of type 'typedef ListAllProcessThreadsCallBack' -->
      <parameter type-id='type-id-75' filepath='src/base/linuxthreads.cc' line='552' column='1'/>
      <parameter is-variadic='yes'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int TCMalloc_ResumeAllProcessThreads(int, pid_t*) -->
    <function-decl name='TCMalloc_ResumeAllProcessThreads' mangled-name='TCMalloc_ResumeAllProcessThreads' filepath='src/base/linuxthreads.cc' line='696' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='TCMalloc_ResumeAllProcessThreads' hash='44a39430792b90b1'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/base/linuxthreads.cc' line='696' column='1'/>
      <!-- parameter of type 'pid_t*' -->
      <parameter type-id='type-id-79' filepath='src/base/linuxthreads.cc' line='696' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int (void*, int, pid_t*, typedef __va_list_tag __va_list_tag*) -->
    <function-type size-in-bits='64' hash='60f7fa789d54ab1c' id='type-id-78'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'pid_t*' -->
      <parameter type-id='type-id-79'/>
      <!-- parameter of type 'typedef __va_list_tag __va_list_tag*' -->
      <parameter type-id='type-id-80'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/logging.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead'>
      <!-- int32 FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_verbose -->
      <var-decl name='FLAGS_verbose' type-id='type-id-81' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead13FLAGS_verboseE' visibility='default' filepath='src/base/logging.cc' line='38' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead13FLAGS_verboseE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noverbose -->
      <var-decl name='FLAGS_noverbose' type-id='type-id-82' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead15FLAGS_noverboseE' visibility='default' filepath='src/base/logging.cc' line='40' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead15FLAGS_noverboseE'/>
    </namespace-decl>
    <!-- RawFD RawOpenForWriting(const char*) -->
    <function-decl name='RawOpenForWriting' mangled-name='_Z17RawOpenForWritingPKc' filepath='src/base/logging.cc' line='90' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z17RawOpenForWritingPKc' hash='e9ea91a7eab8302c'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60' filepath='src/base/logging.cc' line='90' column='1'/>
      <!-- typedef RawFD -->
      <return type-id='type-id-83'/>
    </function-decl>
    <!-- void RawWrite(RawFD, const char*, size_t) -->
    <function-decl name='RawWrite' mangled-name='_Z8RawWriteiPKcm' filepath='src/base/logging.cc' line='94' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z8RawWriteiPKcm' hash='e1f9b6b88b6e9119'>
      <!-- parameter of type 'typedef RawFD' -->
      <parameter type-id='type-id-83' filepath='src/base/logging.cc' line='94' column='1'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60' filepath='src/base/logging.cc' line='94' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/base/logging.cc' line='94' column='1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void RawClose(RawFD) -->
    <function-decl name='RawClose' mangled-name='_Z8RawClosei' filepath='src/base/logging.cc' line='104' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z8RawClosei' hash='388da3fa973fde78'>
      <!-- parameter of type 'typedef RawFD' -->
      <parameter type-id='type-id-83' filepath='src/base/logging.cc' line='104' column='1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/low_level_alloc.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- low_level_alloc_internal::AllocList*[30] -->
    <array-type-def dimensions='1' type-id='type-id-84' size-in-bits='1920' hash='cb2d83dd86b161f3' id='type-id-85'>
      <!-- <anonymous range>[30] -->
      <subrange length='30' lower-bound='0' upper-bound='29' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='cbb4475e64ad0d01' id='type-id-86'/>
    </array-type-def>
    <!-- LowLevelAlloc::Arena* const -->
    <qualified-type-def type-id='type-id-87' const='yes' hash='df5c356d651669e3' id='type-id-88'/>
    <!-- low_level_alloc_internal::AllocList* -->
    <pointer-type-def type-id='type-id-89' size-in-bits='64' hash='a5d279e9377417e1' id='type-id-84'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- namespace base::subtle -->
      <namespace-decl name='subtle'>
        <!-- typedef int64_t base::subtle::Atomic64 -->
        <typedef-decl name='Atomic64' type-id='type-id-90' size-in-bits='64' filepath='./src/base/atomicops-internals-x86.h' line='70' column='1' hash='b119fe0931d2ee10' id='type-id-91'/>
      </namespace-decl>
      <!-- enum base::LinkerInitialized -->
      <enum-decl name='LinkerInitialized' size-in-bits='32' alignment-in-bits='32' filepath='./src/base/basictypes.h' line='381' column='1' hash='104662f2c242e63e' id='type-id-92'>
        <underlying-type type-id='type-id-93'/>
        <enumerator name='LINKER_INITIALIZED' value='0'/>
      </enum-decl>
      <!-- namespace base::internal -->
      <namespace-decl name='internal'>
        <!-- struct base::internal::HookList<void (*)(const void*)> -->
        <class-decl name='HookList&lt;void (*)(const void*)&gt;' is-struct='yes' visibility='default' hash='799b4a13de4db312' id='type-id-94'/>
        <!-- struct base::internal::HookList<void (*)(const void*, size_t)> -->
        <class-decl name='HookList&lt;void (*)(const void*, size_t)&gt;' is-struct='yes' visibility='default' hash='83f25c96216ff315' id='type-id-95'>
          <member-function access='public'>
            <!-- void (*)(void*, size_t) base::internal::HookList<void (*)(const void*, size_t)>::GetSingular() -->
            <function-decl name='GetSingular' mangled-name='_ZNK4base8internal8HookListIPFvPKvmEE11GetSingularEv' filepath='src/malloc_hook-inl.h' line='85' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base8internal8HookListIPFvPKvmEE11GetSingularEv' hash='5695f5ce05a4c55f'>
              <!-- implicit parameter of type 'const base::internal::HookList<void (*)(const void*, size_t)>*' -->
              <parameter type-id='type-id-96' is-artificial='yes'/>
              <!-- void (*)(void*, size_t) -->
              <return type-id='type-id-97'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- bool base::internal::HookList<void (*)(const void*, size_t)>::empty() -->
            <function-decl name='empty' mangled-name='_ZNK4base8internal8HookListIPFvPKvmEE5emptyEv' filepath='src/malloc_hook-inl.h' line='80' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base8internal8HookListIPFvPKvmEE5emptyEv' hash='c7c710e908194b91'>
              <!-- implicit parameter of type 'const base::internal::HookList<void (*)(const void*, size_t)>*' -->
              <parameter type-id='type-id-96' is-artificial='yes'/>
              <!-- bool -->
              <return type-id='type-id-59'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- void base::internal::HookList<void (*)(const void*, size_t)>::FixupPrivEndLocked() -->
            <function-decl name='FixupPrivEndLocked' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE18FixupPrivEndLockedEv' filepath='src/malloc_hook-inl.h' line='67' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE18FixupPrivEndLockedEv' hash='7f32ffea222edbe7'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>*' -->
              <parameter type-id='type-id-98' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-58'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- int base::internal::HookList<void (*)(const void*, size_t)>::Traverse(void (*)(void*, size_t)*, int) -->
            <function-decl name='Traverse' mangled-name='_ZNK4base8internal8HookListIPFvPKvmEE8TraverseEPS5_i' filepath='src/malloc_hook-inl.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base8internal8HookListIPFvPKvmEE8TraverseEPS5_i' hash='22c907d6003d7682'>
              <!-- implicit parameter of type 'const base::internal::HookList<void (*)(const void*, size_t)>*' -->
              <parameter type-id='type-id-96' is-artificial='yes'/>
              <!-- parameter of type 'void (*)(void*, size_t)*' -->
              <parameter type-id='type-id-99'/>
              <!-- parameter of type 'int' -->
              <parameter type-id='type-id-1'/>
              <!-- int -->
              <return type-id='type-id-1'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- void (*)(void*, size_t) base::internal::HookList<void (*)(const void*, size_t)>::ExchangeSingular(void (*)(void*, size_t)) -->
            <function-decl name='ExchangeSingular' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE16ExchangeSingularES5_' filepath='src/malloc_hook-inl.h' line='90' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE16ExchangeSingularES5_' hash='e7946129631a25a2'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>*' -->
              <parameter type-id='type-id-98' is-artificial='yes'/>
              <!-- parameter of type 'void (*)(void*, size_t)' -->
              <parameter type-id='type-id-97' filepath='src/malloc_hook-inl.h' line='90' column='1'/>
              <!-- void (*)(void*, size_t) -->
              <return type-id='type-id-97'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- bool base::internal::HookList<void (*)(const void*, size_t)>::Remove(void (*)(void*, size_t)) -->
            <function-decl name='Remove' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE6RemoveES5_' filepath='src/malloc_hook-inl.h' line='72' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE6RemoveES5_' hash='e698fbedb78e4cd2'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>*' -->
              <parameter type-id='type-id-98' is-artificial='yes'/>
              <!-- parameter of type 'void (*)(void*, size_t)' -->
              <parameter type-id='type-id-97' filepath='src/malloc_hook-inl.h' line='72' column='1'/>
              <!-- bool -->
              <return type-id='type-id-59'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- bool base::internal::HookList<void (*)(const void*, size_t)>::Add(void (*)(void*, size_t)) -->
            <function-decl name='Add' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE3AddES5_' filepath='src/malloc_hook-inl.h' line='65' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE3AddES5_' hash='e698fbedb78e4cd2'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>*' -->
              <parameter type-id='type-id-98' is-artificial='yes'/>
              <!-- parameter of type 'void (*)(void*, size_t)' -->
              <parameter type-id='type-id-97' filepath='src/malloc_hook-inl.h' line='72' column='1'/>
              <!-- bool -->
              <return type-id='type-id-59'/>
            </function-decl>
          </member-function>
        </class-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- namespace low_level_alloc_internal -->
    <namespace-decl name='low_level_alloc_internal'>
      <!-- struct low_level_alloc_internal::AllocList -->
      <class-decl name='AllocList' is-struct='yes' visibility='default' size-in-bits='2240' filepath='src/base/low_level_alloc.cc' line='67' column='1' hash='9b4ed3506ee18546' id='type-id-89'>
        <member-type access='public'>
          <!-- struct low_level_alloc_internal::AllocList::Header -->
          <class-decl name='Header' is-struct='yes' visibility='default' size-in-bits='256' filepath='src/base/low_level_alloc.cc' line='68' column='1' hash='637c890e478d839a' id='type-id-100'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- intptr_t low_level_alloc_internal::AllocList::Header::size -->
              <var-decl name='size' type-id='type-id-101' visibility='default' filepath='src/base/low_level_alloc.cc' line='69' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- intptr_t low_level_alloc_internal::AllocList::Header::magic -->
              <var-decl name='magic' type-id='type-id-101' visibility='default' filepath='src/base/low_level_alloc.cc' line='71' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- LowLevelAlloc::Arena* low_level_alloc_internal::AllocList::Header::arena -->
              <var-decl name='arena' type-id='type-id-87' visibility='default' filepath='src/base/low_level_alloc.cc' line='72' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='192'>
              <!-- void* low_level_alloc_internal::AllocList::Header::dummy_for_alignment -->
              <var-decl name='dummy_for_alignment' type-id='type-id-56' visibility='default' filepath='src/base/low_level_alloc.cc' line='73' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- low_level_alloc_internal::AllocList::Header low_level_alloc_internal::AllocList::header -->
          <var-decl name='header' type-id='type-id-100' visibility='default' filepath='src/base/low_level_alloc.cc' line='74' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='256'>
          <!-- int low_level_alloc_internal::AllocList::levels -->
          <var-decl name='levels' type-id='type-id-1' visibility='default' filepath='src/base/low_level_alloc.cc' line='78' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='320'>
          <!-- low_level_alloc_internal::AllocList* low_level_alloc_internal::AllocList::next[30] -->
          <var-decl name='next' type-id='type-id-85' visibility='default' filepath='src/base/low_level_alloc.cc' line='79' column='1'/>
        </data-member>
      </class-decl>
    </namespace-decl>
    <!-- Atomic32 (SpinLock::*) (int64, Atomic32*) -->
    <function-type method-class-id='type-id-102' size-in-bits='64' hash='745054de67770bc9' id='type-id-103'>
      <!-- implicit parameter of type 'SpinLock*' -->
      <parameter type-id='type-id-104' is-artificial='yes'/>
      <!-- parameter of type 'typedef int64' -->
      <parameter type-id='type-id-105'/>
      <!-- parameter of type 'Atomic32*' -->
      <parameter type-id='type-id-106'/>
      <!-- typedef Atomic32 -->
      <return type-id='type-id-107'/>
    </function-type>
    <!-- bool (base::internal::HookList<void (*)(const void*, size_t)>::*) () -->
    <function-type method-class-id='type-id-108' const='yes' size-in-bits='64' hash='c7c710e908194b91' id='type-id-109'>
      <!-- implicit parameter of type 'const base::internal::HookList<void (*)(const void*, size_t)>*' -->
      <parameter type-id='type-id-96' is-artificial='yes'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- bool (base::internal::HookList<void (*)(const void*, size_t)>::*) (void (*)(void*, size_t)) -->
    <function-type method-class-id='type-id-95' size-in-bits='64' hash='e698fbedb78e4cd2' id='type-id-110'>
      <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>*' -->
      <parameter type-id='type-id-98' is-artificial='yes'/>
      <!-- parameter of type 'void (*)(void*, size_t)' -->
      <parameter type-id='type-id-97' filepath='src/malloc_hook-inl.h' line='72' column='1'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- int (base::internal::HookList<void (*)(const void*, size_t)>::*) (void (*)(void*, size_t)*, int) -->
    <function-type method-class-id='type-id-108' const='yes' size-in-bits='64' hash='22c907d6003d7682' id='type-id-111'>
      <!-- implicit parameter of type 'const base::internal::HookList<void (*)(const void*, size_t)>*' -->
      <parameter type-id='type-id-96' is-artificial='yes'/>
      <!-- parameter of type 'void (*)(void*, size_t)*' -->
      <parameter type-id='type-id-99'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- void (*)(void*, size_t) (base::internal::HookList<void (*)(const void*, size_t)>::*) () -->
    <function-type method-class-id='type-id-108' const='yes' size-in-bits='64' hash='5695f5ce05a4c55f' id='type-id-112'>
      <!-- implicit parameter of type 'const base::internal::HookList<void (*)(const void*, size_t)>*' -->
      <parameter type-id='type-id-96' is-artificial='yes'/>
      <!-- void (*)(void*, size_t) -->
      <return type-id='type-id-97'/>
    </function-type>
    <!-- void (*)(void*, size_t) (base::internal::HookList<void (*)(const void*, size_t)>::*) (void (*)(void*, size_t)) -->
    <function-type method-class-id='type-id-95' size-in-bits='64' hash='e7946129631a25a2' id='type-id-113'>
      <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>*' -->
      <parameter type-id='type-id-98' is-artificial='yes'/>
      <!-- parameter of type 'void (*)(void*, size_t)' -->
      <parameter type-id='type-id-97' filepath='src/malloc_hook-inl.h' line='90' column='1'/>
      <!-- void (*)(void*, size_t) -->
      <return type-id='type-id-97'/>
    </function-type>
    <!-- void (SpinLock::*) () -->
    <function-type method-class-id='type-id-102' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-114'>
      <!-- implicit parameter of type 'SpinLock*' -->
      <parameter type-id='type-id-104' is-artificial='yes'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (SpinLock::*) (uint64) -->
    <function-type method-class-id='type-id-102' size-in-bits='64' hash='e0055d99adb0e173' id='type-id-115'>
      <!-- implicit parameter of type 'SpinLock*' -->
      <parameter type-id='type-id-104' is-artificial='yes'/>
      <!-- parameter of type 'typedef uint64' -->
      <parameter type-id='type-id-116'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (base::internal::HookList<void (*)(const void*, size_t)>::*) () -->
    <function-type method-class-id='type-id-95' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-117'>
      <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>*' -->
      <parameter type-id='type-id-98' is-artificial='yes'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/spinlock.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- struct CycleClock -->
    <class-decl name='CycleClock' is-struct='yes' visibility='default' size-in-bits='8' filepath='./src/base/cycleclock.h' line='79' column='1' hash='8e658f9e8bd44126' id='type-id-118'/>
    <!-- const base::LinkerInitialized -->
    <qualified-type-def type-id='type-id-92' const='yes' hash='e16a423e37712bec' id='type-id-119'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- void base::SubmitSpinLockProfileData(void*, int64) -->
      <function-decl name='SubmitSpinLockProfileData' mangled-name='_ZN4base25SubmitSpinLockProfileDataEPKvl' filepath='./src/base/synchronization_profiling.h' line='48' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base25SubmitSpinLockProfileDataEPKvl' hash='52c0efb08d2aa513'>
        <!-- parameter of type 'void*' -->
        <parameter type-id='type-id-56'/>
        <!-- parameter of type 'typedef int64' -->
        <parameter type-id='type-id-105'/>
        <!-- void -->
        <return type-id='type-id-58'/>
      </function-decl>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/spinlock_internal.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- const base::internal::SpinLockWaitTransition -->
    <qualified-type-def type-id='type-id-120' const='yes' hash='b69aa0c6c66bee67' id='type-id-121'/>
    <!-- const base::internal::SpinLockWaitTransition* -->
    <pointer-type-def type-id='type-id-121' size-in-bits='64' hash='90bbe97f9072e445' id='type-id-122'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- namespace base::subtle -->
      <namespace-decl name='subtle'>
      </namespace-decl>
      <!-- namespace base::internal -->
      <namespace-decl name='internal'>
        <!-- struct base::internal::SpinLockWaitTransition -->
        <class-decl name='SpinLockWaitTransition' is-struct='yes' visibility='default' size-in-bits='96' filepath='./src/base/spinlock_internal.h' line='48' column='1' hash='0f439893da072f3f' id='type-id-120'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- int32 base::internal::SpinLockWaitTransition::from -->
            <var-decl name='from' type-id='type-id-81' visibility='default' filepath='./src/base/spinlock_internal.h' line='49' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='32'>
            <!-- int32 base::internal::SpinLockWaitTransition::to -->
            <var-decl name='to' type-id='type-id-81' visibility='default' filepath='./src/base/spinlock_internal.h' line='50' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- bool base::internal::SpinLockWaitTransition::done -->
            <var-decl name='done' type-id='type-id-59' visibility='default' filepath='./src/base/spinlock_internal.h' line='51' column='1'/>
          </data-member>
        </class-decl>
        <!-- void base::internal::SpinLockDelay(volatile Atomic32*, int32, int) -->
        <function-decl name='SpinLockDelay' mangled-name='_ZN4base8internal13SpinLockDelayEPViii' filepath='./src/base/spinlock_linux-inl.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal13SpinLockDelayEPViii' hash='86a51dc692bbcbe6'>
          <!-- parameter of type 'volatile Atomic32*' -->
          <parameter type-id='type-id-123'/>
          <!-- parameter of type 'typedef int32' -->
          <parameter type-id='type-id-81'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
        <!-- void base::internal::SpinLockWake(volatile Atomic32*, bool) -->
        <function-decl name='SpinLockWake' mangled-name='_ZN4base8internal12SpinLockWakeEPVib' filepath='./src/base/spinlock_linux-inl.h' line='96' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal12SpinLockWakeEPVib' hash='768c83cd3690d2a7'>
          <!-- parameter of type 'volatile Atomic32*' -->
          <parameter type-id='type-id-123'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-59'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
        <!-- int32 base::internal::SpinLockWait(volatile Atomic32*, int, const base::internal::SpinLockWaitTransition*) -->
        <function-decl name='SpinLockWait' mangled-name='_ZN4base8internal12SpinLockWaitEPViiPKNS0_22SpinLockWaitTransitionE' filepath='src/base/spinlock_internal.cc' line='61' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal12SpinLockWaitEPViiPKNS0_22SpinLockWaitTransitionE' hash='3742d95ddf1a386d'>
          <!-- parameter of type 'volatile Atomic32*' -->
          <parameter type-id='type-id-123'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'const base::internal::SpinLockWaitTransition*' -->
          <parameter type-id='type-id-122'/>
          <!-- typedef int32 -->
          <return type-id='type-id-81'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/sysinfo.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- char[10] -->
    <array-type-def dimensions='1' type-id='type-id-82' size-in-bits='80' hash='17ea60b42da0606b' id='type-id-124'>
      <!-- <anonymous range>[10] -->
      <subrange length='10' lower-bound='0' upper-bound='9' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='4e72a2f569b234f4' id='type-id-125'/>
    </array-type-def>
    <!-- char[5120] -->
    <array-type-def dimensions='1' type-id='type-id-82' size-in-bits='40960' hash='ee8e4ce8c75a11f9' id='type-id-126'>
      <!-- <anonymous range>[5120] -->
      <subrange length='5120' lower-bound='0' upper-bound='5119' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='112cecc9134ba92d' id='type-id-127'/>
    </array-type-def>
    <!-- class ProcMapsIterator -->
    <class-decl name='ProcMapsIterator' visibility='default' size-in-bits='640' filepath='./src/base/sysinfo.h' line='102' column='1' hash='2264b5d7b5d030a4' id='type-id-128'>
      <member-type access='private'>
        <!-- struct ProcMapsIterator::Buffer -->
        <class-decl name='Buffer' is-struct='yes' visibility='default' size-in-bits='40960' filepath='./src/base/sysinfo.h' line='104' column='1' hash='0c3c920007ea2acf' id='type-id-129'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- char ProcMapsIterator::Buffer::buf_[5120] -->
            <var-decl name='buf_' type-id='type-id-126' visibility='default' filepath='./src/base/sysinfo.h' line='112' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- char* ProcMapsIterator::ibuf_ -->
        <var-decl name='ibuf_' type-id='type-id-130' visibility='default' filepath='./src/base/sysinfo.h' line='193' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- char* ProcMapsIterator::stext_ -->
        <var-decl name='stext_' type-id='type-id-130' visibility='default' filepath='./src/base/sysinfo.h' line='194' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- char* ProcMapsIterator::etext_ -->
        <var-decl name='etext_' type-id='type-id-130' visibility='default' filepath='./src/base/sysinfo.h' line='195' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='192'>
        <!-- char* ProcMapsIterator::nextline_ -->
        <var-decl name='nextline_' type-id='type-id-130' visibility='default' filepath='./src/base/sysinfo.h' line='196' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='256'>
        <!-- char* ProcMapsIterator::ebuf_ -->
        <var-decl name='ebuf_' type-id='type-id-130' visibility='default' filepath='./src/base/sysinfo.h' line='197' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='320'>
        <!-- int ProcMapsIterator::fd_ -->
        <var-decl name='fd_' type-id='type-id-1' visibility='default' filepath='./src/base/sysinfo.h' line='219' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='352'>
        <!-- pid_t ProcMapsIterator::pid_ -->
        <var-decl name='pid_' type-id='type-id-77' visibility='default' filepath='./src/base/sysinfo.h' line='221' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='384'>
        <!-- char ProcMapsIterator::flags_[10] -->
        <var-decl name='flags_' type-id='type-id-124' visibility='default' filepath='./src/base/sysinfo.h' line='222' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='512'>
        <!-- ProcMapsIterator::Buffer* ProcMapsIterator::dynamic_buffer_ -->
        <var-decl name='dynamic_buffer_' type-id='type-id-131' visibility='default' filepath='./src/base/sysinfo.h' line='223' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='576'>
        <!-- bool ProcMapsIterator::using_maps_backing_ -->
        <var-decl name='using_maps_backing_' type-id='type-id-59' visibility='default' filepath='./src/base/sysinfo.h' line='224' column='1'/>
      </data-member>
      <member-function access='private'>
        <!-- bool ProcMapsIterator::Valid() -->
        <function-decl name='Valid' mangled-name='_ZNK16ProcMapsIterator5ValidEv' filepath='src/base/sysinfo.cc' line='815' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK16ProcMapsIterator5ValidEv' hash='c7c710e908194b91'>
          <!-- implicit parameter of type 'const ProcMapsIterator*' -->
          <parameter type-id='type-id-132' is-artificial='yes'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- int ProcMapsIterator::FormatLine(int, uint64, uint64, const char*, uint64, int64, const char*, dev_t) -->
        <function-decl name='FormatLine' mangled-name='_ZN16ProcMapsIterator10FormatLineEPcimmPKcmlS2_m' filepath='src/base/sysinfo.cc' line='1084' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIterator10FormatLineEPcimmPKcmlS2_m' hash='5f991849cba2ccd3'>
          <!-- parameter of type 'char*' -->
          <parameter type-id='type-id-130'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'typedef uint64' -->
          <parameter type-id='type-id-116'/>
          <!-- parameter of type 'typedef uint64' -->
          <parameter type-id='type-id-116'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- parameter of type 'typedef uint64' -->
          <parameter type-id='type-id-116'/>
          <!-- parameter of type 'typedef int64' -->
          <parameter type-id='type-id-105'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- parameter of type 'typedef dev_t' -->
          <parameter type-id='type-id-133'/>
          <!-- int -->
          <return type-id='type-id-1'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- ProcMapsIterator::~ProcMapsIterator() -->
        <function-decl name='~ProcMapsIterator' mangled-name='_ZN16ProcMapsIteratorD1Ev' filepath='src/base/sysinfo.cc' line='804' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIteratorD1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'ProcMapsIterator*' -->
          <parameter type-id='type-id-134' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProcMapsIterator::Init(pid_t, ProcMapsIterator::Buffer*, bool) -->
        <function-decl name='Init' mangled-name='_ZN16ProcMapsIterator4InitEiPNS_6BufferEb' filepath='src/base/sysinfo.cc' line='741' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIterator4InitEiPNS_6BufferEb' hash='b9953348555036fa'>
          <!-- implicit parameter of type 'ProcMapsIterator*' -->
          <parameter type-id='type-id-134' is-artificial='yes'/>
          <!-- parameter of type 'typedef pid_t' -->
          <parameter type-id='type-id-77'/>
          <!-- parameter of type 'ProcMapsIterator::Buffer*' -->
          <parameter type-id='type-id-131'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-59'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- ProcMapsIterator::ProcMapsIterator(pid_t, ProcMapsIterator::Buffer*, bool) -->
        <function-decl name='ProcMapsIterator' mangled-name='_ZN16ProcMapsIteratorC1EiPNS_6BufferEb' filepath='src/base/sysinfo.cc' line='736' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIteratorC1EiPNS_6BufferEb' hash='b9953348555036fa'>
          <!-- implicit parameter of type 'ProcMapsIterator*' -->
          <parameter type-id='type-id-134' is-artificial='yes'/>
          <!-- parameter of type 'typedef pid_t' -->
          <parameter type-id='type-id-77'/>
          <!-- parameter of type 'ProcMapsIterator::Buffer*' -->
          <parameter type-id='type-id-131'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-59'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- ProcMapsIterator::ProcMapsIterator(pid_t, ProcMapsIterator::Buffer*) -->
        <function-decl name='ProcMapsIterator' mangled-name='_ZN16ProcMapsIteratorC2EiPNS_6BufferE' filepath='src/base/sysinfo.cc' line='732' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIteratorC2EiPNS_6BufferE' hash='401f52e7102feed6'>
          <!-- implicit parameter of type 'ProcMapsIterator*' -->
          <parameter type-id='type-id-134' is-artificial='yes'/>
          <!-- parameter of type 'typedef pid_t' -->
          <parameter type-id='type-id-77'/>
          <!-- parameter of type 'ProcMapsIterator::Buffer*' -->
          <parameter type-id='type-id-131'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- ProcMapsIterator::ProcMapsIterator(pid_t) -->
        <function-decl name='ProcMapsIterator' mangled-name='_ZN16ProcMapsIteratorC1Ei' filepath='src/base/sysinfo.cc' line='728' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIteratorC1Ei' hash='388da3fa973fde78'>
          <!-- implicit parameter of type 'ProcMapsIterator*' -->
          <parameter type-id='type-id-134' is-artificial='yes'/>
          <!-- parameter of type 'typedef pid_t' -->
          <parameter type-id='type-id-77'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool ProcMapsIterator::NextExt(uint64*, uint64*, char**, uint64*, int64*, char**, uint64*, uint64*, uint64*, uint64*, dev_t*) -->
        <function-decl name='NextExt' mangled-name='_ZN16ProcMapsIterator7NextExtEPmS0_PPcS0_PlS2_S0_S0_S0_S0_S0_' filepath='src/base/sysinfo.cc' line='834' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIterator7NextExtEPmS0_PPcS0_PlS2_S0_S0_S0_S0_S0_' hash='4e2c5075ad0ec0c2'>
          <!-- implicit parameter of type 'ProcMapsIterator*' -->
          <parameter type-id='type-id-134' is-artificial='yes'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-135'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-135'/>
          <!-- parameter of type 'char**' -->
          <parameter type-id='type-id-136'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-135'/>
          <!-- parameter of type 'int64*' -->
          <parameter type-id='type-id-137'/>
          <!-- parameter of type 'char**' -->
          <parameter type-id='type-id-136'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-135'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-135'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-135'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-135'/>
          <!-- parameter of type 'dev_t*' -->
          <parameter type-id='type-id-138'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool ProcMapsIterator::Next(uint64*, uint64*, char**, uint64*, int64*, char**) -->
        <function-decl name='Next' mangled-name='_ZN16ProcMapsIterator4NextEPmS0_PPcS0_PlS2_' filepath='src/base/sysinfo.cc' line='825' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIterator4NextEPmS0_PPcS0_PlS2_' hash='0028c0d0265f0714'>
          <!-- implicit parameter of type 'ProcMapsIterator*' -->
          <parameter type-id='type-id-134' is-artificial='yes'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-135'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-135'/>
          <!-- parameter of type 'char**' -->
          <parameter type-id='type-id-136'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-135'/>
          <!-- parameter of type 'int64*' -->
          <parameter type-id='type-id-137'/>
          <!-- parameter of type 'char**' -->
          <parameter type-id='type-id-136'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef unsigned long int __dev_t -->
    <typedef-decl name='__dev_t' type-id='type-id-21' size-in-bits='64' filepath='/usr/include/bits/types.h' line='134' column='1' hash='8fdc5eea2983a729' id='type-id-139'/>
    <!-- typedef __dev_t dev_t -->
    <typedef-decl name='dev_t' type-id='type-id-139' size-in-bits='64' filepath='/usr/include/sys/types.h' line='61' column='1' hash='8fdc5eea2983a729' id='type-id-133'/>
    <!-- ProcMapsIterator* -->
    <pointer-type-def type-id='type-id-128' size-in-bits='64' hash='fa878a3e0f42a3c6' id='type-id-134'/>
    <!-- ProcMapsIterator* const -->
    <qualified-type-def type-id='type-id-134' const='yes' hash='748044580a31ee8f' id='type-id-140'/>
    <!-- ProcMapsIterator::Buffer* -->
    <pointer-type-def type-id='type-id-129' size-in-bits='64' hash='939b08df96ab7482' id='type-id-131'/>
    <!-- const ProcMapsIterator -->
    <qualified-type-def type-id='type-id-128' const='yes' hash='de70b760bfe42cff' id='type-id-141'/>
    <!-- const ProcMapsIterator* -->
    <pointer-type-def type-id='type-id-141' size-in-bits='64' hash='aeb89ef50ae9a806' id='type-id-132'/>
    <!-- const ProcMapsIterator* const -->
    <qualified-type-def type-id='type-id-132' const='yes' hash='357d93c544ca96b0' id='type-id-142'/>
    <!-- dev_t* -->
    <pointer-type-def type-id='type-id-133' size-in-bits='64' hash='312605a909e8eaa1' id='type-id-138'/>
    <!-- int64* -->
    <pointer-type-def type-id='type-id-105' size-in-bits='64' hash='a1b0a9faf3461c39' id='type-id-137'/>
    <!-- uint64* -->
    <pointer-type-def type-id='type-id-116' size-in-bits='64' hash='22112f95b58dbc67' id='type-id-135'/>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- int tcmalloc::FillProcSelfMaps(char*, int, bool*) -->
      <function-decl name='FillProcSelfMaps' mangled-name='_ZN8tcmalloc16FillProcSelfMapsEPciPb' filepath='src/base/sysinfo.cc' line='1111' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc16FillProcSelfMapsEPciPb' hash='acd61b69cd92cb8f'>
        <!-- parameter of type 'char*' -->
        <parameter type-id='type-id-130'/>
        <!-- parameter of type 'int' -->
        <parameter type-id='type-id-1'/>
        <!-- parameter of type 'bool*' -->
        <parameter type-id='type-id-143'/>
        <!-- int -->
        <return type-id='type-id-1'/>
      </function-decl>
      <!-- void tcmalloc::DumpProcSelfMaps(RawFD) -->
      <function-decl name='DumpProcSelfMaps' mangled-name='_ZN8tcmalloc16DumpProcSelfMapsEi' filepath='src/base/sysinfo.cc' line='1137' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc16DumpProcSelfMapsEi' hash='388da3fa973fde78'>
        <!-- parameter of type 'typedef RawFD' -->
        <parameter type-id='type-id-83' filepath='src/base/logging.cc' line='104' column='1'/>
        <!-- void -->
        <return type-id='type-id-58'/>
      </function-decl>
    </namespace-decl>
    <!-- const char* GetenvBeforeMain(const char*) -->
    <function-decl name='GetenvBeforeMain' mangled-name='_Z16GetenvBeforeMainPKc' filepath='src/base/sysinfo.cc' line='122' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z16GetenvBeforeMainPKc' hash='3d5693612af11c46'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60' filepath='src/base/sysinfo.cc' line='122' column='1'/>
      <!-- const char* -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- const char* TCMallocGetenvSafe(const char*) -->
    <function-decl name='TCMallocGetenvSafe' mangled-name='TCMallocGetenvSafe' filepath='src/base/sysinfo.cc' line='174' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='TCMallocGetenvSafe' hash='3d5693612af11c46'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60' filepath='src/base/sysinfo.cc' line='122' column='1'/>
      <!-- const char* -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- bool GetUniquePathFromEnv(const char*, char*) -->
    <function-decl name='GetUniquePathFromEnv' mangled-name='_Z20GetUniquePathFromEnvPKcPc' filepath='src/base/sysinfo.cc' line='201' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z20GetUniquePathFromEnvPKcPc' hash='4fcb66546067c0f3'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60' filepath='src/base/sysinfo.cc' line='201' column='1'/>
      <!-- parameter of type 'char*' -->
      <parameter type-id='type-id-130' filepath='src/base/sysinfo.cc' line='201' column='1'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-decl>
    <!-- void SleepForMilliseconds(int) -->
    <function-decl name='SleepForMilliseconds' mangled-name='_Z20SleepForMillisecondsi' filepath='src/base/sysinfo.cc' line='226' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z20SleepForMillisecondsi' hash='388da3fa973fde78'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/base/sysinfo.cc' line='226' column='1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- double CyclesPerSecond() -->
    <function-decl name='CyclesPerSecond' mangled-name='_Z15CyclesPerSecondv' filepath='src/base/sysinfo.cc' line='500' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z15CyclesPerSecondv' hash='14e245f4052d89de'>
      <!-- double -->
      <return type-id='type-id-2'/>
    </function-decl>
    <!-- int NumCPUs() -->
    <function-decl name='NumCPUs' mangled-name='_Z7NumCPUsv' filepath='src/base/sysinfo.cc' line='505' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z7NumCPUsv' hash='388da3fa973fde78'>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- bool HasPosixThreads() -->
    <function-decl name='HasPosixThreads' mangled-name='_Z15HasPosixThreadsv' filepath='src/base/sysinfo.cc' line='518' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z15HasPosixThreadsv' hash='c7c710e908194b91'>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/vdso_support.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- base::VDSOInitHelper* -->
    <pointer-type-def type-id='type-id-144' size-in-bits='64' hash='eb484dfa270591eb' id='type-id-145'/>
    <!-- base::VDSOInitHelper* const -->
    <qualified-type-def type-id='type-id-145' const='yes' hash='b12b14a771f8c8b3' id='type-id-146'/>
    <!-- base::VDSOSupport* -->
    <pointer-type-def type-id='type-id-147' size-in-bits='64' hash='883a1fc17f881c67' id='type-id-148'/>
    <!-- base::VDSOSupport* const -->
    <qualified-type-def type-id='type-id-148' const='yes' hash='e6adfea1970106f3' id='type-id-149'/>
    <!-- base::VDSOSupport::SymbolInfo* -->
    <pointer-type-def type-id='type-id-150' size-in-bits='64' hash='c661d6d612749156' id='type-id-151'/>
    <!-- const base::VDSOSupport -->
    <qualified-type-def type-id='type-id-147' const='yes' hash='965e7306817a37f5' id='type-id-152'/>
    <!-- const base::VDSOSupport& -->
    <reference-type-def kind='lvalue' type-id='type-id-152' size-in-bits='64' hash='4c3b458300f87597' id='type-id-153'/>
    <!-- const base::VDSOSupport* -->
    <pointer-type-def type-id='type-id-152' size-in-bits='64' hash='0dd98154a5105c11' id='type-id-154'/>
    <!-- const base::VDSOSupport* const -->
    <qualified-type-def type-id='type-id-154' const='yes' hash='57eb484bf4b0b78d' id='type-id-155'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- class base::ElfMemImage -->
      <class-decl name='ElfMemImage' visibility='default' hash='4d05b0d78d698050' id='type-id-156'>
        <member-function access='private'>
          <!-- int base::ElfMemImage::GetNumSymbols() -->
          <function-decl name='GetNumSymbols' mangled-name='_ZNK4base11ElfMemImage13GetNumSymbolsEv' filepath='src/base/elf_mem_image.cc' line='119' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage13GetNumSymbolsEv' hash='388da3fa973fde78'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const Elf64_Verdaux* base::ElfMemImage::GetVerdefAux(const Elf64_Verdef*) -->
          <function-decl name='GetVerdefAux' mangled-name='_ZNK4base11ElfMemImage12GetVerdefAuxEPK12Elf64_Verdef' filepath='src/base/elf_mem_image.cc' line='172' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage12GetVerdefAuxEPK12Elf64_Verdef' hash='19f69f6f7c219776'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'const Elf64_Verdef*' -->
            <parameter type-id='type-id-41'/>
            <!-- const Elf64_Verdaux* -->
            <return type-id='type-id-39'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- base::ElfMemImage::SymbolIterator base::ElfMemImage::end() -->
          <function-decl name='end' mangled-name='_ZNK4base11ElfMemImage3endEv' filepath='src/base/elf_mem_image.cc' line='389' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage3endEv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- class base::ElfMemImage::SymbolIterator -->
            <return type-id='type-id-28'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const char* base::ElfMemImage::GetVerstr(Elf64_Word) -->
          <function-decl name='GetVerstr' mangled-name='_ZNK4base11ElfMemImage9GetVerstrEj' filepath='src/base/elf_mem_image.cc' line='177' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage9GetVerstrEj' hash='cf5212e813271279'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'typedef Elf64_Word' -->
            <parameter type-id='type-id-6'/>
            <!-- const char* -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const Elf64_Verdef* base::ElfMemImage::GetVerdef(int) -->
          <function-decl name='GetVerdef' mangled-name='_ZNK4base11ElfMemImage9GetVerdefEi' filepath='src/base/elf_mem_image.cc' line='159' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage9GetVerdefEi' hash='c6a2702b6944e5b2'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- const Elf64_Verdef* -->
            <return type-id='type-id-41'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void* base::ElfMemImage::GetSymAddr(const Elf64_Sym*) -->
          <function-decl name='GetSymAddr' mangled-name='_ZNK4base11ElfMemImage10GetSymAddrEPK9Elf64_Sym' filepath='src/base/elf_mem_image.cc' line='150' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage10GetSymAddrEPK9Elf64_Sym' hash='2685c9e30f0e9c0a'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'const Elf64_Sym*' -->
            <parameter type-id='type-id-37'/>
            <!-- void* -->
            <return type-id='type-id-56'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const char* base::ElfMemImage::GetDynstr(Elf64_Word) -->
          <function-decl name='GetDynstr' mangled-name='_ZNK4base11ElfMemImage9GetDynstrEj' filepath='src/base/elf_mem_image.cc' line='145' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage9GetDynstrEj' hash='cf5212e813271279'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'typedef Elf64_Word' -->
            <parameter type-id='type-id-6'/>
            <!-- const char* -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const Elf64_Phdr* base::ElfMemImage::GetPhdr(int) -->
          <function-decl name='GetPhdr' mangled-name='_ZNK4base11ElfMemImage7GetPhdrEi' filepath='src/base/elf_mem_image.cc' line='137' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage7GetPhdrEi' hash='347de63754287c77'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- const Elf64_Phdr* -->
            <return type-id='type-id-35'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void base::ElfMemImage::Init(void*) -->
          <function-decl name='Init' mangled-name='_ZN4base11ElfMemImage4InitEPKv' filepath='src/base/elf_mem_image.cc' line='182' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11ElfMemImage4InitEPKv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'base::ElfMemImage*' -->
            <parameter type-id='type-id-24' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- base::ElfMemImage::ElfMemImage(void*) -->
          <function-decl name='ElfMemImage' mangled-name='_ZN4base11ElfMemImageC1EPKv' filepath='src/base/elf_mem_image.cc' line='114' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11ElfMemImageC1EPKv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'base::ElfMemImage*' -->
            <parameter type-id='type-id-24' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const Elf64_Versym* base::ElfMemImage::GetVersym(int) -->
          <function-decl name='GetVersym' mangled-name='_ZNK4base11ElfMemImage9GetVersymEi' filepath='src/base/elf_mem_image.cc' line='132' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage9GetVersymEi' hash='ad58fd7867afcd7f'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- const Elf64_Versym* -->
            <return type-id='type-id-43'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const Elf64_Sym* base::ElfMemImage::GetDynsym(int) -->
          <function-decl name='GetDynsym' mangled-name='_ZNK4base11ElfMemImage9GetDynsymEi' filepath='src/base/elf_mem_image.cc' line='127' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage9GetDynsymEi' hash='3f9d161fff24d853'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- const Elf64_Sym* -->
            <return type-id='type-id-37'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- base::ElfMemImage::SymbolIterator base::ElfMemImage::begin() -->
          <function-decl name='begin' mangled-name='_ZNK4base11ElfMemImage5beginEv' filepath='src/base/elf_mem_image.cc' line='383' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage5beginEv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- class base::ElfMemImage::SymbolIterator -->
            <return type-id='type-id-28'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool base::ElfMemImage::LookupSymbolByAddress(void*, base::ElfMemImage::SymbolInfo*) -->
          <function-decl name='LookupSymbolByAddress' mangled-name='_ZNK4base11ElfMemImage21LookupSymbolByAddressEPKvPNS0_10SymbolInfoE' filepath='src/base/elf_mem_image.cc' line='332' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage21LookupSymbolByAddressEPKvPNS0_10SymbolInfoE' hash='b897a0ddbd63cce5'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- parameter of type 'base::ElfMemImage::SymbolInfo*' -->
            <parameter type-id='type-id-27'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool base::ElfMemImage::LookupSymbol(const char*, const char*, int, base::ElfMemImage::SymbolInfo*) -->
          <function-decl name='LookupSymbol' mangled-name='_ZNK4base11ElfMemImage12LookupSymbolEPKcS2_iPNS0_10SymbolInfoE' filepath='src/base/elf_mem_image.cc' line='316' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage12LookupSymbolEPKcS2_iPNS0_10SymbolInfoE' hash='d055b32b0e2d828c'>
            <!-- implicit parameter of type 'const base::ElfMemImage*' -->
            <parameter type-id='type-id-47' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-60'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-60'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- parameter of type 'base::ElfMemImage::SymbolInfo*' -->
            <parameter type-id='type-id-27'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class base::VDSOInitHelper -->
      <class-decl name='VDSOInitHelper' visibility='default' size-in-bits='8' filepath='src/base/vdso_support.cc' line='137' column='1' hash='6370393810069857' id='type-id-144'/>
      <!-- class base::VDSOSupport -->
      <class-decl name='VDSOSupport' visibility='default' size-in-bits='576' filepath='./src/base/vdso_support.h' line='72' column='1' hash='6860908f4e29291a' id='type-id-147'>
        <member-type access='private'>
          <!-- typedef base::ElfMemImage::SymbolInfo base::VDSOSupport::SymbolInfo -->
          <typedef-decl name='SymbolInfo' type-id='type-id-26' size-in-bits='256' filepath='./src/base/vdso_support.h' line='76' column='1' id='type-id-150'/>
        </member-type>
        <member-type access='private'>
          <!-- typedef base::ElfMemImage::SymbolIterator base::VDSOSupport::SymbolIterator -->
          <typedef-decl name='SymbolIterator' type-id='type-id-28' size-in-bits='384' filepath='./src/base/vdso_support.h' line='77' column='1' id='type-id-157'/>
        </member-type>
        <data-member access='public' static='yes'>
          <!-- static void* base::VDSOSupport::vdso_base_ -->
          <var-decl name='vdso_base_' type-id='type-id-56' mangled-name='_ZN4base11VDSOSupport10vdso_base_E' visibility='default' filepath='src/base/vdso_support.cc' line='59' column='1' elf-symbol-id='_ZN4base11VDSOSupport10vdso_base_E'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- base::ElfMemImage base::VDSOSupport::image_ -->
          <var-decl name='image_' type-id='type-id-23' visibility='default' filepath='./src/base/vdso_support.h' line='112' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- bool base::VDSOSupport::LookupSymbolByAddress(void*, base::VDSOSupport::SymbolInfo*) -->
          <function-decl name='LookupSymbolByAddress' mangled-name='_ZNK4base11VDSOSupport21LookupSymbolByAddressEPKvPNS_11ElfMemImage10SymbolInfoE' filepath='src/base/vdso_support.cc' line='124' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11VDSOSupport21LookupSymbolByAddressEPKvPNS_11ElfMemImage10SymbolInfoE' hash='b897a0ddbd63cce5'>
            <!-- implicit parameter of type 'const base::VDSOSupport*' -->
            <parameter type-id='type-id-154' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- parameter of type 'base::VDSOSupport::SymbolInfo*' -->
            <parameter type-id='type-id-151'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool base::VDSOSupport::LookupSymbol(const char*, const char*, int, base::VDSOSupport::SymbolInfo*) -->
          <function-decl name='LookupSymbol' mangled-name='_ZNK4base11VDSOSupport12LookupSymbolEPKcS2_iPNS_11ElfMemImage10SymbolInfoE' filepath='src/base/vdso_support.cc' line='117' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11VDSOSupport12LookupSymbolEPKcS2_iPNS_11ElfMemImage10SymbolInfoE' hash='d055b32b0e2d828c'>
            <!-- implicit parameter of type 'const base::VDSOSupport*' -->
            <parameter type-id='type-id-154' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-60'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-60'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- parameter of type 'base::VDSOSupport::SymbolInfo*' -->
            <parameter type-id='type-id-151'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void* base::VDSOSupport::SetBase(void*) -->
          <function-decl name='SetBase' mangled-name='_ZN4base11VDSOSupport7SetBaseEPKv' filepath='src/base/vdso_support.cc' line='109' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11VDSOSupport7SetBaseEPKv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'base::VDSOSupport*' -->
            <parameter type-id='type-id-148' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- void* -->
            <return type-id='type-id-56'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void* base::VDSOSupport::Init() -->
          <function-decl name='Init' mangled-name='_ZN4base11VDSOSupport4InitEv' filepath='src/base/vdso_support.cc' line='75' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11VDSOSupport4InitEv' hash='7f32ffea222edbe7'>
            <!-- void* -->
            <return type-id='type-id-56'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- base::VDSOSupport::VDSOSupport() -->
          <function-decl name='VDSOSupport' mangled-name='_ZN4base11VDSOSupportC1Ev' filepath='src/base/vdso_support.cc' line='60' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11VDSOSupportC1Ev' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'base::VDSOSupport*' -->
            <parameter type-id='type-id-148' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- void (void) -->
    <function-type size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-158'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/central_freelist.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- const int& -->
    <reference-type-def kind='lvalue' type-id='type-id-159' size-in-bits='64' hash='5bb43a8603322674' id='type-id-160'/>
    <!-- const int32_t -->
    <qualified-type-def type-id='type-id-161' const='yes' hash='118d35f5174d8310' id='type-id-162'/>
    <!-- const int32_t& -->
    <reference-type-def kind='lvalue' type-id='type-id-162' size-in-bits='64' hash='43aecb5732ecabb0' id='type-id-163'/>
    <!-- const tcmalloc::Span -->
    <qualified-type-def type-id='type-id-164' const='yes' hash='795ecde4916fdb90' id='type-id-165'/>
    <!-- const tcmalloc::Span* -->
    <pointer-type-def type-id='type-id-165' size-in-bits='64' hash='f1228bd9c4fd21bf' id='type-id-166'/>
    <!-- TCMalloc_PageMap3<35>::Node* -->
    <pointer-type-def type-id='type-id-167' size-in-bits='64' id='type-id-168'/>
    <!-- struct _IO_FILE -->
    <class-decl name='_IO_FILE' is-struct='yes' visibility='default' size-in-bits='1728' filepath='/usr/include/libio.h' line='271' column='1' hash='29dcdce3af7c2b79' id='type-id-169'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int _IO_FILE::_flags -->
        <var-decl name='_flags' type-id='type-id-1' visibility='default' filepath='/usr/include/libio.h' line='272' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- char* _IO_FILE::_IO_read_ptr -->
        <var-decl name='_IO_read_ptr' type-id='type-id-130' visibility='default' filepath='/usr/include/libio.h' line='277' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- char* _IO_FILE::_IO_read_end -->
        <var-decl name='_IO_read_end' type-id='type-id-130' visibility='default' filepath='/usr/include/libio.h' line='278' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- char* _IO_FILE::_IO_read_base -->
        <var-decl name='_IO_read_base' type-id='type-id-130' visibility='default' filepath='/usr/include/libio.h' line='279' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- char* _IO_FILE::_IO_write_base -->
        <var-decl name='_IO_write_base' type-id='type-id-130' visibility='default' filepath='/usr/include/libio.h' line='280' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='320'>
        <!-- char* _IO_FILE::_IO_write_ptr -->
        <var-decl name='_IO_write_ptr' type-id='type-id-130' visibility='default' filepath='/usr/include/libio.h' line='281' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='384'>
        <!-- char* _IO_FILE::_IO_write_end -->
        <var-decl name='_IO_write_end' type-id='type-id-130' visibility='default' filepath='/usr/include/libio.h' line='282' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='448'>
        <!-- char* _IO_FILE::_IO_buf_base -->
        <var-decl name='_IO_buf_base' type-id='type-id-130' visibility='default' filepath='/usr/include/libio.h' line='283' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='512'>
        <!-- char* _IO_FILE::_IO_buf_end -->
        <var-decl name='_IO_buf_end' type-id='type-id-130' visibility='default' filepath='/usr/include/libio.h' line='284' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='576'>
        <!-- char* _IO_FILE::_IO_save_base -->
        <var-decl name='_IO_save_base' type-id='type-id-130' visibility='default' filepath='/usr/include/libio.h' line='286' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='640'>
        <!-- char* _IO_FILE::_IO_backup_base -->
        <var-decl name='_IO_backup_base' type-id='type-id-130' visibility='default' filepath='/usr/include/libio.h' line='287' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='704'>
        <!-- char* _IO_FILE::_IO_save_end -->
        <var-decl name='_IO_save_end' type-id='type-id-130' visibility='default' filepath='/usr/include/libio.h' line='288' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='768'>
        <!-- _IO_marker* _IO_FILE::_markers -->
        <var-decl name='_markers' type-id='type-id-170' visibility='default' filepath='/usr/include/libio.h' line='290' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='832'>
        <!-- _IO_FILE* _IO_FILE::_chain -->
        <var-decl name='_chain' type-id='type-id-171' visibility='default' filepath='/usr/include/libio.h' line='292' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='896'>
        <!-- int _IO_FILE::_fileno -->
        <var-decl name='_fileno' type-id='type-id-1' visibility='default' filepath='/usr/include/libio.h' line='294' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='928'>
        <!-- int _IO_FILE::_flags2 -->
        <var-decl name='_flags2' type-id='type-id-1' visibility='default' filepath='/usr/include/libio.h' line='298' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='960'>
        <!-- __off_t _IO_FILE::_old_offset -->
        <var-decl name='_old_offset' type-id='type-id-172' visibility='default' filepath='/usr/include/libio.h' line='300' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1024'>
        <!-- unsigned short int _IO_FILE::_cur_column -->
        <var-decl name='_cur_column' type-id='type-id-20' visibility='default' filepath='/usr/include/libio.h' line='304' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1040'>
        <!-- signed char _IO_FILE::_vtable_offset -->
        <var-decl name='_vtable_offset' type-id='type-id-173' visibility='default' filepath='/usr/include/libio.h' line='305' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1048'>
        <!-- char _IO_FILE::_shortbuf[1] -->
        <var-decl name='_shortbuf' type-id='type-id-174' visibility='default' filepath='/usr/include/libio.h' line='306' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1088'>
        <!-- _IO_lock_t* _IO_FILE::_lock -->
        <var-decl name='_lock' type-id='type-id-175' visibility='default' filepath='/usr/include/libio.h' line='310' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1152'>
        <!-- __off64_t _IO_FILE::_offset -->
        <var-decl name='_offset' type-id='type-id-176' visibility='default' filepath='/usr/include/libio.h' line='319' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1216'>
        <!-- void* _IO_FILE::__pad1 -->
        <var-decl name='__pad1' type-id='type-id-56' visibility='default' filepath='/usr/include/libio.h' line='328' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1280'>
        <!-- void* _IO_FILE::__pad2 -->
        <var-decl name='__pad2' type-id='type-id-56' visibility='default' filepath='/usr/include/libio.h' line='329' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1344'>
        <!-- void* _IO_FILE::__pad3 -->
        <var-decl name='__pad3' type-id='type-id-56' visibility='default' filepath='/usr/include/libio.h' line='330' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1408'>
        <!-- void* _IO_FILE::__pad4 -->
        <var-decl name='__pad4' type-id='type-id-56' visibility='default' filepath='/usr/include/libio.h' line='331' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1472'>
        <!-- size_t _IO_FILE::__pad5 -->
        <var-decl name='__pad5' type-id='type-id-61' visibility='default' filepath='/usr/include/libio.h' line='332' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1536'>
        <!-- int _IO_FILE::_mode -->
        <var-decl name='_mode' type-id='type-id-1' visibility='default' filepath='/usr/include/libio.h' line='334' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1568'>
        <!-- char _IO_FILE::_unused2[20] -->
        <var-decl name='_unused2' type-id='type-id-177' visibility='default' filepath='/usr/include/libio.h' line='336' column='1'/>
      </data-member>
    </class-decl>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- struct base::MallocRange -->
      <class-decl name='MallocRange' is-struct='yes' visibility='default' hash='8f2fa3ce1ca054ae' id='type-id-178'>
      </class-decl>
    </namespace-decl>
    <!-- double strtod(const char*, char**) -->
    <function-decl name='strtod' filepath='/usr/include/stdlib.h' line='165' column='1' visibility='default' binding='global' size-in-bits='64' hash='15d84328157dd688'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- parameter of type 'char**' -->
      <parameter type-id='type-id-136'/>
      <!-- double -->
      <return type-id='type-id-2'/>
    </function-decl>
    <!-- long int strtol(const char*, char**, int) -->
    <function-decl name='strtol' filepath='/usr/include/stdlib.h' line='184' column='1' visibility='default' binding='global' size-in-bits='64' hash='e745adec85b81cf6'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- parameter of type 'char**' -->
      <parameter type-id='type-id-136'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- long int -->
      <return type-id='type-id-179'/>
    </function-decl>
    <!-- long long int strtoll(const char*, char**, int) -->
    <function-decl name='strtoll' filepath='/usr/include/stdlib.h' line='210' column='1' visibility='default' binding='global' size-in-bits='64' hash='24058e744113e8b7#2'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- parameter of type 'char**' -->
      <parameter type-id='type-id-136'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- long long int -->
      <return type-id='type-id-180'/>
    </function-decl>
    <!-- unsigned long long int strtoull(const char*, char**, int) -->
    <function-decl name='strtoull' filepath='/usr/include/stdlib.h' line='215' column='1' visibility='default' binding='global' size-in-bits='64' hash='b5c0cb10fb089e0c#2'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- parameter of type 'char**' -->
      <parameter type-id='type-id-136'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- unsigned long long int -->
      <return type-id='type-id-181'/>
    </function-decl>
    <!-- int atoi(const char*) -->
    <function-decl name='atoi' filepath='/usr/include/stdlib.h' line='284' column='1' visibility='default' binding='global' size-in-bits='64' hash='e9ea91a7eab8302c'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- char* getenv(const char*) -->
    <function-decl name='getenv' filepath='/usr/include/stdlib.h' line='567' column='1' visibility='default' binding='global' size-in-bits='64' hash='bac6a89264ba699c'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- char* -->
      <return type-id='type-id-130'/>
    </function-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- class tcmalloc::CentralFreeList -->
      <class-decl name='CentralFreeList' visibility='default' hash='c085a61f676e6f8d' id='type-id-182'>
        <member-function access='private'>
          <!-- int tcmalloc::CentralFreeList::FetchFromOneSpans(int, void**, void**) -->
          <function-decl name='FetchFromOneSpans' mangled-name='_ZN8tcmalloc15CentralFreeList17FetchFromOneSpansEiPPvS2_' filepath='src/central_freelist.cc' line='290' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList17FetchFromOneSpansEiPPvS2_' hash='05583901df42bd48'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-184'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-184'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::CentralFreeList::Init(size_t) -->
          <function-decl name='Init' mangled-name='_ZN8tcmalloc15CentralFreeList4InitEm' filepath='src/central_freelist.cc' line='47' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList4InitEm' hash='e0055d99adb0e173'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-61'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::CentralFreeList::Populate() -->
          <function-decl name='Populate' mangled-name='_ZN8tcmalloc15CentralFreeList8PopulateEv' filepath='src/central_freelist.cc' line='321' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList8PopulateEv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- int tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**) -->
          <function-decl name='FetchFromOneSpansSafe' mangled-name='_ZN8tcmalloc15CentralFreeList21FetchFromOneSpansSafeEiPPvS2_' filepath='src/central_freelist.cc' line='281' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList21FetchFromOneSpansSafeEiPPvS2_' hash='05583901df42bd48'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-184'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-184'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- size_t tcmalloc::CentralFreeList::OverheadBytes() -->
          <function-decl name='OverheadBytes' mangled-name='_ZN8tcmalloc15CentralFreeList13OverheadBytesEv' filepath='src/central_freelist.cc' line='375' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList13OverheadBytesEv' hash='e0055d99adb0e173'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- typedef size_t -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- int tcmalloc::CentralFreeList::tc_length() -->
          <function-decl name='tc_length' mangled-name='_ZN8tcmalloc15CentralFreeList9tc_lengthEv' filepath='src/central_freelist.cc' line='370' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList9tc_lengthEv' hash='388da3fa973fde78'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- int tcmalloc::CentralFreeList::RemoveRange(void**, void**, int) -->
          <function-decl name='RemoveRange' mangled-name='_ZN8tcmalloc15CentralFreeList11RemoveRangeEPPvS2_i' filepath='src/central_freelist.cc' line='246' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList11RemoveRangeEPPvS2_i' hash='14b2e307a32069c0'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-184'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-184'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::CentralFreeList::ReleaseToSpans(void*) -->
          <function-decl name='ReleaseToSpans' mangled-name='_ZN8tcmalloc15CentralFreeList14ReleaseToSpansEPv' filepath='src/central_freelist.cc' line='104' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList14ReleaseToSpansEPv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::CentralFreeList::ReleaseListToSpans(void*) -->
          <function-decl name='ReleaseListToSpans' mangled-name='_ZN8tcmalloc15CentralFreeList18ReleaseListToSpansEPv' filepath='src/central_freelist.cc' line='82' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList18ReleaseListToSpansEPv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::CentralFreeList::ShrinkCache(int, bool) -->
          <function-decl name='ShrinkCache' mangled-name='_ZN8tcmalloc15CentralFreeList11ShrinkCacheEib' filepath='src/central_freelist.cc' line='203' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList11ShrinkCacheEib' hash='6e5147834edeef47'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- parameter of type 'bool' -->
            <parameter type-id='type-id-59'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- bool tcmalloc::CentralFreeList::EvictRandomSizeClass(bool) -->
          <function-decl name='EvictRandomSizeClass' mangled-name='_ZN8tcmalloc15CentralFreeList20EvictRandomSizeClassEib' filepath='src/central_freelist.cc' line='151' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList20EvictRandomSizeClassEib' hash='6e5147834edeef47#2'>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- parameter of type 'bool' -->
            <parameter type-id='type-id-59'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::CentralFreeList::MakeCacheSpace() -->
          <function-decl name='MakeCacheSpace' mangled-name='_ZN8tcmalloc15CentralFreeList14MakeCacheSpaceEv' filepath='src/central_freelist.cc' line='167' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList14MakeCacheSpaceEv' hash='c7c710e908194b91'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::CentralFreeList::InsertRange(void*, void*, int) -->
          <function-decl name='InsertRange' mangled-name='_ZN8tcmalloc15CentralFreeList11InsertRangeEPvS1_i' filepath='src/central_freelist.cc' line='231' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList11InsertRangeEPvS1_i' hash='388da3fa973fde78'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class tcmalloc::CentralFreeListPadded -->
      <class-decl name='CentralFreeListPadded' visibility='default' hash='927adecee00cfb9c' id='type-id-185'/>
      <!-- class tcmalloc::PageHeap -->
      <class-decl name='PageHeap' visibility='default' hash='222c75e813625762' id='type-id-186'>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::MayMergeSpans(tcmalloc::Span*, tcmalloc::Span*) -->
          <function-decl name='MayMergeSpans' mangled-name='_ZN8tcmalloc8PageHeap13MayMergeSpansEPNS_4SpanES2_' filepath='src/page_heap.cc' line='316' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap13MayMergeSpansEPNS_4SpanES2_' hash='37bb0ff623f303ce'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::RegisterSizeClass(tcmalloc::Span*, size_t) -->
          <function-decl name='RegisterSizeClass' mangled-name='_ZN8tcmalloc8PageHeap17RegisterSizeClassEPNS_4SpanEm' filepath='src/page_heap.cc' line='518' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap17RegisterSizeClassEPNS_4SpanEm' hash='ebab2e40fedd1db3'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-61'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::GetLargeSpanStats(tcmalloc::PageHeap::LargeSpanStats*) -->
          <function-decl name='GetLargeSpanStats' mangled-name='_ZN8tcmalloc8PageHeap17GetLargeSpanStatsEPNS0_14LargeSpanStatsE' filepath='src/page_heap.cc' line='537' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap17GetLargeSpanStatsEPNS0_14LargeSpanStatsE' hash='5287c32193a057e7'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::PageHeap::LargeSpanStats*' -->
            <parameter type-id='type-id-189'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::GetNextRange(PageID, base::MallocRange*) -->
          <function-decl name='GetNextRange' mangled-name='_ZN8tcmalloc8PageHeap12GetNextRangeEmPN4base11MallocRangeE' filepath='src/page_heap.cc' line='551' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap12GetNextRangeEmPN4base11MallocRangeE' hash='49299f0d79243915'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef PageID' -->
            <parameter type-id='type-id-190'/>
            <!-- parameter of type 'base::MallocRange*' -->
            <parameter type-id='type-id-191'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::Check() -->
          <function-decl name='Check' mangled-name='_ZN8tcmalloc8PageHeap5CheckEv' filepath='src/page_heap.cc' line='646' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap5CheckEv' hash='c7c710e908194b91'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::CheckList(tcmalloc::Span*, Length, Length, int) -->
          <function-decl name='CheckList' mangled-name='_ZN8tcmalloc8PageHeap9CheckListEPNS_4SpanEmmi' filepath='src/page_heap.cc' line='663' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap9CheckListEPNS_4SpanEmmi' hash='c0f70e7895fb5be5'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::CheckExpensive() -->
          <function-decl name='CheckExpensive' mangled-name='_ZN8tcmalloc8PageHeap14CheckExpensiveEv' filepath='src/page_heap.cc' line='652' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap14CheckExpensiveEv' hash='c7c710e908194b91'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- tcmalloc::Span* tcmalloc::PageHeap::Split(tcmalloc::Span*, Length) -->
          <function-decl name='Split' mangled-name='_ZN8tcmalloc8PageHeap5SplitEPNS_4SpanEm' filepath='src/page_heap.cc' line='222' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap5SplitEPNS_4SpanEm' hash='8a9780a59468e315'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- tcmalloc::Span* -->
            <return type-id='type-id-188'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::GetSmallSpanStats(tcmalloc::PageHeap::SmallSpanStats*) -->
          <function-decl name='GetSmallSpanStats' mangled-name='_ZN8tcmalloc8PageHeap17GetSmallSpanStatsEPNS0_14SmallSpanStatsE' filepath='src/page_heap.cc' line='530' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap17GetSmallSpanStatsEPNS0_14SmallSpanStatsE' hash='988bbfba08aca7f1'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::PageHeap::SmallSpanStats*' -->
            <parameter type-id='type-id-193'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::RemoveFromFreeList(tcmalloc::Span*) -->
          <function-decl name='RemoveFromFreeList' mangled-name='_ZN8tcmalloc8PageHeap18RemoveFromFreeListEPNS_4SpanE' filepath='src/page_heap.cc' line='415' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap18RemoveFromFreeListEPNS_4SpanE' hash='e089691e785388d9'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::PrependToFreeList(tcmalloc::Span*) -->
          <function-decl name='PrependToFreeList' mangled-name='_ZN8tcmalloc8PageHeap17PrependToFreeListEPNS_4SpanE' filepath='src/page_heap.cc' line='403' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap17PrependToFreeListEPNS_4SpanE' hash='e089691e785388d9'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::DecommitSpan(tcmalloc::Span*) -->
          <function-decl name='DecommitSpan' mangled-name='_ZN8tcmalloc8PageHeap12DecommitSpanEPNS_4SpanE' filepath='src/page_heap.cc' line='246' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap12DecommitSpanEPNS_4SpanE' hash='b836a24ffbd86a3b'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::MergeIntoFreeList(tcmalloc::Span*) -->
          <function-decl name='MergeIntoFreeList' mangled-name='_ZN8tcmalloc8PageHeap17MergeIntoFreeListEPNS_4SpanE' filepath='src/page_heap.cc' line='323' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap17MergeIntoFreeListEPNS_4SpanE' hash='e089691e785388d9'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- Length tcmalloc::PageHeap::ReleaseLastNormalSpan(tcmalloc::PageHeap::SpanList*) -->
          <function-decl name='ReleaseLastNormalSpan' mangled-name='_ZN8tcmalloc8PageHeap21ReleaseLastNormalSpanEPNS0_8SpanListE' filepath='src/page_heap.cc' line='456' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap21ReleaseLastNormalSpanEPNS0_8SpanListE' hash='e0bb13d58b9d984f'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::PageHeap::SpanList*' -->
            <parameter type-id='type-id-194'/>
            <!-- typedef Length -->
            <return type-id='type-id-192'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- Length tcmalloc::PageHeap::ReleaseAtLeastNPages(Length) -->
          <function-decl name='ReleaseAtLeastNPages' mangled-name='_ZN8tcmalloc8PageHeap20ReleaseAtLeastNPagesEm' filepath='src/page_heap.cc' line='471' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap20ReleaseAtLeastNPagesEm' hash='91495cdf6321a116'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- typedef Length -->
            <return type-id='type-id-192'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::EnsureLimit(Length, bool) -->
          <function-decl name='EnsureLimit' mangled-name='_ZN8tcmalloc8PageHeap11EnsureLimitEmb' filepath='src/page_heap.cc' line='494' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap11EnsureLimitEmb' hash='edf93e0e926f2972'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- parameter of type 'bool' -->
            <parameter type-id='type-id-59'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::IncrementalScavenge(Length) -->
          <function-decl name='IncrementalScavenge' mangled-name='_ZN8tcmalloc8PageHeap19IncrementalScavengeEm' filepath='src/page_heap.cc' line='425' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap19IncrementalScavengeEm' hash='e0055d99adb0e173'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::Delete(tcmalloc::Span*) -->
          <function-decl name='Delete' mangled-name='_ZN8tcmalloc8PageHeap6DeleteEPNS_4SpanE' filepath='src/page_heap.cc' line='299' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap6DeleteEPNS_4SpanE' hash='e089691e785388d9'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::GrowHeap(Length) -->
          <function-decl name='GrowHeap' mangled-name='_ZN8tcmalloc8PageHeap8GrowHeapEm' filepath='src/page_heap.cc' line='590' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap8GrowHeapEm' hash='7e544b18f5e89a62'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::CommitSpan(tcmalloc::Span*) -->
          <function-decl name='CommitSpan' mangled-name='_ZN8tcmalloc8PageHeap10CommitSpanEPNS_4SpanE' filepath='src/page_heap.cc' line='240' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap10CommitSpanEPNS_4SpanE' hash='e089691e785388d9'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- tcmalloc::Span* tcmalloc::PageHeap::Carve(tcmalloc::Span*, Length) -->
          <function-decl name='Carve' mangled-name='_ZN8tcmalloc8PageHeap5CarveEPNS_4SpanEm' filepath='src/page_heap.cc' line='256' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap5CarveEPNS_4SpanEm' hash='8a9780a59468e315'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- tcmalloc::Span* -->
            <return type-id='type-id-188'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- tcmalloc::Span* tcmalloc::PageHeap::AllocLarge(Length) -->
          <function-decl name='AllocLarge' mangled-name='_ZN8tcmalloc8PageHeap10AllocLargeEm' filepath='src/page_heap.cc' line='164' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap10AllocLargeEm' hash='ebab2e40fedd1db3'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- tcmalloc::Span* -->
            <return type-id='type-id-188'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- tcmalloc::Span* tcmalloc::PageHeap::SearchFreeAndLargeLists(Length) -->
          <function-decl name='SearchFreeAndLargeLists' mangled-name='_ZN8tcmalloc8PageHeap23SearchFreeAndLargeListsEm' filepath='src/page_heap.cc' line='80' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap23SearchFreeAndLargeListsEm' hash='ebab2e40fedd1db3'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- tcmalloc::Span* -->
            <return type-id='type-id-188'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- tcmalloc::Span* tcmalloc::PageHeap::New(Length) -->
          <function-decl name='New' mangled-name='_ZN8tcmalloc8PageHeap3NewEm' filepath='src/page_heap.cc' line='115' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap3NewEm' hash='ebab2e40fedd1db3'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- tcmalloc::Span* -->
            <return type-id='type-id-188'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::PageHeap::PageHeap() -->
          <function-decl name='PageHeap' mangled-name='_ZN8tcmalloc8PageHeapC1Ev' filepath='src/page_heap.cc' line='64' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeapC1Ev' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class tcmalloc::Static -->
      <class-decl name='Static' visibility='default' hash='1bc5e1dbc1d1509d' id='type-id-195'>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::Static::InitStaticVars() -->
          <function-decl name='InitStaticVars' mangled-name='_ZN8tcmalloc6Static14InitStaticVarsEv' filepath='src/static_vars.cc' line='82' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc6Static14InitStaticVarsEv' hash='7f32ffea222edbe7'>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct tcmalloc::Span -->
      <class-decl name='Span' is-struct='yes' visibility='default' hash='9155200a80dda2bf' id='type-id-196'/>
      <!-- struct tcmalloc::StackTrace -->
      <class-decl name='StackTrace' is-struct='yes' visibility='default' hash='0ebb74cf73f54255' id='type-id-197'/>
      <!-- class tcmalloc::LogItem -->
      <class-decl name='LogItem' visibility='default' hash='c56129486804d69d' id='type-id-198'>
      </class-decl>
      <!-- class tcmalloc::PageHeapAllocator<tcmalloc::Span> -->
      <class-decl name='PageHeapAllocator&lt;tcmalloc::Span&gt;' visibility='default' size-in-bits='256' filepath='src/page_heap_allocator.h' line='47' column='1' hash='f6d6733aed128ac5' id='type-id-199'>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- char* tcmalloc::PageHeapAllocator<tcmalloc::Span>::free_area_ -->
          <var-decl name='free_area_' type-id='type-id-130' visibility='default' filepath='src/page_heap_allocator.h' line='102' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- size_t tcmalloc::PageHeapAllocator<tcmalloc::Span>::free_avail_ -->
          <var-decl name='free_avail_' type-id='type-id-61' visibility='default' filepath='src/page_heap_allocator.h' line='103' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- void* tcmalloc::PageHeapAllocator<tcmalloc::Span>::free_list_ -->
          <var-decl name='free_list_' type-id='type-id-56' visibility='default' filepath='src/page_heap_allocator.h' line='106' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='192'>
          <!-- int tcmalloc::PageHeapAllocator<tcmalloc::Span>::inuse_ -->
          <var-decl name='inuse_' type-id='type-id-1' visibility='default' filepath='src/page_heap_allocator.h' line='109' column='1'/>
        </data-member>
      </class-decl>
      <!-- class tcmalloc::PageHeapAllocator<tcmalloc::StackTrace> -->
      <class-decl name='PageHeapAllocator&lt;tcmalloc::StackTrace&gt;' visibility='default' size-in-bits='256' filepath='src/page_heap_allocator.h' line='47' column='1' hash='45310e04242d15c6' id='type-id-200'>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- char* tcmalloc::PageHeapAllocator<tcmalloc::StackTrace>::free_area_ -->
          <var-decl name='free_area_' type-id='type-id-130' visibility='default' filepath='src/page_heap_allocator.h' line='102' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- size_t tcmalloc::PageHeapAllocator<tcmalloc::StackTrace>::free_avail_ -->
          <var-decl name='free_avail_' type-id='type-id-61' visibility='default' filepath='src/page_heap_allocator.h' line='103' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- void* tcmalloc::PageHeapAllocator<tcmalloc::StackTrace>::free_list_ -->
          <var-decl name='free_list_' type-id='type-id-56' visibility='default' filepath='src/page_heap_allocator.h' line='106' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='192'>
          <!-- int tcmalloc::PageHeapAllocator<tcmalloc::StackTrace>::inuse_ -->
          <var-decl name='inuse_' type-id='type-id-1' visibility='default' filepath='src/page_heap_allocator.h' line='109' column='1'/>
        </data-member>
      </class-decl>
      <!-- class tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket> -->
      <class-decl name='PageHeapAllocator&lt;tcmalloc::StackTraceTable::Bucket&gt;' visibility='default' size-in-bits='256' filepath='src/page_heap_allocator.h' line='47' column='1' hash='fe7c8d14e53f5993' id='type-id-201'>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- char* tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>::free_area_ -->
          <var-decl name='free_area_' type-id='type-id-130' visibility='default' filepath='src/page_heap_allocator.h' line='102' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- size_t tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>::free_avail_ -->
          <var-decl name='free_avail_' type-id='type-id-61' visibility='default' filepath='src/page_heap_allocator.h' line='103' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- void* tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>::free_list_ -->
          <var-decl name='free_list_' type-id='type-id-56' visibility='default' filepath='src/page_heap_allocator.h' line='106' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='192'>
          <!-- int tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>::inuse_ -->
          <var-decl name='inuse_' type-id='type-id-1' visibility='default' filepath='src/page_heap_allocator.h' line='109' column='1'/>
        </data-member>
      </class-decl>
      <!-- class tcmalloc::SizeMap -->
      <class-decl name='SizeMap' visibility='default' hash='2dbf9d0b9da46da8' id='type-id-202'>
        <member-function access='private'>
          <!-- int tcmalloc::SizeMap::NumMoveSize(size_t) -->
          <function-decl name='NumMoveSize' mangled-name='_ZN8tcmalloc7SizeMap11NumMoveSizeEm' filepath='src/common.cc' line='99' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7SizeMap11NumMoveSizeEm' hash='b6a97d07f8261bc0'>
            <!-- implicit parameter of type 'tcmalloc::SizeMap*' -->
            <parameter type-id='type-id-203' is-artificial='yes'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-61'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::SizeMap::Init() -->
          <function-decl name='Init' mangled-name='_ZN8tcmalloc7SizeMap4InitEv' filepath='src/common.cc' line='122' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7SizeMap4InitEv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::SizeMap*' -->
            <parameter type-id='type-id-203' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- void (void*) -->
    <function-type size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-204'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (void*, void*) -->
    <function-type size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-205'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void* (size_t) -->
    <function-type size-in-bits='64' hash='e0055d99adb0e173' id='type-id-206'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-type>
    <!-- Length (tcmalloc::PageHeap::*) (Length) -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='91495cdf6321a116' id='type-id-208'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- parameter of type 'typedef Length' -->
      <parameter type-id='type-id-192'/>
      <!-- typedef Length -->
      <return type-id='type-id-192'/>
    </function-type>
    <!-- Length (tcmalloc::PageHeap::*) (tcmalloc::PageHeap::SpanList*) -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='e0bb13d58b9d984f' id='type-id-209'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- parameter of type 'tcmalloc::PageHeap::SpanList*' -->
      <parameter type-id='type-id-194'/>
      <!-- typedef Length -->
      <return type-id='type-id-192'/>
    </function-type>
    <!-- bool (tcmalloc::CentralFreeList::*) () -->
    <function-type method-class-id='type-id-210' size-in-bits='64' hash='c7c710e908194b91' id='type-id-211'>
      <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
      <parameter type-id='type-id-183' is-artificial='yes'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- bool (tcmalloc::CentralFreeList::*) (int, bool) -->
    <function-type method-class-id='type-id-210' size-in-bits='64' hash='6e5147834edeef47' id='type-id-212'>
      <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
      <parameter type-id='type-id-183' is-artificial='yes'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'bool' -->
      <parameter type-id='type-id-59'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- bool (tcmalloc::CentralFreeList::*) (int, bool) -->
    <function-type method-class-id='type-id-210' size-in-bits='64' hash='6e5147834edeef47#2' id='type-id-213'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'bool' -->
      <parameter type-id='type-id-59'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- bool (tcmalloc::PageHeap::*) () -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='c7c710e908194b91' id='type-id-214'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- bool (tcmalloc::PageHeap::*) (Length) -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='7e544b18f5e89a62' id='type-id-215'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- parameter of type 'typedef Length' -->
      <parameter type-id='type-id-192'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- bool (tcmalloc::PageHeap::*) (Length, bool) -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='edf93e0e926f2972' id='type-id-216'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- parameter of type 'typedef Length' -->
      <parameter type-id='type-id-192'/>
      <!-- parameter of type 'bool' -->
      <parameter type-id='type-id-59'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- bool (tcmalloc::PageHeap::*) (PageID, base::MallocRange*) -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='49299f0d79243915' id='type-id-217'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- parameter of type 'typedef PageID' -->
      <parameter type-id='type-id-190'/>
      <!-- parameter of type 'base::MallocRange*' -->
      <parameter type-id='type-id-191'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- bool (tcmalloc::PageHeap::*) (tcmalloc::Span*) -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='b836a24ffbd86a3b' id='type-id-218'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- parameter of type 'tcmalloc::Span*' -->
      <parameter type-id='type-id-188'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- bool (tcmalloc::PageHeap::*) (tcmalloc::Span*, Length, Length, int) -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='c0f70e7895fb5be5' id='type-id-219'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- parameter of type 'tcmalloc::Span*' -->
      <parameter type-id='type-id-188'/>
      <!-- parameter of type 'typedef Length' -->
      <parameter type-id='type-id-192'/>
      <!-- parameter of type 'typedef Length' -->
      <parameter type-id='type-id-192'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- bool (tcmalloc::PageHeap::*) (tcmalloc::Span*, tcmalloc::Span*) -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='37bb0ff623f303ce' id='type-id-220'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- parameter of type 'tcmalloc::Span*' -->
      <parameter type-id='type-id-188'/>
      <!-- parameter of type 'tcmalloc::Span*' -->
      <parameter type-id='type-id-188'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- int (tcmalloc::CentralFreeList::*) () -->
    <function-type method-class-id='type-id-210' size-in-bits='64' hash='388da3fa973fde78' id='type-id-221'>
      <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
      <parameter type-id='type-id-183' is-artificial='yes'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- int (tcmalloc::CentralFreeList::*) (int, void**, void**) -->
    <function-type method-class-id='type-id-210' size-in-bits='64' hash='05583901df42bd48' id='type-id-222'>
      <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
      <parameter type-id='type-id-183' is-artificial='yes'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-184'/>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-184'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- int (tcmalloc::CentralFreeList::*) (void**, void**, int) -->
    <function-type method-class-id='type-id-210' size-in-bits='64' hash='14b2e307a32069c0' id='type-id-223'>
      <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
      <parameter type-id='type-id-183' is-artificial='yes'/>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-184'/>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-184'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- int (tcmalloc::SizeMap::*) (size_t) -->
    <function-type method-class-id='type-id-224' size-in-bits='64' hash='b6a97d07f8261bc0' id='type-id-225'>
      <!-- implicit parameter of type 'tcmalloc::SizeMap*' -->
      <parameter type-id='type-id-203' is-artificial='yes'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- size_t (tcmalloc::CentralFreeList::*) () -->
    <function-type method-class-id='type-id-210' size-in-bits='64' hash='e0055d99adb0e173' id='type-id-226'>
      <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
      <parameter type-id='type-id-183' is-artificial='yes'/>
      <!-- typedef size_t -->
      <return type-id='type-id-61'/>
    </function-type>
    <!-- tcmalloc::Span* (tcmalloc::PageHeap::*) (Length) -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='ebab2e40fedd1db3' id='type-id-227'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- parameter of type 'typedef Length' -->
      <parameter type-id='type-id-192'/>
      <!-- tcmalloc::Span* -->
      <return type-id='type-id-188'/>
    </function-type>
    <!-- tcmalloc::Span* (tcmalloc::PageHeap::*) (tcmalloc::Span*, Length) -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='8a9780a59468e315' id='type-id-228'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- parameter of type 'tcmalloc::Span*' -->
      <parameter type-id='type-id-188'/>
      <!-- parameter of type 'typedef Length' -->
      <parameter type-id='type-id-192'/>
      <!-- tcmalloc::Span* -->
      <return type-id='type-id-188'/>
    </function-type>
    <!-- void (tcmalloc::CentralFreeList::*) () -->
    <function-type method-class-id='type-id-210' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-229'>
      <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
      <parameter type-id='type-id-183' is-artificial='yes'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::CentralFreeList::*) (size_t) -->
    <function-type method-class-id='type-id-210' size-in-bits='64' hash='e0055d99adb0e173' id='type-id-230'>
      <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
      <parameter type-id='type-id-183' is-artificial='yes'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::CentralFreeList::*) (void*) -->
    <function-type method-class-id='type-id-210' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-231'>
      <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
      <parameter type-id='type-id-183' is-artificial='yes'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::CentralFreeList::*) (void*, void*, int) -->
    <function-type method-class-id='type-id-210' size-in-bits='64' hash='388da3fa973fde78' id='type-id-232'>
      <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
      <parameter type-id='type-id-183' is-artificial='yes'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::PageHeap::*) () -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-233'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::PageHeap::*) (Length) -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='e0055d99adb0e173' id='type-id-234'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- parameter of type 'typedef Length' -->
      <parameter type-id='type-id-192'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::PageHeap::*) (tcmalloc::PageHeap::LargeSpanStats*) -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='5287c32193a057e7' id='type-id-235'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- parameter of type 'tcmalloc::PageHeap::LargeSpanStats*' -->
      <parameter type-id='type-id-189'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::PageHeap::*) (tcmalloc::PageHeap::SmallSpanStats*) -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='988bbfba08aca7f1' id='type-id-236'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- parameter of type 'tcmalloc::PageHeap::SmallSpanStats*' -->
      <parameter type-id='type-id-193'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::PageHeap::*) (tcmalloc::Span*) -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='e089691e785388d9' id='type-id-237'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- parameter of type 'tcmalloc::Span*' -->
      <parameter type-id='type-id-188'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::PageHeap::*) (tcmalloc::Span*, size_t) -->
    <function-type method-class-id='type-id-207' size-in-bits='64' hash='ebab2e40fedd1db3' id='type-id-238'>
      <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
      <parameter type-id='type-id-187' is-artificial='yes'/>
      <!-- parameter of type 'tcmalloc::Span*' -->
      <parameter type-id='type-id-188'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::SizeMap::*) () -->
    <function-type method-class-id='type-id-224' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-239'>
      <!-- implicit parameter of type 'tcmalloc::SizeMap*' -->
      <parameter type-id='type-id-203' is-artificial='yes'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::Static::*) (void) -->
    <function-type method-class-id='type-id-240' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-241'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/common.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- namespace base -->
    <namespace-decl name='base'>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- int tcmalloc::AlignmentForSize(size_t) -->
      <function-decl name='AlignmentForSize' mangled-name='_ZN8tcmalloc16AlignmentForSizeEm' filepath='src/common.cc' line='77' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc16AlignmentForSizeEm' hash='b6a97d07f8261bc0'>
        <!-- parameter of type 'typedef size_t' -->
        <parameter type-id='type-id-61'/>
        <!-- int -->
        <return type-id='type-id-1'/>
      </function-decl>
      <!-- void* tcmalloc::MetaDataAlloc(size_t) -->
      <function-decl name='MetaDataAlloc' mangled-name='_ZN8tcmalloc13MetaDataAllocEm' filepath='src/common.cc' line='233' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc13MetaDataAllocEm' hash='e0055d99adb0e173'>
        <!-- parameter of type 'typedef size_t' -->
        <parameter type-id='type-id-61'/>
        <!-- void* -->
        <return type-id='type-id-56'/>
      </function-decl>
      <!-- uint64_t tcmalloc::metadata_system_bytes() -->
      <function-decl name='metadata_system_bytes' mangled-name='_ZN8tcmalloc21metadata_system_bytesEv' filepath='src/common.cc' line='274' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc21metadata_system_bytesEv' hash='e0055d99adb0e173'>
        <!-- typedef uint64_t -->
        <return type-id='type-id-16'/>
      </function-decl>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/heap-checker-bcad.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- class HeapLeakCheckerGlobalPrePost -->
    <class-decl name='HeapLeakCheckerGlobalPrePost' visibility='default' size-in-bits='8' filepath='src/heap-checker-bcad.cc' line='60' column='1' hash='8d1ad826c51051b3' id='type-id-242'>
      <data-member access='public' static='yes'>
        <!-- static int HeapLeakCheckerGlobalPrePost::count_ -->
        <var-decl name='count_' type-id='type-id-1' mangled-name='_ZN28HeapLeakCheckerGlobalPrePost6count_E' visibility='default' filepath='src/heap-checker-bcad.cc' line='90' column='1' elf-symbol-id='_ZN28HeapLeakCheckerGlobalPrePost6count_E'/>
      </data-member>
      <member-function access='private' destructor='yes'>
        <!-- HeapLeakCheckerGlobalPrePost::~HeapLeakCheckerGlobalPrePost() -->
        <function-decl name='~HeapLeakCheckerGlobalPrePost' mangled-name='_ZN28HeapLeakCheckerGlobalPrePostD1Ev' filepath='src/heap-checker-bcad.cc' line='79' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN28HeapLeakCheckerGlobalPrePostD1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'HeapLeakCheckerGlobalPrePost*' -->
          <parameter type-id='type-id-243' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- HeapLeakCheckerGlobalPrePost* -->
    <pointer-type-def type-id='type-id-242' size-in-bits='64' hash='a621862bcbe54005' id='type-id-243'/>
    <!-- HeapLeakCheckerGlobalPrePost* const -->
    <qualified-type-def type-id='type-id-243' const='yes' hash='5237db837ff51788' id='type-id-244'/>
    <!-- bool heap_leak_checker_bcad_variable -->
    <var-decl name='heap_leak_checker_bcad_variable' type-id='type-id-59' mangled-name='heap_leak_checker_bcad_variable' visibility='default' filepath='src/heap-checker-bcad.cc' line='53' column='1' elf-symbol-id='heap_leak_checker_bcad_variable'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/heap-checker.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- AtomicWord[8] -->
    <array-type-def dimensions='1' type-id='type-id-245' size-in-bits='512' hash='ecac7e1584aeceef#2' id='type-id-246'>
      <!-- <anonymous range>[8] -->
      <subrange length='8' lower-bound='0' upper-bound='7' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='6e87a8ff484907ad' id='type-id-247'/>
    </array-type-def>
    <!-- class AddressMap<HeapProfileTable::AllocValue> -->
    <class-decl name='AddressMap&lt;HeapProfileTable::AllocValue&gt;' visibility='default' size-in-bits='320' filepath='src/addressmap-inl.h' line='104' column='1' hash='6eacb0f56ba1e983' id='type-id-248'>
      <member-type access='private'>
        <!-- struct AddressMap<HeapProfileTable::AllocValue>::Cluster -->
        <class-decl name='Cluster' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-249'/>
      </member-type>
      <member-type access='private'>
        <!-- struct AddressMap<HeapProfileTable::AllocValue>::Entry -->
        <class-decl name='Entry' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-250'/>
      </member-type>
      <member-type access='private'>
        <!-- struct AddressMap<HeapProfileTable::AllocValue>::Object -->
        <class-decl name='Object' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-251'/>
      </member-type>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- AddressMap<HeapProfileTable::AllocValue>::Cluster** AddressMap<HeapProfileTable::AllocValue>::hashtable_ -->
        <var-decl name='hashtable_' type-id='type-id-252' visibility='default' filepath='src/addressmap-inl.h' line='193' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- AddressMap<HeapProfileTable::AllocValue>::Entry* AddressMap<HeapProfileTable::AllocValue>::free_ -->
        <var-decl name='free_' type-id='type-id-253' visibility='default' filepath='src/addressmap-inl.h' line='194' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- void* (* AddressMap<HeapProfileTable::AllocValue>::alloc_)(unsigned long int) -->
        <var-decl name='alloc_' type-id='type-id-254' visibility='default' filepath='src/addressmap-inl.h' line='251' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='192'>
        <!-- void (* AddressMap<HeapProfileTable::AllocValue>::dealloc_)(void*) -->
        <var-decl name='dealloc_' type-id='type-id-255' visibility='default' filepath='src/addressmap-inl.h' line='252' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='256'>
        <!-- AddressMap<HeapProfileTable::AllocValue>::Object* AddressMap<HeapProfileTable::AllocValue>::allocated_ -->
        <var-decl name='allocated_' type-id='type-id-256' visibility='default' filepath='src/addressmap-inl.h' line='253' column='1'/>
      </data-member>
      <member-function access='private'>
        <!-- void AddressMap<HeapProfileTable::AllocValue>::AddressMap(void* (*)(unsigned long int), void (*)(void*)) -->
        <function-decl name='AddressMap' mangled-name='_ZN10AddressMapIN16HeapProfileTable10AllocValueEEC2EPFPvmEPFvS3_E' filepath='src/addressmap-inl.h' line='271' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10AddressMapIN16HeapProfileTable10AllocValueEEC2EPFPvmEPFvS3_E' hash='e7946129631a25a2'>
          <!-- implicit parameter of type 'AddressMap<HeapProfileTable::AllocValue>*' -->
          <parameter type-id='type-id-257' is-artificial='yes'/>
          <!-- parameter of type 'void* (*)(unsigned long int)' -->
          <parameter type-id='type-id-254'/>
          <!-- parameter of type 'void (*)(void*)' -->
          <parameter type-id='type-id-255'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void AddressMap<HeapProfileTable::AllocValue>::Insert(void*, HeapProfileTable::AllocValue) -->
        <function-decl name='Insert' mangled-name='_ZN10AddressMapIN16HeapProfileTable10AllocValueEE6InsertEPKvS1_' filepath='src/addressmap-inl.h' line='309' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10AddressMapIN16HeapProfileTable10AllocValueEE6InsertEPKvS1_' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'AddressMap<HeapProfileTable::AllocValue>*' -->
          <parameter type-id='type-id-257' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'struct HeapProfileTable::AllocValue' -->
          <parameter type-id='type-id-258'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class GoogleInitializer -->
    <class-decl name='GoogleInitializer' visibility='default' size-in-bits='128' filepath='src/base/googleinit.h' line='39' column='1' hash='44f5dfa25db33174' id='type-id-259'>
      <member-type access='private'>
        <!-- typedef void (*)(void) GoogleInitializer::VoidFunction -->
        <typedef-decl name='VoidFunction' type-id='type-id-261' size-in-bits='64' filepath='./src/base/googleinit.h' line='41' column='1' hash='fd7a63c0c6c822c4' id='type-id-260'/>
      </member-type>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- const char* const GoogleInitializer::name_ -->
        <var-decl name='name_' type-id='type-id-262' visibility='default' filepath='src/base/googleinit.h' line='55' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- const GoogleInitializer::VoidFunction GoogleInitializer::destructor_ -->
        <var-decl name='destructor_' type-id='type-id-263' visibility='default' filepath='src/base/googleinit.h' line='56' column='1'/>
      </data-member>
      <member-function access='private' destructor='yes'>
        <!-- GoogleInitializer::~GoogleInitializer() -->
        <function-decl name='~GoogleInitializer' mangled-name='_ZN17GoogleInitializerD2Ev' filepath='src/base/googleinit.h' line='48' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN17GoogleInitializerD2Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'GoogleInitializer*' -->
          <parameter type-id='type-id-264' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- GoogleInitializer::~GoogleInitializer() -->
        <function-decl name='~GoogleInitializer' mangled-name='_ZN17GoogleInitializerD2Ev' filepath='src/base/googleinit.h' line='48' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN17GoogleInitializerD2Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'GoogleInitializer*' -->
          <parameter type-id='type-id-264' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- GoogleInitializer::~GoogleInitializer() -->
        <function-decl name='~GoogleInitializer' mangled-name='_ZN17GoogleInitializerD2Ev' filepath='src/base/googleinit.h' line='48' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN17GoogleInitializerD2Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'GoogleInitializer*' -->
          <parameter type-id='type-id-264' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- GoogleInitializer::~GoogleInitializer() -->
        <function-decl name='~GoogleInitializer' mangled-name='_ZN17GoogleInitializerD2Ev' filepath='src/base/googleinit.h' line='48' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN17GoogleInitializerD2Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'GoogleInitializer*' -->
          <parameter type-id='type-id-264' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- GoogleInitializer::~GoogleInitializer() -->
        <function-decl name='~GoogleInitializer' mangled-name='_ZN17GoogleInitializerD2Ev' filepath='src/base/googleinit.h' line='48' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN17GoogleInitializerD2Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'GoogleInitializer*' -->
          <parameter type-id='type-id-264' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- GoogleInitializer::~GoogleInitializer() -->
        <function-decl name='~GoogleInitializer' mangled-name='_ZN17GoogleInitializerD2Ev' filepath='src/base/googleinit.h' line='48' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN17GoogleInitializerD2Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'GoogleInitializer*' -->
          <parameter type-id='type-id-264' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- GoogleInitializer::~GoogleInitializer() -->
        <function-decl name='~GoogleInitializer' mangled-name='_ZN17GoogleInitializerD2Ev' filepath='./src/base/googleinit.h' line='48' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN17GoogleInitializerD2Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'GoogleInitializer*' -->
          <parameter type-id='type-id-264' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- GoogleInitializer::~GoogleInitializer() -->
        <function-decl name='~GoogleInitializer' mangled-name='_ZN17GoogleInitializerD2Ev' filepath='src/base/googleinit.h' line='48' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN17GoogleInitializerD2Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'GoogleInitializer*' -->
          <parameter type-id='type-id-264' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class HeapCleaner -->
    <class-decl name='HeapCleaner' visibility='default' size-in-bits='8' filepath='./src/gperftools/heap-checker.h' line='403' column='1' hash='c1c248c574bcc05a' id='type-id-265'>
      <member-type access='private'>
        <!-- typedef void (*)(void) HeapCleaner::void_function -->
        <typedef-decl name='void_function' type-id='type-id-261' size-in-bits='64' filepath='./src/gperftools/heap-checker.h' line='405' column='1' hash='fd7a63c0c6c822c4' id='type-id-266'/>
      </member-type>
      <data-member access='public' static='yes'>
        <!-- static std::vector<void (*)(), std::allocator<void (*)()> >* HeapCleaner::heap_cleanups_ -->
        <var-decl name='heap_cleanups_' type-id='type-id-267' mangled-name='_ZN11HeapCleaner14heap_cleanups_E' visibility='default' filepath='src/heap-checker.cc' line='1906' column='1' elf-symbol-id='_ZN11HeapCleaner14heap_cleanups_E'/>
      </data-member>
      <member-function access='private' static='yes'>
        <!-- void HeapCleaner::RunHeapCleanups() -->
        <function-decl name='RunHeapCleanups' mangled-name='_ZN11HeapCleaner15RunHeapCleanupsEv' filepath='src/heap-checker.cc' line='1917' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11HeapCleaner15RunHeapCleanupsEv' hash='7f32ffea222edbe7'>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- HeapCleaner::HeapCleaner(HeapCleaner::void_function) -->
        <function-decl name='HeapCleaner' mangled-name='_ZN11HeapCleanerC1EPFvvE' filepath='src/heap-checker.cc' line='1910' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11HeapCleanerC1EPFvvE' hash='5695f5ce05a4c55f'>
          <!-- implicit parameter of type 'HeapCleaner*' -->
          <parameter type-id='type-id-268' is-artificial='yes'/>
          <!-- parameter of type 'typedef HeapCleaner::void_function' -->
          <parameter type-id='type-id-266'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class HeapLeakChecker -->
    <class-decl name='HeapLeakChecker' visibility='default' size-in-bits='448' filepath='src/gperftools/heap-checker.h' line='78' column='1' hash='58e4a70268cc98a3' id='type-id-269'>
      <member-type access='private'>
        <!-- class HeapLeakChecker::Disabler -->
        <class-decl name='Disabler' visibility='default' size-in-bits='8' filepath='./src/gperftools/heap-checker.h' line='175' column='1' hash='292407e770723063' id='type-id-270'>
          <member-function access='private' destructor='yes'>
            <!-- HeapLeakChecker::Disabler::~Disabler() -->
            <function-decl name='~Disabler' mangled-name='_ZN15HeapLeakChecker8DisablerD1Ev' filepath='src/heap-checker.cc' line='516' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker8DisablerD1Ev' hash='7f32ffea222edbe7'>
              <!-- implicit parameter of type 'HeapLeakChecker::Disabler*' -->
              <parameter type-id='type-id-271' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-58'/>
            </function-decl>
          </member-function>
          <member-function access='private' constructor='yes'>
            <!-- HeapLeakChecker::Disabler::Disabler() -->
            <function-decl name='Disabler' mangled-name='_ZN15HeapLeakChecker8DisablerC1Ev' filepath='src/heap-checker.cc' line='507' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker8DisablerC1Ev' hash='7f32ffea222edbe7'>
              <!-- implicit parameter of type 'HeapLeakChecker::Disabler*' -->
              <parameter type-id='type-id-271' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-58'/>
            </function-decl>
          </member-function>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- enum HeapLeakChecker::ProcMapsResult -->
        <enum-decl name='ProcMapsResult' size-in-bits='32' alignment-in-bits='32' filepath='./src/gperftools/heap-checker.h' line='301' column='1' hash='5acc66b484e08503' id='type-id-272'>
          <underlying-type type-id='type-id-93'/>
          <enumerator name='PROC_MAPS_USED' value='0'/>
          <enumerator name='CANT_OPEN_PROC_MAPS' value='1'/>
          <enumerator name='NO_SHARED_LIBS_IN_PROC_MAPS' value='2'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- enum HeapLeakChecker::ProcMapsTask -->
        <enum-decl name='ProcMapsTask' size-in-bits='32' alignment-in-bits='32' filepath='./src/gperftools/heap-checker.h' line='295' column='1' hash='5d48bb902be64192' id='type-id-273'>
          <underlying-type type-id='type-id-93'/>
          <enumerator name='RECORD_GLOBAL_DATA' value='0'/>
          <enumerator name='DISABLE_LIBRARY_ALLOCS' value='1'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- enum HeapLeakChecker::ShouldSymbolize -->
        <enum-decl name='ShouldSymbolize' size-in-bits='32' alignment-in-bits='32' filepath='./src/gperftools/heap-checker.h' line='225' column='1' hash='40841eec60d1b1b9' id='type-id-274'>
          <underlying-type type-id='type-id-93'/>
          <enumerator name='SYMBOLIZE' value='0'/>
          <enumerator name='DO_NOT_SYMBOLIZE' value='1'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapLeakChecker::Allocator -->
        <class-decl name='Allocator' is-struct='yes' visibility='default' size-in-bits='8' filepath='src/heap-checker.cc' line='292' column='1' hash='9db6034888da57eb' id='type-id-275'>
          <data-member access='public' static='yes'>
            <!-- static LowLevelAlloc::Arena* HeapLeakChecker::Allocator::arena_ -->
            <var-decl name='arena_' type-id='type-id-87' mangled-name='_ZN15HeapLeakChecker9Allocator6arena_E' visibility='default' filepath='src/heap-checker.cc' line='337' column='1' elf-symbol-id='_ZN15HeapLeakChecker9Allocator6arena_E'/>
          </data-member>
          <data-member access='public' static='yes'>
            <!-- static int HeapLeakChecker::Allocator::alloc_count_ -->
            <var-decl name='alloc_count_' type-id='type-id-1' mangled-name='_ZN15HeapLeakChecker9Allocator12alloc_count_E' visibility='default' filepath='src/heap-checker.cc' line='338' column='1' elf-symbol-id='_ZN15HeapLeakChecker9Allocator12alloc_count_E'/>
          </data-member>
          <member-function access='public' static='yes'>
            <!-- void* HeapLeakChecker::Allocator::Allocate() -->
            <function-decl name='Allocate' mangled-name='_ZN15HeapLeakChecker9Allocator8AllocateEm' filepath='src/heap-checker.cc' line='309' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker9Allocator8AllocateEm' hash='e0055d99adb0e173'>
              <!-- parameter of type 'typedef size_t' -->
              <parameter type-id='type-id-61'/>
              <!-- void* -->
              <return type-id='type-id-56'/>
            </function-decl>
          </member-function>
          <member-function access='public' static='yes'>
            <!-- void HeapLeakChecker::Allocator::Free() -->
            <function-decl name='Free' mangled-name='_ZN15HeapLeakChecker9Allocator4FreeEPv' filepath='src/heap-checker.cc' line='315' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker9Allocator4FreeEPv' hash='7f32ffea222edbe7'>
              <!-- parameter of type 'void*' -->
              <parameter type-id='type-id-56'/>
              <!-- void -->
              <return type-id='type-id-58'/>
            </function-decl>
          </member-function>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapLeakChecker::RangeValue -->
        <class-decl name='RangeValue' is-struct='yes' visibility='default' size-in-bits='128' filepath='src/heap-checker.cc' line='404' column='1' hash='4f3e20a025af33d8' id='type-id-276'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- uintptr_t HeapLeakChecker::RangeValue::start_address -->
            <var-decl name='start_address' type-id='type-id-277' visibility='default' filepath='src/heap-checker.cc' line='405' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- int HeapLeakChecker::RangeValue::max_depth -->
            <var-decl name='max_depth' type-id='type-id-1' visibility='default' filepath='src/heap-checker.cc' line='406' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- SpinLock* HeapLeakChecker::lock_ -->
        <var-decl name='lock_' type-id='type-id-104' visibility='default' filepath='./src/gperftools/heap-checker.h' line='358' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- const char* HeapLeakChecker::name_ -->
        <var-decl name='name_' type-id='type-id-60' visibility='default' filepath='./src/gperftools/heap-checker.h' line='359' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- void* HeapLeakChecker::start_snapshot_ -->
        <var-decl name='start_snapshot_' type-id='type-id-56' visibility='default' filepath='./src/gperftools/heap-checker.h' line='365' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='192'>
        <!-- bool HeapLeakChecker::has_checked_ -->
        <var-decl name='has_checked_' type-id='type-id-59' visibility='default' filepath='./src/gperftools/heap-checker.h' line='367' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='256'>
        <!-- ssize_t HeapLeakChecker::inuse_bytes_increase_ -->
        <var-decl name='inuse_bytes_increase_' type-id='type-id-278' visibility='default' filepath='./src/gperftools/heap-checker.h' line='368' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='320'>
        <!-- ssize_t HeapLeakChecker::inuse_allocs_increase_ -->
        <var-decl name='inuse_allocs_increase_' type-id='type-id-278' visibility='default' filepath='./src/gperftools/heap-checker.h' line='369' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='384'>
        <!-- bool HeapLeakChecker::keep_profiles_ -->
        <var-decl name='keep_profiles_' type-id='type-id-59' visibility='default' filepath='./src/gperftools/heap-checker.h' line='371' column='1'/>
      </data-member>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::DisableChecksIn() -->
        <function-decl name='DisableChecksIn' mangled-name='_ZN15HeapLeakChecker15DisableChecksInEPKc' filepath='src/heap-checker.cc' line='1514' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker15DisableChecksInEPKc' hash='53885bde0aa65efe#2'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::BeforeConstructorsLocked() -->
        <function-decl name='BeforeConstructorsLocked' mangled-name='_ZN15HeapLeakChecker24BeforeConstructorsLockedEv' filepath='src/heap-checker.cc' line='2203' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker24BeforeConstructorsLockedEv' hash='7f32ffea222edbe7'>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- char* HeapLeakChecker::MakeProfileNameLocked() -->
        <function-decl name='MakeProfileNameLocked' mangled-name='_ZN15HeapLeakChecker21MakeProfileNameLockedEv' filepath='src/heap-checker.cc' line='1564' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker21MakeProfileNameLockedEv' hash='02a096d257a5e00d'>
          <!-- implicit parameter of type 'HeapLeakChecker*' -->
          <parameter type-id='type-id-279' is-artificial='yes'/>
          <!-- char* -->
          <return type-id='type-id-130'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::DisableChecksFromToLocked(void*, int) -->
        <function-decl name='DisableChecksFromToLocked' mangled-name='_ZN15HeapLeakChecker25DisableChecksFromToLockedEPKvS1_i' filepath='src/heap-checker.cc' line='2336' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker25DisableChecksFromToLockedEPKvS1_i' hash='388da3fa973fde78'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::DisableLibraryAllocsLocked(uintptr_t, uintptr_t) -->
        <function-decl name='DisableLibraryAllocsLocked' mangled-name='_ZN15HeapLeakChecker26DisableLibraryAllocsLockedEPKcmm' filepath='src/heap-checker.cc' line='827' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker26DisableLibraryAllocsLockedEPKcmm' hash='528fd71af1a2ca2e'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- parameter of type 'typedef uintptr_t' -->
          <parameter type-id='type-id-277'/>
          <!-- parameter of type 'typedef uintptr_t' -->
          <parameter type-id='type-id-277'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::TurnItselfOffLocked() -->
        <function-decl name='TurnItselfOffLocked' mangled-name='_ZN15HeapLeakChecker19TurnItselfOffLockedEv' filepath='src/heap-checker.cc' line='2229' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker19TurnItselfOffLockedEv' hash='7f32ffea222edbe7'>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::IgnoreLiveObjectsLocked(const char*) -->
        <function-decl name='IgnoreLiveObjectsLocked' mangled-name='_ZN15HeapLeakChecker23IgnoreLiveObjectsLockedEPKcS1_' filepath='src/heap-checker.cc' line='1392' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker23IgnoreLiveObjectsLockedEPKcS1_' hash='3d5693612af11c46'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void* HeapLeakChecker::GetAllocCaller() -->
        <function-decl name='GetAllocCaller' mangled-name='_ZN15HeapLeakChecker14GetAllocCallerEPv' filepath='src/heap-checker.cc' line='2380' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker14GetAllocCallerEPv' hash='7f32ffea222edbe7'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- void* -->
          <return type-id='type-id-56'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::CancelGlobalCheck() -->
        <function-decl name='CancelGlobalCheck' mangled-name='_ZN15HeapLeakChecker17CancelGlobalCheckEv' filepath='src/heap-checker.cc' line='2193' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker17CancelGlobalCheckEv' hash='7f32ffea222edbe7'>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- HeapLeakChecker* HeapLeakChecker::GlobalChecker() -->
        <function-decl name='GlobalChecker' mangled-name='_ZN15HeapLeakChecker13GlobalCheckerEv' filepath='src/heap-checker.cc' line='2181' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker13GlobalCheckerEv' hash='99664fa74c8b5886'>
          <!-- HeapLeakChecker* -->
          <return type-id='type-id-279'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool HeapLeakChecker::IsActive() -->
        <function-decl name='IsActive' mangled-name='_ZN15HeapLeakChecker8IsActiveEv' filepath='src/heap-checker.cc' line='1901' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker8IsActiveEv' hash='c7c710e908194b91'>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- ssize_t HeapLeakChecker::ObjectsLeaked() -->
        <function-decl name='ObjectsLeaked' mangled-name='_ZNK15HeapLeakChecker13ObjectsLeakedEv' filepath='src/heap-checker.cc' line='1645' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK15HeapLeakChecker13ObjectsLeakedEv' hash='52c0efb08d2aa513'>
          <!-- implicit parameter of type 'const HeapLeakChecker*' -->
          <parameter type-id='type-id-280' is-artificial='yes'/>
          <!-- typedef ssize_t -->
          <return type-id='type-id-278'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- ssize_t HeapLeakChecker::BytesLeaked() -->
        <function-decl name='BytesLeaked' mangled-name='_ZNK15HeapLeakChecker11BytesLeakedEv' filepath='src/heap-checker.cc' line='1637' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK15HeapLeakChecker11BytesLeakedEv' hash='52c0efb08d2aa513'>
          <!-- implicit parameter of type 'const HeapLeakChecker*' -->
          <parameter type-id='type-id-280' is-artificial='yes'/>
          <!-- typedef ssize_t -->
          <return type-id='type-id-278'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::UnIgnoreObject() -->
        <function-decl name='UnIgnoreObject' mangled-name='_ZN15HeapLeakChecker14UnIgnoreObjectEPKv' filepath='src/heap-checker.cc' line='1539' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker14UnIgnoreObjectEPKv' hash='7f32ffea222edbe7'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- HeapLeakChecker::~HeapLeakChecker() -->
        <function-decl name='~HeapLeakChecker' mangled-name='_ZN15HeapLeakCheckerD1Ev' filepath='src/heap-checker.cc' line='1875' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakCheckerD1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'HeapLeakChecker*' -->
          <parameter type-id='type-id-279' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::IgnoreNonThreadLiveObjectsLocked() -->
        <function-decl name='IgnoreNonThreadLiveObjectsLocked' mangled-name='_ZN15HeapLeakChecker32IgnoreNonThreadLiveObjectsLockedEv' filepath='src/heap-checker.cc' line='1093' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker32IgnoreNonThreadLiveObjectsLockedEv' hash='7f32ffea222edbe7'>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::DoIgnoreObject() -->
        <function-decl name='DoIgnoreObject' mangled-name='_ZN15HeapLeakChecker14DoIgnoreObjectEPKv' filepath='src/heap-checker.cc' line='1519' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker14DoIgnoreObjectEPKv' hash='7f32ffea222edbe7'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void HeapLeakChecker::Create(const char*, bool) -->
        <function-decl name='Create' mangled-name='_ZN15HeapLeakChecker6CreateEPKcb' filepath='src/heap-checker.cc' line='1576' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker6CreateEPKcb' hash='1d691fe62b812ee9'>
          <!-- implicit parameter of type 'HeapLeakChecker*' -->
          <parameter type-id='type-id-279' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-59'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- HeapLeakChecker::HeapLeakChecker() -->
        <function-decl name='HeapLeakChecker' mangled-name='_ZN15HeapLeakCheckerC1Ev' filepath='src/heap-checker.cc' line='1621' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakCheckerC1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'HeapLeakChecker*' -->
          <parameter type-id='type-id-279' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- HeapLeakChecker::HeapLeakChecker(const char*) -->
        <function-decl name='HeapLeakChecker' mangled-name='_ZN15HeapLeakCheckerC1EPKc' filepath='src/heap-checker.cc' line='1616' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakCheckerC1EPKc' hash='53885bde0aa65efe'>
          <!-- implicit parameter of type 'HeapLeakChecker*' -->
          <parameter type-id='type-id-279' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- HeapLeakChecker::ProcMapsResult HeapLeakChecker::UseProcMapsLocked() -->
        <function-decl name='UseProcMapsLocked' mangled-name='_ZN15HeapLeakChecker17UseProcMapsLockedENS_12ProcMapsTaskE' filepath='src/heap-checker.cc' line='892' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker17UseProcMapsLockedENS_12ProcMapsTaskE' hash='6c1520210560e52a'>
          <!-- parameter of type 'enum HeapLeakChecker::ProcMapsTask' -->
          <parameter type-id='type-id-273'/>
          <!-- enum HeapLeakChecker::ProcMapsResult -->
          <return type-id='type-id-272'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- int HeapLeakChecker::IgnoreLiveThreadsLocked(int, pid_t*, typedef __va_list_tag __va_list_tag*) -->
        <function-decl name='IgnoreLiveThreadsLocked' mangled-name='_ZN15HeapLeakChecker23IgnoreLiveThreadsLockedEPviPiP13__va_list_tag' filepath='src/heap-checker.cc' line='1021' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker23IgnoreLiveThreadsLockedEPviPiP13__va_list_tag' hash='60f7fa789d54ab1c'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'pid_t*' -->
          <parameter type-id='type-id-79'/>
          <!-- parameter of type 'typedef __va_list_tag __va_list_tag*' -->
          <parameter type-id='type-id-80'/>
          <!-- int -->
          <return type-id='type-id-1'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::IgnoreAllLiveObjectsLocked() -->
        <function-decl name='IgnoreAllLiveObjectsLocked' mangled-name='_ZN15HeapLeakChecker26IgnoreAllLiveObjectsLockedEPKv' filepath='src/heap-checker.cc' line='1261' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker26IgnoreAllLiveObjectsLockedEPKv' hash='7f32ffea222edbe7'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool HeapLeakChecker::DoNoLeaks(HeapLeakChecker::ShouldSymbolize) -->
        <function-decl name='DoNoLeaks' mangled-name='_ZN15HeapLeakChecker9DoNoLeaksENS_15ShouldSymbolizeE' filepath='src/heap-checker.cc' line='1712' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker9DoNoLeaksENS_15ShouldSymbolizeE' hash='201b9a45c4cc743f'>
          <!-- implicit parameter of type 'HeapLeakChecker*' -->
          <parameter type-id='type-id-279' is-artificial='yes'/>
          <!-- parameter of type 'enum HeapLeakChecker::ShouldSymbolize' -->
          <parameter type-id='type-id-274'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool HeapLeakChecker::NoGlobalLeaksMaybeSymbolize() -->
        <function-decl name='NoGlobalLeaksMaybeSymbolize' mangled-name='_ZN15HeapLeakChecker27NoGlobalLeaksMaybeSymbolizeENS_15ShouldSymbolizeE' filepath='src/heap-checker.cc' line='2141' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker27NoGlobalLeaksMaybeSymbolizeENS_15ShouldSymbolizeE' hash='201b9a45c4cc743f#2'>
          <!-- parameter of type 'enum HeapLeakChecker::ShouldSymbolize' -->
          <parameter type-id='type-id-274'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool HeapLeakChecker::NoGlobalLeaks() -->
        <function-decl name='NoGlobalLeaks' mangled-name='_ZN15HeapLeakChecker13NoGlobalLeaksEv' filepath='src/heap-checker.cc' line='2187' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker13NoGlobalLeaksEv' hash='c7c710e908194b91'>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool HeapLeakChecker::DoMainHeapCheck() -->
        <function-decl name='DoMainHeapCheck' mangled-name='_ZN15HeapLeakChecker15DoMainHeapCheckEv' filepath='src/heap-checker.cc' line='2153' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker15DoMainHeapCheckEv' hash='c7c710e908194b91'>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class HeapProfileTable -->
    <class-decl name='HeapProfileTable' visibility='default' size-in-bits='832' filepath='src/heap-profile-table.h' line='51' column='1' hash='345094956414ce3a' id='type-id-281'>
      <member-type access='private'>
        <!-- struct HeapProfileTable::AddNonLiveArgs -->
        <class-decl name='AddNonLiveArgs' is-struct='yes' visibility='default' size-in-bits='128' filepath='src/heap-profile-table.h' line='305' column='1' hash='8e781208f7863759' id='type-id-282'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- HeapProfileTable::Snapshot* HeapProfileTable::AddNonLiveArgs::dest -->
            <var-decl name='dest' type-id='type-id-283' visibility='default' filepath='src/heap-profile-table.h' line='306' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- HeapProfileTable::Snapshot* HeapProfileTable::AddNonLiveArgs::base -->
            <var-decl name='base' type-id='type-id-283' visibility='default' filepath='src/heap-profile-table.h' line='307' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapProfileTable::AllocContextInfo -->
        <class-decl name='AllocContextInfo' is-struct='yes' visibility='default' size-in-bits='320' filepath='src/heap-profile-table.h' line='77' column='1' hash='bac876d81c2c4cc1' id='type-id-284'>
          <!-- struct HeapProfileStats -->
          <base-class access='public' layout-offset-in-bits='0' type-id='type-id-285'/>
          <data-member access='public' layout-offset-in-bits='192'>
            <!-- int HeapProfileTable::AllocContextInfo::stack_depth -->
            <var-decl name='stack_depth' type-id='type-id-1' visibility='default' filepath='src/heap-profile-table.h' line='78' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='256'>
            <!-- void* const* HeapProfileTable::AllocContextInfo::call_stack -->
            <var-decl name='call_stack' type-id='type-id-286' visibility='default' filepath='src/heap-profile-table.h' line='79' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapProfileTable::AllocInfo -->
        <class-decl name='AllocInfo' is-struct='yes' visibility='default' size-in-bits='192' filepath='src/heap-profile-table.h' line='66' column='1' hash='4cb0991ce88c3954' id='type-id-287'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- size_t HeapProfileTable::AllocInfo::object_size -->
            <var-decl name='object_size' type-id='type-id-61' visibility='default' filepath='src/heap-profile-table.h' line='67' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- void* const* HeapProfileTable::AllocInfo::call_stack -->
            <var-decl name='call_stack' type-id='type-id-286' visibility='default' filepath='src/heap-profile-table.h' line='68' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='128'>
            <!-- int HeapProfileTable::AllocInfo::stack_depth -->
            <var-decl name='stack_depth' type-id='type-id-1' visibility='default' filepath='src/heap-profile-table.h' line='69' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='160'>
            <!-- bool HeapProfileTable::AllocInfo::live -->
            <var-decl name='live' type-id='type-id-59' visibility='default' filepath='src/heap-profile-table.h' line='70' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='168'>
            <!-- bool HeapProfileTable::AllocInfo::ignored -->
            <var-decl name='ignored' type-id='type-id-59' visibility='default' filepath='src/heap-profile-table.h' line='71' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapProfileTable::AllocValue -->
        <class-decl name='AllocValue' is-struct='yes' visibility='default' size-in-bits='128' filepath='src/heap-profile-table.h' line='190' column='1' hash='8293b8cc349a54a5' id='type-id-258'>
          <member-type access='private'>
            <!-- typedef HeapProfileBucket HeapProfileTable::AllocValue::Bucket -->
            <typedef-decl name='Bucket' type-id='type-id-289' size-in-bits='448' filepath='src/heap-profile-table.h' line='187' column='1' id='type-id-288'/>
          </member-type>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- size_t HeapProfileTable::AllocValue::bytes -->
            <var-decl name='bytes' type-id='type-id-61' visibility='default' filepath='src/heap-profile-table.h' line='197' column='1'/>
          </data-member>
          <data-member access='private' layout-offset-in-bits='64'>
            <!-- uintptr_t HeapProfileTable::AllocValue::bucket_rep -->
            <var-decl name='bucket_rep' type-id='type-id-277' visibility='default' filepath='src/heap-profile-table.h' line='218' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapProfileTable::BufferArgs -->
        <class-decl name='BufferArgs' is-struct='yes' visibility='default' size-in-bits='128' filepath='src/heap-profile-table.h' line='227' column='1' hash='091015b07ff18e1f' id='type-id-290'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- char* HeapProfileTable::BufferArgs::buf -->
            <var-decl name='buf' type-id='type-id-130' visibility='default' filepath='src/heap-profile-table.h' line='234' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- int HeapProfileTable::BufferArgs::buflen -->
            <var-decl name='buflen' type-id='type-id-1' visibility='default' filepath='src/heap-profile-table.h' line='235' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='96'>
            <!-- int HeapProfileTable::BufferArgs::bufsize -->
            <var-decl name='bufsize' type-id='type-id-1' visibility='default' filepath='src/heap-profile-table.h' line='236' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapProfileTable::DumpArgs -->
        <class-decl name='DumpArgs' is-struct='yes' visibility='default' size-in-bits='128' filepath='src/heap-profile-table.h' line='242' column='1' hash='56f87ce773364004' id='type-id-291'>
          <member-type access='public'>
            <!-- typedef HeapProfileStats HeapProfileTable::DumpArgs::Stats -->
            <typedef-decl name='Stats' type-id='type-id-285' size-in-bits='192' filepath='src/heap-profile-table.h' line='63' column='1' id='type-id-292'/>
          </member-type>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- RawFD HeapProfileTable::DumpArgs::fd -->
            <var-decl name='fd' type-id='type-id-83' visibility='default' filepath='src/heap-profile-table.h' line='248' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- HeapProfileTable::DumpArgs::Stats* HeapProfileTable::DumpArgs::profile_stats -->
            <var-decl name='profile_stats' type-id='type-id-293' visibility='default' filepath='src/heap-profile-table.h' line='249' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapProfileTable::Snapshot -->
        <class-decl name='Snapshot' is-struct='yes' visibility='default' size-in-bits='768' filepath='src/heap-profile-table.h' line='347' column='1' hash='b9c3c49a890454d3' id='type-id-294'>
          <member-type access='private'>
            <!-- struct HeapProfileTable::Snapshot::Entry -->
            <class-decl name='Entry' is-struct='yes' visibility='default' size-in-bits='128' filepath='src/heap-profile-table.cc' line='514' column='1' hash='a965c1627ce0ce09' id='type-id-295'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- int HeapProfileTable::Snapshot::Entry::count -->
                <var-decl name='count' type-id='type-id-1' visibility='default' filepath='src/heap-profile-table.cc' line='515' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='32'>
                <!-- int HeapProfileTable::Snapshot::Entry::bytes -->
                <var-decl name='bytes' type-id='type-id-1' visibility='default' filepath='src/heap-profile-table.cc' line='516' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='64'>
                <!-- HeapProfileTable::AllocValue::Bucket* HeapProfileTable::Snapshot::Entry::bucket -->
                <var-decl name='bucket' type-id='type-id-296' visibility='default' filepath='src/heap-profile-table.cc' line='517' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='private'>
            <!-- struct HeapProfileTable::Snapshot::ReportState -->
            <class-decl name='ReportState' is-struct='yes' visibility='default' size-in-bits='384' filepath='src/heap-profile-table.cc' line='528' column='1' hash='59f79b350a60fcce' id='type-id-297'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > HeapProfileTable::Snapshot::ReportState::buckets_ -->
                <var-decl name='buckets_' type-id='type-id-298' visibility='default' filepath='src/heap-profile-table.cc' line='529' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <data-member access='private' layout-offset-in-bits='0'>
            <!-- HeapProfileTable::AllocValue::Bucket HeapProfileTable::Snapshot::total_ -->
            <var-decl name='total_' type-id='type-id-288' visibility='default' filepath='src/heap-profile-table.h' line='372' column='1'/>
          </data-member>
          <data-member access='private' layout-offset-in-bits='448'>
            <!-- HeapProfileTable::AllocationMap HeapProfileTable::Snapshot::map_ -->
            <var-decl name='map_' type-id='type-id-299' visibility='default' filepath='src/heap-profile-table.h' line='376' column='1'/>
          </data-member>
          <member-function access='private' static='yes'>
            <!-- void HeapProfileTable::Snapshot::ReportObject(HeapProfileTable::AllocValue*, char*) -->
            <function-decl name='ReportObject' mangled-name='_ZN16HeapProfileTable8Snapshot12ReportObjectEPKvPNS_10AllocValueEPc' filepath='src/heap-profile-table.cc' line='614' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable8Snapshot12ReportObjectEPKvPNS_10AllocValueEPc' hash='c3d5e8d93c14b581'>
              <!-- parameter of type 'void*' -->
              <parameter type-id='type-id-56'/>
              <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
              <parameter type-id='type-id-300'/>
              <!-- parameter of type 'char*' -->
              <parameter type-id='type-id-130'/>
              <!-- void -->
              <return type-id='type-id-58'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- void HeapProfileTable::Snapshot::ReportIndividualObjects() -->
            <function-decl name='ReportIndividualObjects' mangled-name='_ZN16HeapProfileTable8Snapshot23ReportIndividualObjectsEv' filepath='src/heap-profile-table.cc' line='622' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable8Snapshot23ReportIndividualObjectsEv' hash='7f32ffea222edbe7'>
              <!-- implicit parameter of type 'HeapProfileTable::Snapshot*' -->
              <parameter type-id='type-id-283' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-58'/>
            </function-decl>
          </member-function>
          <member-function access='private' static='yes'>
            <!-- void HeapProfileTable::Snapshot::ReportCallback(HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot::ReportState*) -->
            <function-decl name='ReportCallback' mangled-name='_ZN16HeapProfileTable8Snapshot14ReportCallbackEPKvPNS_10AllocValueEPNS0_11ReportStateE' filepath='src/heap-profile-table.cc' line='533' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable8Snapshot14ReportCallbackEPKvPNS_10AllocValueEPNS0_11ReportStateE' hash='d794cebc31bd91f7'>
              <!-- parameter of type 'void*' -->
              <parameter type-id='type-id-56'/>
              <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
              <parameter type-id='type-id-300'/>
              <!-- parameter of type 'HeapProfileTable::Snapshot::ReportState*' -->
              <parameter type-id='type-id-301'/>
              <!-- void -->
              <return type-id='type-id-58'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- void HeapProfileTable::Snapshot::ReportLeaks(const char*, const char*, bool) -->
            <function-decl name='ReportLeaks' mangled-name='_ZN16HeapProfileTable8Snapshot11ReportLeaksEPKcS2_b' filepath='src/heap-profile-table.cc' line='542' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable8Snapshot11ReportLeaksEPKcS2_b' hash='fc23a79e09513cdb'>
              <!-- implicit parameter of type 'HeapProfileTable::Snapshot*' -->
              <parameter type-id='type-id-283' is-artificial='yes'/>
              <!-- parameter of type 'const char*' -->
              <parameter type-id='type-id-60'/>
              <!-- parameter of type 'const char*' -->
              <parameter type-id='type-id-60'/>
              <!-- parameter of type 'bool' -->
              <parameter type-id='type-id-59'/>
              <!-- void -->
              <return type-id='type-id-58'/>
            </function-decl>
          </member-function>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- typedef void (*)(const HeapProfileTable::AllocContextInfo&) HeapProfileTable::AllocContextIterator -->
        <typedef-decl name='AllocContextIterator' type-id='type-id-303' size-in-bits='64' filepath='src/heap-profile-table.h' line='147' column='1' hash='fd7a63c0c6c822c4' id='type-id-302'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef void (*)(void*, const HeapProfileTable::AllocInfo&) HeapProfileTable::AllocIterator -->
        <typedef-decl name='AllocIterator' type-id='type-id-305' size-in-bits='64' filepath='src/heap-profile-table.h' line='138' column='1' hash='fd7a63c0c6c822c4' id='type-id-304'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef AddressMap<HeapProfileTable::AllocValue> HeapProfileTable::AllocationMap -->
        <typedef-decl name='AllocationMap' type-id='type-id-248' size-in-bits='320' filepath='src/heap-profile-table.h' line='224' column='1' id='type-id-299'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef void* (*)(size_t) HeapProfileTable::Allocator -->
        <typedef-decl name='Allocator' type-id='type-id-307' size-in-bits='64' filepath='src/heap-profile-table.h' line='83' column='1' hash='fd7a63c0c6c822c4' id='type-id-306'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef void (*)(void*) HeapProfileTable::DeAllocator -->
        <typedef-decl name='DeAllocator' type-id='type-id-255' size-in-bits='64' filepath='src/heap-profile-table.h' line='84' column='1' hash='fd7a63c0c6c822c4' id='type-id-308'/>
      </member-type>
      <data-member access='public' static='yes'>
        <!-- static char HeapProfileTable::kFileExt[] -->
        <var-decl name='kFileExt' type-id='type-id-309' mangled-name='_ZN16HeapProfileTable8kFileExtE' visibility='default' filepath='src/heap-profile-table.cc' line='99' column='1' elf-symbol-id='_ZN16HeapProfileTable8kFileExtE'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static const int HeapProfileTable::kMaxStackDepth -->
        <var-decl name='kMaxStackDepth' type-id='type-id-159' mangled-name='_ZN16HeapProfileTable14kMaxStackDepthE' visibility='default' filepath='src/heap-profile-table.h' line='58' column='1' elf-symbol-id='_ZN16HeapProfileTable14kMaxStackDepthE'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- HeapProfileTable::Allocator HeapProfileTable::alloc_ -->
        <var-decl name='alloc_' type-id='type-id-306' visibility='default' filepath='src/heap-profile-table.h' line='325' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- HeapProfileTable::DeAllocator HeapProfileTable::dealloc_ -->
        <var-decl name='dealloc_' type-id='type-id-308' visibility='default' filepath='src/heap-profile-table.h' line='326' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- HeapProfileTable::AllocValue::Bucket HeapProfileTable::total_ -->
        <var-decl name='total_' type-id='type-id-288' visibility='default' filepath='src/heap-profile-table.h' line='330' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='576'>
        <!-- bool HeapProfileTable::profile_mmap_ -->
        <var-decl name='profile_mmap_' type-id='type-id-59' visibility='default' filepath='src/heap-profile-table.h' line='332' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='640'>
        <!-- HeapProfileTable::AllocValue::Bucket** HeapProfileTable::bucket_table_ -->
        <var-decl name='bucket_table_' type-id='type-id-310' visibility='default' filepath='src/heap-profile-table.h' line='338' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='704'>
        <!-- int HeapProfileTable::num_buckets_ -->
        <var-decl name='num_buckets_' type-id='type-id-1' visibility='default' filepath='src/heap-profile-table.h' line='339' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='768'>
        <!-- HeapProfileTable::AllocationMap* HeapProfileTable::address_map_ -->
        <var-decl name='address_map_' type-id='type-id-311' visibility='default' filepath='src/heap-profile-table.h' line='342' column='1'/>
      </data-member>
      <member-function access='private' static='yes'>
        <!-- void HeapProfileTable::MapArgsAllocIterator(HeapProfileTable::AllocValue*, HeapProfileTable::AllocIterator) -->
        <function-decl name='MapArgsAllocIterator' mangled-name='_ZN16HeapProfileTable20MapArgsAllocIteratorEPKvPNS_10AllocValueEPFvS1_RKNS_9AllocInfoEE' filepath='src/heap-profile-table.h' line='276' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable20MapArgsAllocIteratorEPKvPNS_10AllocValueEPFvS1_RKNS_9AllocInfoEE' hash='79e377909b3eb7d7'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
          <parameter type-id='type-id-300'/>
          <!-- parameter of type 'typedef HeapProfileTable::AllocIterator' -->
          <parameter type-id='type-id-304'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- size_t HeapProfileTable::AllocValueSize() -->
        <function-decl name='AllocValueSize' mangled-name='_ZN16HeapProfileTable14AllocValueSizeERKNS_10AllocValueE' filepath='src/heap-profile-table.h' line='222' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable14AllocValueSizeERKNS_10AllocValueE' hash='eea6ded2882eee29'>
          <!-- parameter of type 'const HeapProfileTable::AllocValue&' -->
          <parameter type-id='type-id-312'/>
          <!-- typedef size_t -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- HeapProfileTable::~HeapProfileTable() -->
        <function-decl name='~HeapProfileTable' mangled-name='_ZN16HeapProfileTableD1Ev' filepath='src/heap-profile-table.cc' line='148' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTableD1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'HeapProfileTable*' -->
          <parameter type-id='type-id-313' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void HeapProfileTable::ReleaseSnapshot(HeapProfileTable::Snapshot*) -->
        <function-decl name='ReleaseSnapshot' mangled-name='_ZN16HeapProfileTable15ReleaseSnapshotEPNS_8SnapshotE' filepath='src/heap-profile-table.cc' line='485' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable15ReleaseSnapshotEPNS_8SnapshotE' hash='d055d1fa605b6d5c'>
          <!-- implicit parameter of type 'HeapProfileTable*' -->
          <parameter type-id='type-id-313' is-artificial='yes'/>
          <!-- parameter of type 'HeapProfileTable::Snapshot*' -->
          <parameter type-id='type-id-283'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- HeapProfileTable::HeapProfileTable(HeapProfileTable::Allocator, HeapProfileTable::DeAllocator, bool) -->
        <function-decl name='HeapProfileTable' mangled-name='_ZN16HeapProfileTableC2EPFPvmEPFvS0_Eb' filepath='src/heap-profile-table.cc' line='125' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTableC2EPFPvmEPFvS0_Eb' hash='86e303dd42a54213'>
          <!-- implicit parameter of type 'HeapProfileTable*' -->
          <parameter type-id='type-id-313' is-artificial='yes'/>
          <!-- parameter of type 'typedef HeapProfileTable::Allocator' -->
          <parameter type-id='type-id-306'/>
          <!-- parameter of type 'typedef HeapProfileTable::DeAllocator' -->
          <parameter type-id='type-id-308'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-59'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- int HeapProfileTable::UnparseBucket(char*, int, int, const char*, HeapProfileTable::DumpArgs::Stats*) -->
        <function-decl name='UnparseBucket' mangled-name='_ZN16HeapProfileTable13UnparseBucketERK17HeapProfileBucketPciiPKcP16HeapProfileStats' filepath='src/heap-profile-table.cc' line='280' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable13UnparseBucketERK17HeapProfileBucketPciiPKcP16HeapProfileStats' hash='446a63ade4236164'>
          <!-- parameter of type 'const HeapProfileTable::AllocValue::Bucket&' -->
          <parameter type-id='type-id-314'/>
          <!-- parameter of type 'char*' -->
          <parameter type-id='type-id-130'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- parameter of type 'HeapProfileTable::DumpArgs::Stats*' -->
          <parameter type-id='type-id-293'/>
          <!-- int -->
          <return type-id='type-id-1'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapProfileTable::DumpNonLiveIterator(HeapProfileTable::AllocValue*, const HeapProfileTable::DumpArgs&) -->
        <function-decl name='DumpNonLiveIterator' mangled-name='_ZN16HeapProfileTable19DumpNonLiveIteratorEPKvPNS_10AllocValueERKNS_8DumpArgsE' filepath='src/heap-profile-table.cc' line='397' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable19DumpNonLiveIteratorEPKvPNS_10AllocValueERKNS_8DumpArgsE' hash='54cc623966dbb6a1'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
          <parameter type-id='type-id-300'/>
          <!-- parameter of type 'const HeapProfileTable::DumpArgs&' -->
          <parameter type-id='type-id-315'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapProfileTable::DumpBucketIterator(HeapProfileTable::BufferArgs*) -->
        <function-decl name='DumpBucketIterator' mangled-name='_ZN16HeapProfileTable18DumpBucketIteratorEPK17HeapProfileBucketPNS_10BufferArgsE' filepath='src/heap-profile-table.cc' line='390' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable18DumpBucketIteratorEPK17HeapProfileBucketPNS_10BufferArgsE' hash='696e4681e6be6694'>
          <!-- parameter of type 'const HeapProfileTable::AllocValue::Bucket*' -->
          <parameter type-id='type-id-316'/>
          <!-- parameter of type 'HeapProfileTable::BufferArgs*' -->
          <parameter type-id='type-id-317'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- HeapProfileTable::AllocValue::Bucket* HeapProfileTable::GetBucket(int, void* const*) -->
        <function-decl name='GetBucket' mangled-name='_ZN16HeapProfileTable9GetBucketEiPKPKv' filepath='src/heap-profile-table.cc' line='167' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable9GetBucketEiPKPKv' hash='b6d0e8f32e037e2b'>
          <!-- implicit parameter of type 'HeapProfileTable*' -->
          <parameter type-id='type-id-313' is-artificial='yes'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'void* const*' -->
          <parameter type-id='type-id-286'/>
          <!-- HeapProfileTable::AllocValue::Bucket* -->
          <return type-id='type-id-296'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- int HeapProfileTable::GetCallerStackTrace(void**) -->
        <function-decl name='GetCallerStackTrace' mangled-name='_ZN16HeapProfileTable19GetCallerStackTraceEiPPv' filepath='src/heap-profile-table.cc' line='204' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable19GetCallerStackTraceEiPPv' hash='50a6880b60aff73f'>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'void**' -->
          <parameter type-id='type-id-184'/>
          <!-- int -->
          <return type-id='type-id-1'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- HeapProfileTable::AllocValue::Bucket** HeapProfileTable::MakeSortedBucketList() -->
        <function-decl name='MakeSortedBucketList' mangled-name='_ZNK16HeapProfileTable20MakeSortedBucketListEv' filepath='src/heap-profile-table.cc' line='313' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK16HeapProfileTable20MakeSortedBucketListEv' hash='60ed56c89de5e837'>
          <!-- implicit parameter of type 'const HeapProfileTable*' -->
          <parameter type-id='type-id-318' is-artificial='yes'/>
          <!-- HeapProfileTable::AllocValue::Bucket** -->
          <return type-id='type-id-310'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void HeapProfileTable::IterateOrderedAllocContexts(HeapProfileTable::AllocContextIterator) -->
        <function-decl name='IterateOrderedAllocContexts' mangled-name='_ZNK16HeapProfileTable27IterateOrderedAllocContextsEPFvRKNS_16AllocContextInfoEE' filepath='src/heap-profile-table.cc' line='329' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK16HeapProfileTable27IterateOrderedAllocContextsEPFvRKNS_16AllocContextInfoEE' hash='5695f5ce05a4c55f'>
          <!-- implicit parameter of type 'const HeapProfileTable*' -->
          <parameter type-id='type-id-318' is-artificial='yes'/>
          <!-- parameter of type 'typedef HeapProfileTable::AllocContextIterator' -->
          <parameter type-id='type-id-302'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- int HeapProfileTable::FillOrderedProfile(char*, int) -->
        <function-decl name='FillOrderedProfile' mangled-name='_ZNK16HeapProfileTable18FillOrderedProfileEPci' filepath='src/heap-profile-table.cc' line='342' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK16HeapProfileTable18FillOrderedProfileEPci' hash='8487c9d489875495'>
          <!-- implicit parameter of type 'const HeapProfileTable*' -->
          <parameter type-id='type-id-318' is-artificial='yes'/>
          <!-- parameter of type 'char*' -->
          <parameter type-id='type-id-130'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- int -->
          <return type-id='type-id-1'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void HeapProfileTable::MarkAsIgnored(void*) -->
        <function-decl name='MarkAsIgnored' mangled-name='_ZN16HeapProfileTable13MarkAsIgnoredEPKv' filepath='src/heap-profile-table.cc' line='272' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable13MarkAsIgnoredEPKv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'HeapProfileTable*' -->
          <parameter type-id='type-id-313' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool HeapProfileTable::WriteProfile(const HeapProfileTable::AllocValue::Bucket&, HeapProfileTable::AllocationMap*) -->
        <function-decl name='WriteProfile' mangled-name='_ZN16HeapProfileTable12WriteProfileEPKcRK17HeapProfileBucketP10AddressMapINS_10AllocValueEE' filepath='src/heap-profile-table.cc' line='432' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable12WriteProfileEPKcRK17HeapProfileBucketP10AddressMapINS_10AllocValueEE' hash='d0ea9d1532049c25'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- parameter of type 'const HeapProfileTable::AllocValue::Bucket&' -->
          <parameter type-id='type-id-314'/>
          <!-- parameter of type 'HeapProfileTable::AllocationMap*' -->
          <parameter type-id='type-id-311'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool HeapProfileTable::FindInsideAlloc(void*, size_t, void**, size_t*) -->
        <function-decl name='FindInsideAlloc' mangled-name='_ZNK16HeapProfileTable15FindInsideAllocEPKvmPS1_Pm' filepath='src/heap-profile-table.cc' line='253' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK16HeapProfileTable15FindInsideAllocEPKvmPS1_Pm' hash='0f316b00ac7ee281'>
          <!-- implicit parameter of type 'const HeapProfileTable*' -->
          <parameter type-id='type-id-318' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'void**' -->
          <parameter type-id='type-id-184'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-319'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapProfileTable::AddToSnapshot(HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot*) -->
        <function-decl name='AddToSnapshot' mangled-name='_ZN16HeapProfileTable13AddToSnapshotEPKvPNS_10AllocValueEPNS_8SnapshotE' filepath='src/heap-profile-table.cc' line='491' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable13AddToSnapshotEPKvPNS_10AllocValueEPNS_8SnapshotE' hash='e4fe7bb089a91809'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
          <parameter type-id='type-id-300'/>
          <!-- parameter of type 'HeapProfileTable::Snapshot*' -->
          <parameter type-id='type-id-283'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- HeapProfileTable::Snapshot* HeapProfileTable::TakeSnapshot() -->
        <function-decl name='TakeSnapshot' mangled-name='_ZN16HeapProfileTable12TakeSnapshotEv' filepath='src/heap-profile-table.cc' line='479' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable12TakeSnapshotEv' hash='d055d1fa605b6d5c'>
          <!-- implicit parameter of type 'HeapProfileTable*' -->
          <parameter type-id='type-id-313' is-artificial='yes'/>
          <!-- HeapProfileTable::Snapshot* -->
          <return type-id='type-id-283'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void HeapProfileTable::RecordAlloc(void*, size_t, int, void* const*) -->
        <function-decl name='RecordAlloc' mangled-name='_ZN16HeapProfileTable11RecordAllocEPKvmiPKS1_' filepath='src/heap-profile-table.cc' line='210' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable11RecordAllocEPKvmiPKS1_' hash='4d3907c2c1e842ae'>
          <!-- implicit parameter of type 'HeapProfileTable*' -->
          <parameter type-id='type-id-313' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'void* const*' -->
          <parameter type-id='type-id-286'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void HeapProfileTable::RecordFree(void*) -->
        <function-decl name='RecordFree' mangled-name='_ZN16HeapProfileTable10RecordFreeEPKv' filepath='src/heap-profile-table.cc' line='225' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable10RecordFreeEPKv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'HeapProfileTable*' -->
          <parameter type-id='type-id-313' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapProfileTable::AddIfNonLive(HeapProfileTable::AllocValue*, HeapProfileTable::AddNonLiveArgs*) -->
        <function-decl name='AddIfNonLive' mangled-name='_ZN16HeapProfileTable12AddIfNonLiveEPKvPNS_10AllocValueEPNS_14AddNonLiveArgsE' filepath='src/heap-profile-table.cc' line='419' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable12AddIfNonLiveEPKvPNS_10AllocValueEPNS_14AddNonLiveArgsE' hash='f36b47d22ae82aa9'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
          <parameter type-id='type-id-300'/>
          <!-- parameter of type 'HeapProfileTable::AddNonLiveArgs*' -->
          <parameter type-id='type-id-320'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- HeapProfileTable::Snapshot* HeapProfileTable::NonLiveSnapshot(HeapProfileTable::Snapshot*) -->
        <function-decl name='NonLiveSnapshot' mangled-name='_ZN16HeapProfileTable15NonLiveSnapshotEPNS_8SnapshotE' filepath='src/heap-profile-table.cc' line='496' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable15NonLiveSnapshotEPNS_8SnapshotE' hash='d7cf3f266b91be01'>
          <!-- implicit parameter of type 'HeapProfileTable*' -->
          <parameter type-id='type-id-313' is-artificial='yes'/>
          <!-- parameter of type 'HeapProfileTable::Snapshot*' -->
          <parameter type-id='type-id-283'/>
          <!-- HeapProfileTable::Snapshot* -->
          <return type-id='type-id-283'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool HeapProfileTable::MarkAsLive(void*) -->
        <function-decl name='MarkAsLive' mangled-name='_ZN16HeapProfileTable10MarkAsLiveEPKv' filepath='src/heap-profile-table.cc' line='263' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable10MarkAsLiveEPKv' hash='c7c710e908194b91'>
          <!-- implicit parameter of type 'HeapProfileTable*' -->
          <parameter type-id='type-id-313' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapProfileTable::CleanupOldProfiles() -->
        <function-decl name='CleanupOldProfiles' mangled-name='_ZN16HeapProfileTable18CleanupOldProfilesEPKc' filepath='src/heap-profile-table.cc' line='455' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable18CleanupOldProfilesEPKc' hash='53885bde0aa65efe'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool HeapProfileTable::FindAllocDetails(void*, HeapProfileTable::AllocInfo*) -->
        <function-decl name='FindAllocDetails' mangled-name='_ZNK16HeapProfileTable16FindAllocDetailsEPKvPNS_9AllocInfoE' filepath='src/heap-profile-table.cc' line='242' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK16HeapProfileTable16FindAllocDetailsEPKvPNS_9AllocInfoE' hash='74fcff412c436e0b'>
          <!-- implicit parameter of type 'const HeapProfileTable*' -->
          <parameter type-id='type-id-318' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'HeapProfileTable::AllocInfo*' -->
          <parameter type-id='type-id-321'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool HeapProfileTable::FindAlloc(void*, size_t*) -->
        <function-decl name='FindAlloc' mangled-name='_ZNK16HeapProfileTable9FindAllocEPKvPm' filepath='src/heap-profile-table.cc' line='236' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK16HeapProfileTable9FindAllocEPKvPm' hash='a64ac8f4f7534435'>
          <!-- implicit parameter of type 'const HeapProfileTable*' -->
          <parameter type-id='type-id-318' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-319'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class LowLevelAlloc -->
    <class-decl name='LowLevelAlloc' visibility='default' size-in-bits='8' filepath='src/base/low_level_alloc.h' line='44' column='1' hash='c55f19eb4cd0776f' id='type-id-322'>
      <member-type access='private'>
        <!-- struct LowLevelAlloc::Arena -->
        <class-decl name='Arena' is-struct='yes' visibility='default' size-in-bits='2560' filepath='src/base/low_level_alloc.cc' line='184' column='1' hash='f6ff43c8ab87ab07' id='type-id-323'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- SpinLock LowLevelAlloc::Arena::mu -->
            <var-decl name='mu' type-id='type-id-102' visibility='default' filepath='src/base/low_level_alloc.cc' line='189' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- low_level_alloc_internal::AllocList LowLevelAlloc::Arena::freelist -->
            <var-decl name='freelist' type-id='type-id-89' visibility='default' filepath='src/base/low_level_alloc.cc' line='191' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2304'>
            <!-- int32 LowLevelAlloc::Arena::allocation_count -->
            <var-decl name='allocation_count' type-id='type-id-81' visibility='default' filepath='src/base/low_level_alloc.cc' line='192' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2336'>
            <!-- int32 LowLevelAlloc::Arena::flags -->
            <var-decl name='flags' type-id='type-id-81' visibility='default' filepath='src/base/low_level_alloc.cc' line='193' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2368'>
            <!-- size_t LowLevelAlloc::Arena::pagesize -->
            <var-decl name='pagesize' type-id='type-id-61' visibility='default' filepath='src/base/low_level_alloc.cc' line='194' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2432'>
            <!-- size_t LowLevelAlloc::Arena::roundup -->
            <var-decl name='roundup' type-id='type-id-61' visibility='default' filepath='src/base/low_level_alloc.cc' line='195' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2496'>
            <!-- size_t LowLevelAlloc::Arena::min_size -->
            <var-decl name='min_size' type-id='type-id-61' visibility='default' filepath='src/base/low_level_alloc.cc' line='197' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-function access='private' static='yes'>
        <!-- LowLevelAlloc::Arena* LowLevelAlloc::DefaultArena() -->
        <function-decl name='DefaultArena' mangled-name='_ZN13LowLevelAlloc12DefaultArenaEv' filepath='src/base/low_level_alloc.cc' line='521' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13LowLevelAlloc12DefaultArenaEv' hash='b79eb19d4c2d908e'>
          <!-- LowLevelAlloc::Arena* -->
          <return type-id='type-id-87'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void* LowLevelAlloc::AllocWithArena(LowLevelAlloc::Arena*) -->
        <function-decl name='AllocWithArena' mangled-name='_ZN13LowLevelAlloc14AllocWithArenaEmPNS_5ArenaE' filepath='src/base/low_level_alloc.cc' line='510' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13LowLevelAlloc14AllocWithArenaEmPNS_5ArenaE' hash='ee12f578c4792ed6'>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'LowLevelAlloc::Arena*' -->
          <parameter type-id='type-id-87'/>
          <!-- void* -->
          <return type-id='type-id-56'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- LowLevelAlloc::Arena* LowLevelAlloc::NewArena(LowLevelAlloc::Arena*) -->
        <function-decl name='NewArena' mangled-name='_ZN13LowLevelAlloc8NewArenaEiPNS_5ArenaE' filepath='src/base/low_level_alloc.cc' line='296' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13LowLevelAlloc8NewArenaEiPNS_5ArenaE' hash='d71230e10294e65d'>
          <!-- parameter of type 'typedef int32' -->
          <parameter type-id='type-id-81'/>
          <!-- parameter of type 'LowLevelAlloc::Arena*' -->
          <parameter type-id='type-id-87'/>
          <!-- LowLevelAlloc::Arena* -->
          <return type-id='type-id-87'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void* LowLevelAlloc::Alloc() -->
        <function-decl name='Alloc' mangled-name='_ZN13LowLevelAlloc5AllocEm' filepath='src/base/low_level_alloc.cc' line='500' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13LowLevelAlloc5AllocEm' hash='e0055d99adb0e173'>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void* -->
          <return type-id='type-id-56'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void LowLevelAlloc::Free() -->
        <function-decl name='Free' mangled-name='_ZN13LowLevelAlloc4FreeEPv' filepath='src/base/low_level_alloc.cc' line='415' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13LowLevelAlloc4FreeEPv' hash='7f32ffea222edbe7'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool LowLevelAlloc::DeleteArena() -->
        <function-decl name='DeleteArena' mangled-name='_ZN13LowLevelAlloc11DeleteArenaEPNS_5ArenaE' filepath='src/base/low_level_alloc.cc' line='315' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13LowLevelAlloc11DeleteArenaEPNS_5ArenaE' hash='afc65823b0d92ac9'>
          <!-- parameter of type 'LowLevelAlloc::Arena*' -->
          <parameter type-id='type-id-87'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class MemoryRegionMap -->
    <class-decl name='MemoryRegionMap' visibility='default' size-in-bits='8' filepath='src/memory_region_map.h' line='69' column='1' hash='a7b84d65e51c3c1a' id='type-id-324'>
      <member-type access='private'>
        <!-- class MemoryRegionMap::LockHolder -->
        <class-decl name='LockHolder' visibility='default' size-in-bits='8' filepath='src/memory_region_map.h' line='126' column='1' hash='45fb04c1bd8375c4' id='type-id-325'/>
      </member-type>
      <member-type access='private'>
        <!-- struct MemoryRegionMap::MyAllocator -->
        <class-decl name='MyAllocator' is-struct='yes' visibility='default' size-in-bits='8' filepath='src/memory_region_map.h' line='252' column='1' hash='d9ccece561bd6edb' id='type-id-326'/>
      </member-type>
      <member-type access='private'>
        <!-- struct MemoryRegionMap::Region -->
        <class-decl name='Region' is-struct='yes' visibility='default' size-in-bits='2304' filepath='src/memory_region_map.h' line='137' column='1' hash='6f3aa3a5da33f0d6' id='type-id-327'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- uintptr_t MemoryRegionMap::Region::start_addr -->
            <var-decl name='start_addr' type-id='type-id-277' visibility='default' filepath='src/memory_region_map.h' line='138' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- uintptr_t MemoryRegionMap::Region::end_addr -->
            <var-decl name='end_addr' type-id='type-id-277' visibility='default' filepath='src/memory_region_map.h' line='139' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='128'>
            <!-- int MemoryRegionMap::Region::call_stack_depth -->
            <var-decl name='call_stack_depth' type-id='type-id-1' visibility='default' filepath='src/memory_region_map.h' line='140' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='192'>
            <!-- void* MemoryRegionMap::Region::call_stack[32] -->
            <var-decl name='call_stack' type-id='type-id-328' visibility='default' filepath='src/memory_region_map.h' line='141' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2240'>
            <!-- bool MemoryRegionMap::Region::is_stack -->
            <var-decl name='is_stack' type-id='type-id-59' visibility='default' filepath='src/memory_region_map.h' line='143' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct MemoryRegionMap::RegionCmp -->
        <class-decl name='RegionCmp' is-struct='yes' visibility='default' size-in-bits='8' filepath='src/memory_region_map.h' line='245' column='1' hash='b84997bda69f730a' id='type-id-329'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef std::_Rb_tree_const_iterator<MemoryRegionMap::Region> MemoryRegionMap::RegionIterator -->
        <typedef-decl name='RegionIterator' type-id='type-id-331' size-in-bits='64' filepath='src/memory_region_map.h' line='268' column='1' id='type-id-330'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > MemoryRegionMap::RegionSet -->
        <typedef-decl name='RegionSet' type-id='type-id-333' size-in-bits='384' filepath='src/memory_region_map.h' line='263' column='1' id='type-id-332'/>
      </member-type>
      <member-type access='private'>
        <!-- union MemoryRegionMap::RegionSetRep -->
        <union-decl name='RegionSetRep' visibility='default' is-declaration-only='yes' id='type-id-334'/>
      </member-type>
      <data-member access='public' static='yes'>
        <!-- static int MemoryRegionMap::client_count_ -->
        <var-decl name='client_count_' type-id='type-id-1' mangled-name='_ZN15MemoryRegionMap13client_count_E' visibility='default' filepath='src/memory_region_map.cc' line='141' column='1' elf-symbol-id='_ZN15MemoryRegionMap13client_count_E'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static int MemoryRegionMap::max_stack_depth_ -->
        <var-decl name='max_stack_depth_' type-id='type-id-1' mangled-name='_ZN15MemoryRegionMap16max_stack_depth_E' visibility='default' filepath='src/memory_region_map.cc' line='142' column='1' elf-symbol-id='_ZN15MemoryRegionMap16max_stack_depth_E'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static LowLevelAlloc::Arena* MemoryRegionMap::arena_ -->
        <var-decl name='arena_' type-id='type-id-87' mangled-name='_ZN15MemoryRegionMap6arena_E' visibility='default' filepath='src/memory_region_map.cc' line='144' column='1' elf-symbol-id='_ZN15MemoryRegionMap6arena_E'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static MemoryRegionMap::RegionSet* MemoryRegionMap::regions_ -->
        <var-decl name='regions_' type-id='type-id-335' mangled-name='_ZN15MemoryRegionMap8regions_E' visibility='default' filepath='src/memory_region_map.cc' line='143' column='1' elf-symbol-id='_ZN15MemoryRegionMap8regions_E'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static SpinLock MemoryRegionMap::lock_ -->
        <var-decl name='lock_' type-id='type-id-102' mangled-name='_ZN15MemoryRegionMap5lock_E' visibility='default' filepath='src/memory_region_map.cc' line='145' column='1' elf-symbol-id='_ZN15MemoryRegionMap5lock_E'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static SpinLock MemoryRegionMap::owner_lock_ -->
        <var-decl name='owner_lock_' type-id='type-id-102' mangled-name='_ZN15MemoryRegionMap11owner_lock_E' visibility='default' filepath='src/memory_region_map.cc' line='147' column='1' elf-symbol-id='_ZN15MemoryRegionMap11owner_lock_E'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static int MemoryRegionMap::recursion_count_ -->
        <var-decl name='recursion_count_' type-id='type-id-1' mangled-name='_ZN15MemoryRegionMap16recursion_count_E' visibility='default' filepath='src/memory_region_map.cc' line='148' column='1' elf-symbol-id='_ZN15MemoryRegionMap16recursion_count_E'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static pthread_t MemoryRegionMap::lock_owner_tid_ -->
        <var-decl name='lock_owner_tid_' type-id='type-id-336' mangled-name='_ZN15MemoryRegionMap15lock_owner_tid_E' visibility='default' filepath='src/memory_region_map.cc' line='149' column='1' elf-symbol-id='_ZN15MemoryRegionMap15lock_owner_tid_E'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static int64 MemoryRegionMap::map_size_ -->
        <var-decl name='map_size_' type-id='type-id-105' mangled-name='_ZN15MemoryRegionMap9map_size_E' visibility='default' filepath='src/memory_region_map.cc' line='150' column='1' elf-symbol-id='_ZN15MemoryRegionMap9map_size_E'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static int64 MemoryRegionMap::unmap_size_ -->
        <var-decl name='unmap_size_' type-id='type-id-105' mangled-name='_ZN15MemoryRegionMap11unmap_size_E' visibility='default' filepath='src/memory_region_map.cc' line='151' column='1' elf-symbol-id='_ZN15MemoryRegionMap11unmap_size_E'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static HeapProfileBucket** MemoryRegionMap::bucket_table_ -->
        <var-decl name='bucket_table_' type-id='type-id-337' mangled-name='_ZN15MemoryRegionMap13bucket_table_E' visibility='default' filepath='src/memory_region_map.cc' line='152' column='1' elf-symbol-id='_ZN15MemoryRegionMap13bucket_table_E'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static int MemoryRegionMap::num_buckets_ -->
        <var-decl name='num_buckets_' type-id='type-id-1' mangled-name='_ZN15MemoryRegionMap12num_buckets_E' visibility='default' filepath='src/memory_region_map.cc' line='153' column='1' elf-symbol-id='_ZN15MemoryRegionMap12num_buckets_E'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static int MemoryRegionMap::saved_buckets_count_ -->
        <var-decl name='saved_buckets_count_' type-id='type-id-1' mangled-name='_ZN15MemoryRegionMap20saved_buckets_count_E' visibility='default' filepath='src/memory_region_map.cc' line='154' column='1' elf-symbol-id='_ZN15MemoryRegionMap20saved_buckets_count_E'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static HeapProfileBucket MemoryRegionMap::saved_buckets_[20] -->
        <var-decl name='saved_buckets_' type-id='type-id-338' mangled-name='_ZN15MemoryRegionMap14saved_buckets_E' visibility='default' filepath='src/memory_region_map.cc' line='155' column='1' elf-symbol-id='_ZN15MemoryRegionMap14saved_buckets_E'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static void* MemoryRegionMap::saved_buckets_keys_[20][32] -->
        <var-decl name='saved_buckets_keys_' type-id='type-id-339' mangled-name='_ZN15MemoryRegionMap19saved_buckets_keys_E' visibility='default' filepath='src/memory_region_map.cc' line='158' column='1' elf-symbol-id='_ZN15MemoryRegionMap19saved_buckets_keys_E'/>
      </data-member>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::HandleSavedRegionsLocked() -->
        <function-decl name='HandleSavedRegionsLocked' mangled-name='_ZN15MemoryRegionMap24HandleSavedRegionsLockedEPFvRKNS_6RegionEE' filepath='src/memory_region_map.cc' line='487' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap24HandleSavedRegionsLockedEPFvRKNS_6RegionEE' hash='5695f5ce05a4c55f'>
          <!-- parameter of type 'void (*)(const MemoryRegionMap::Region&)' -->
          <parameter type-id='type-id-340'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::Unlock() -->
        <function-decl name='Unlock' mangled-name='_ZN15MemoryRegionMap6UnlockEv' filepath='src/memory_region_map.cc' line='316' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap6UnlockEv' hash='7f32ffea222edbe7'>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool MemoryRegionMap::LockIsHeld() -->
        <function-decl name='LockIsHeld' mangled-name='_ZN15MemoryRegionMap10LockIsHeldEv' filepath='src/memory_region_map.cc' line='328' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap10LockIsHeldEv' hash='c7c710e908194b91'>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::LogAllLocked() -->
        <function-decl name='LogAllLocked' mangled-name='_ZN15MemoryRegionMap12LogAllLockedEv' filepath='src/memory_region_map.cc' line='815' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap12LogAllLockedEv' hash='7f32ffea222edbe7'>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::DoInsertRegionLocked() -->
        <function-decl name='DoInsertRegionLocked' mangled-name='_ZN15MemoryRegionMap20DoInsertRegionLockedERKNS_6RegionE' filepath='src/memory_region_map.cc' line='443' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap20DoInsertRegionLockedERKNS_6RegionE' hash='d2a180ed49dda32d'>
          <!-- parameter of type 'const MemoryRegionMap::Region&' -->
          <parameter type-id='type-id-341'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- MemoryRegionMap::RegionIterator MemoryRegionMap::EndRegionLocked() -->
        <function-decl name='EndRegionLocked' mangled-name='_ZN15MemoryRegionMap15EndRegionLockedEv' filepath='src/memory_region_map.cc' line='437' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap15EndRegionLockedEv' hash='7f32ffea222edbe7'>
          <!-- typedef MemoryRegionMap::RegionIterator -->
          <return type-id='type-id-330'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- MemoryRegionMap::RegionIterator MemoryRegionMap::BeginRegionLocked() -->
        <function-decl name='BeginRegionLocked' mangled-name='_ZN15MemoryRegionMap17BeginRegionLockedEv' filepath='src/memory_region_map.cc' line='431' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap17BeginRegionLockedEv' hash='7f32ffea222edbe7'>
          <!-- typedef MemoryRegionMap::RegionIterator -->
          <return type-id='type-id-330'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- const MemoryRegionMap::Region* MemoryRegionMap::DoFindRegionLocked() -->
        <function-decl name='DoFindRegionLocked' mangled-name='_ZN15MemoryRegionMap18DoFindRegionLockedEm' filepath='src/memory_region_map.cc' line='334' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap18DoFindRegionLockedEm' hash='0d5a4f50079cbc9a'>
          <!-- parameter of type 'typedef uintptr_t' -->
          <parameter type-id='type-id-277'/>
          <!-- const MemoryRegionMap::Region* -->
          <return type-id='type-id-342'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool MemoryRegionMap::IsRecordingLocked() -->
        <function-decl name='IsRecordingLocked' mangled-name='_ZN15MemoryRegionMap17IsRecordingLockedEv' filepath='src/memory_region_map.cc' line='279' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap17IsRecordingLockedEv' hash='c7c710e908194b91'>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::Lock() -->
        <function-decl name='Lock' mangled-name='_ZN15MemoryRegionMap4LockEv' filepath='src/memory_region_map.cc' line='294' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap4LockEv' hash='7f32ffea222edbe7'>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool MemoryRegionMap::FindAndMarkStackRegion(MemoryRegionMap::Region*) -->
        <function-decl name='FindAndMarkStackRegion' mangled-name='_ZN15MemoryRegionMap22FindAndMarkStackRegionEmPNS_6RegionE' filepath='src/memory_region_map.cc' line='358' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap22FindAndMarkStackRegionEmPNS_6RegionE' hash='e33ae77537c78254'>
          <!-- parameter of type 'typedef uintptr_t' -->
          <parameter type-id='type-id-277'/>
          <!-- parameter of type 'MemoryRegionMap::Region*' -->
          <parameter type-id='type-id-343'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool MemoryRegionMap::FindRegion(MemoryRegionMap::Region*) -->
        <function-decl name='FindRegion' mangled-name='_ZN15MemoryRegionMap10FindRegionEmPNS_6RegionE' filepath='src/memory_region_map.cc' line='350' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap10FindRegionEmPNS_6RegionE' hash='e33ae77537c78254'>
          <!-- parameter of type 'typedef uintptr_t' -->
          <parameter type-id='type-id-277'/>
          <!-- parameter of type 'MemoryRegionMap::Region*' -->
          <parameter type-id='type-id-343'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool MemoryRegionMap::Shutdown() -->
        <function-decl name='Shutdown' mangled-name='_ZN15MemoryRegionMap8ShutdownEv' filepath='src/memory_region_map.cc' line='239' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap8ShutdownEv' hash='c7c710e908194b91'>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::Init(bool) -->
        <function-decl name='Init' mangled-name='_ZN15MemoryRegionMap4InitEib' filepath='src/memory_region_map.cc' line='194' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap4InitEib' hash='a79502d22727be06'>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-59'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::RestoreSavedBucketsLocked() -->
        <function-decl name='RestoreSavedBucketsLocked' mangled-name='_ZN15MemoryRegionMap25RestoreSavedBucketsLockedEv' filepath='src/memory_region_map.cc' line='499' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap25RestoreSavedBucketsLockedEv' hash='7f32ffea222edbe7'>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- HeapProfileBucket* MemoryRegionMap::GetBucket(void* const*) -->
        <function-decl name='GetBucket' mangled-name='_ZN15MemoryRegionMap9GetBucketEiPKPKv' filepath='src/memory_region_map.cc' line='375' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap9GetBucketEiPKPKv' hash='48445b2fb3c4a68e'>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'void* const*' -->
          <parameter type-id='type-id-286'/>
          <!-- HeapProfileBucket* -->
          <return type-id='type-id-344'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::RecordRegionRemovalInBucket(void* const*, size_t) -->
        <function-decl name='RecordRegionRemovalInBucket' mangled-name='_ZN15MemoryRegionMap27RecordRegionRemovalInBucketEiPKPKvm' filepath='src/memory_region_map.cc' line='752' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap27RecordRegionRemovalInBucketEiPKPKvm' hash='529c7cd691910ece'>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'void* const*' -->
          <parameter type-id='type-id-286'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::InsertRegionLocked() -->
        <function-decl name='InsertRegionLocked' mangled-name='_ZN15MemoryRegionMap18InsertRegionLockedERKNS_6RegionE' filepath='src/memory_region_map.cc' line='537' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap18InsertRegionLockedERKNS_6RegionE' hash='d2a180ed49dda32d'>
          <!-- parameter of type 'const MemoryRegionMap::Region&' -->
          <parameter type-id='type-id-341'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::RecordRegionAddition(size_t) -->
        <function-decl name='RecordRegionAddition' mangled-name='_ZN15MemoryRegionMap20RecordRegionAdditionEPKvm' filepath='src/memory_region_map.cc' line='580' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap20RecordRegionAdditionEPKvm' hash='e0055d99adb0e173'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::MmapHook(void*, size_t, int, int, int, off_t) -->
        <function-decl name='MmapHook' mangled-name='_ZN15MemoryRegionMap8MmapHookEPKvS1_miiil' filepath='src/memory_region_map.cc' line='762' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap8MmapHookEPKvS1_miiil' hash='d89e6f5baae5273c'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'typedef off_t' -->
          <parameter type-id='type-id-345'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::RecordRegionRemoval(size_t) -->
        <function-decl name='RecordRegionRemoval' mangled-name='_ZN15MemoryRegionMap19RecordRegionRemovalEPKvm' filepath='src/memory_region_map.cc' line='634' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap19RecordRegionRemovalEPKvm' hash='e0055d99adb0e173'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::MunmapHook(size_t) -->
        <function-decl name='MunmapHook' mangled-name='_ZN15MemoryRegionMap10MunmapHookEPKvm' filepath='src/memory_region_map.cc' line='778' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap10MunmapHookEPKvm' hash='e0055d99adb0e173'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::SbrkHook(ptrdiff_t) -->
        <function-decl name='SbrkHook' mangled-name='_ZN15MemoryRegionMap8SbrkHookEPKvl' filepath='src/memory_region_map.cc' line='800' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap8SbrkHookEPKvl' hash='52c0efb08d2aa513'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef ptrdiff_t' -->
          <parameter type-id='type-id-346'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::MremapHook(void*, size_t, size_t, int, void*) -->
        <function-decl name='MremapHook' mangled-name='_ZN15MemoryRegionMap10MremapHookEPKvS1_mmiS1_' filepath='src/memory_region_map.cc' line='785' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap10MremapHookEPKvS1_mmiS1_' hash='d8f551d99ba6f26a'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class STL_Allocator<AllocObject, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt;' visibility='default' size-in-bits='8' filepath='src/base/stl_allocator.h' line='60' column='1' hash='b6006b08de989dc0' id='type-id-347'/>
    <!-- class STL_Allocator<char, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt;' visibility='default' size-in-bits='8' filepath='src/base/stl_allocator.h' line='60' column='1' hash='e39a5832c57b7a4e' id='type-id-348'/>
    <!-- class STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;long unsigned int, HeapLeakChecker::Allocator&gt;' visibility='default' size-in-bits='8' filepath='src/base/stl_allocator.h' line='60' column='1' hash='44ca8e382350b5f6' id='type-id-349'/>
    <!-- class STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;long unsigned int&gt;, HeapLeakChecker::Allocator&gt;' visibility='default' size-in-bits='8' filepath='src/base/stl_allocator.h' line='60' column='1' hash='6193c3b660526c50' id='type-id-350'/>
    <!-- class STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;, HeapLeakChecker::Allocator&gt;' visibility='default' size-in-bits='8' filepath='src/base/stl_allocator.h' line='60' column='1' hash='de56ae0409a56c3c' id='type-id-351'/>
    <!-- class STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;, HeapLeakChecker::Allocator&gt;' visibility='default' size-in-bits='8' filepath='src/base/stl_allocator.h' line='60' column='1' hash='0a09b8ffad890478' id='type-id-352'/>
    <!-- class STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;, HeapLeakChecker::Allocator&gt;' visibility='default' size-in-bits='8' filepath='src/base/stl_allocator.h' line='60' column='1' hash='fd51693fea9d2f61' id='type-id-353'/>
    <!-- class STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt;, HeapLeakChecker::Allocator&gt;' visibility='default' size-in-bits='8' filepath='src/base/stl_allocator.h' line='60' column='1' hash='e719f4ee346c8b8e' id='type-id-354'/>
    <!-- class STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt;, HeapLeakChecker::Allocator&gt;' visibility='default' size-in-bits='8' filepath='src/base/stl_allocator.h' line='60' column='1' hash='67b67043abd9fba6' id='type-id-355'/>
    <!-- class STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, HeapLeakChecker::Allocator&gt;' visibility='default' size-in-bits='8' filepath='src/base/stl_allocator.h' line='60' column='1' hash='ef858715047a8a50' id='type-id-356'/>
    <!-- class STL_Allocator<void*, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt;' visibility='default' size-in-bits='8' filepath='src/base/stl_allocator.h' line='60' column='1' hash='39c9dbb33650eb94' id='type-id-357'/>
    <!-- enum ObjectPlacement -->
    <enum-decl name='ObjectPlacement' size-in-bits='32' alignment-in-bits='32' filepath='src/heap-checker.cc' line='345' column='1' hash='7a80bb93811484b3' id='type-id-358'>
      <underlying-type type-id='type-id-93'/>
      <enumerator name='MUST_BE_ON_HEAP' value='0'/>
      <enumerator name='IGNORED_ON_HEAP' value='1'/>
      <enumerator name='MAYBE_LIVE' value='2'/>
      <enumerator name='IN_GLOBAL_DATA' value='3'/>
      <enumerator name='THREAD_DATA' value='4'/>
      <enumerator name='THREAD_REGISTERS' value='5'/>
    </enum-decl>
    <!-- size_t[4] -->
    <array-type-def dimensions='1' type-id='type-id-61' size-in-bits='256' hash='3faccf7f3517bdb4' id='type-id-359'>
      <!-- <anonymous range>[4] -->
      <subrange length='4' lower-bound='0' upper-bound='3' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='cee611f4a73e486c' id='type-id-360'/>
    </array-type-def>
    <!-- struct AllocObject -->
    <class-decl name='AllocObject' is-struct='yes' visibility='default' size-in-bits='192' filepath='src/heap-checker.cc' line='356' column='1' hash='55c7da8fdf062763' id='type-id-361'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- void* AllocObject::ptr -->
        <var-decl name='ptr' type-id='type-id-56' visibility='default' filepath='src/heap-checker.cc' line='357' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- uintptr_t AllocObject::size -->
        <var-decl name='size' type-id='type-id-277' visibility='default' filepath='src/heap-checker.cc' line='358' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- ObjectPlacement AllocObject::place -->
        <var-decl name='place' type-id='type-id-358' visibility='default' filepath='src/heap-checker.cc' line='359' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct HeapProfileBucket -->
    <class-decl name='HeapProfileBucket' is-struct='yes' visibility='default' size-in-bits='448' filepath='src/heap-profile-stats.h' line='68' column='1' hash='2e84093fba1c7854' id='type-id-289'>
      <!-- struct HeapProfileStats -->
      <base-class access='public' layout-offset-in-bits='0' type-id='type-id-285'/>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- uintptr_t HeapProfileBucket::hash -->
        <var-decl name='hash' type-id='type-id-277' visibility='default' filepath='src/heap-profile-stats.h' line='72' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- int HeapProfileBucket::depth -->
        <var-decl name='depth' type-id='type-id-1' visibility='default' filepath='src/heap-profile-stats.h' line='73' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='320'>
        <!-- void** HeapProfileBucket::stack -->
        <var-decl name='stack' type-id='type-id-184' visibility='default' filepath='src/heap-profile-stats.h' line='74' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='384'>
        <!-- HeapProfileBucket* HeapProfileBucket::next -->
        <var-decl name='next' type-id='type-id-344' visibility='default' filepath='src/heap-profile-stats.h' line='75' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct HeapProfileStats -->
    <class-decl name='HeapProfileStats' is-struct='yes' visibility='default' size-in-bits='192' filepath='src/heap-profile-stats.h' line='54' column='1' hash='0d34ab555cebf165' id='type-id-285'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int32 HeapProfileStats::allocs -->
        <var-decl name='allocs' type-id='type-id-81' visibility='default' filepath='src/heap-profile-stats.h' line='61' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- int32 HeapProfileStats::frees -->
        <var-decl name='frees' type-id='type-id-81' visibility='default' filepath='src/heap-profile-stats.h' line='62' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- int64 HeapProfileStats::alloc_size -->
        <var-decl name='alloc_size' type-id='type-id-105' visibility='default' filepath='src/heap-profile-stats.h' line='63' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- int64 HeapProfileStats::free_size -->
        <var-decl name='free_size' type-id='type-id-105' visibility='default' filepath='src/heap-profile-stats.h' line='64' column='1'/>
      </data-member>
    </class-decl>
    <!-- typedef intptr_t AtomicWord -->
    <typedef-decl name='AtomicWord' type-id='type-id-362' size-in-bits='64' filepath='src/base/atomicops.h' line='129' column='1' hash='b119fe0931d2ee10#2' id='type-id-245'/>
    <!-- typedef std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> > DisabledRangeMap -->
    <typedef-decl name='DisabledRangeMap' type-id='type-id-363' size-in-bits='384' filepath='src/heap-checker.cc' line='411' column='1' id='type-id-364'/>
    <!-- typedef std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> > GlobalRegionCallerRangeMap -->
    <typedef-decl name='GlobalRegionCallerRangeMap' type-id='type-id-365' size-in-bits='384' filepath='src/heap-checker.cc' line='432' column='1' id='type-id-366'/>
    <!-- typedef std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> > LibraryLiveObjectsStacks -->
    <typedef-decl name='LibraryLiveObjectsStacks' type-id='type-id-367' size-in-bits='384' filepath='src/heap-checker.cc' line='397' column='1' id='type-id-368'/>
    <!-- typedef std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > LiveObjectsStack -->
    <typedef-decl name='LiveObjectsStack' type-id='type-id-369' size-in-bits='192' filepath='src/heap-checker.cc' line='384' column='1' id='type-id-370'/>
    <!-- typedef void (*)(void*) MallocHook_DeleteHook -->
    <typedef-decl name='MallocHook_DeleteHook' type-id='type-id-255' size-in-bits='64' filepath='./src/gperftools/malloc_hook_c.h' line='76' column='1' hash='fd7a63c0c6c822c4' id='type-id-371'/>
    <!-- typedef void (*)(void*, void*, size_t, int, int, int, off_t) MallocHook_MmapHook -->
    <typedef-decl name='MallocHook_MmapHook' type-id='type-id-372' size-in-bits='64' filepath='./src/gperftools/malloc_hook_c.h' line='99' column='1' hash='fd7a63c0c6c822c4' id='type-id-373'/>
    <!-- typedef void (*)(void*, size_t) MallocHook_NewHook -->
    <typedef-decl name='MallocHook_NewHook' type-id='type-id-97' size-in-bits='64' filepath='./src/gperftools/malloc_hook_c.h' line='70' column='1' hash='fd7a63c0c6c822c4' id='type-id-374'/>
    <!-- typedef void (*)(void*, ptrdiff_t) MallocHook_SbrkHook -->
    <typedef-decl name='MallocHook_SbrkHook' type-id='type-id-375' size-in-bits='64' filepath='./src/gperftools/malloc_hook_c.h' line='144' column='1' hash='fd7a63c0c6c822c4' id='type-id-376'/>
    <!-- typedef int RawFD -->
    <typedef-decl name='RawFD' type-id='type-id-1' size-in-bits='32' filepath='./src/base/logging.h' line='251' column='1' hash='09d17c08f594edc7' id='type-id-83'/>
    <!-- typedef std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> > StackTopSet -->
    <typedef-decl name='StackTopSet' type-id='type-id-377' size-in-bits='384' filepath='src/heap-checker.cc' line='422' column='1' id='type-id-378'/>
    <!-- typedef long int __intptr_t -->
    <typedef-decl name='__intptr_t' type-id='type-id-179' size-in-bits='64' filepath='/usr/include/bits/types.h' line='189' column='1' hash='b119fe0931d2ee10' id='type-id-379'/>
    <!-- typedef long int __ssize_t -->
    <typedef-decl name='__ssize_t' type-id='type-id-179' size-in-bits='64' filepath='/usr/include/bits/types.h' line='180' column='1' hash='b119fe0931d2ee10' id='type-id-380'/>
    <!-- typedef __intptr_t intptr_t -->
    <typedef-decl name='intptr_t' type-id='type-id-379' size-in-bits='64' filepath='/usr/include/unistd.h' line='268' column='1' hash='b119fe0931d2ee10#2' id='type-id-362'/>
    <!-- typedef __ssize_t ssize_t -->
    <typedef-decl name='ssize_t' type-id='type-id-380' size-in-bits='64' filepath='/usr/include/sys/types.h' line='110' column='1' hash='b119fe0931d2ee10' id='type-id-278'/>
    <!-- void*[32] -->
    <array-type-def dimensions='1' type-id='type-id-56' hash='5d3fd11335b842ea' id='type-id-328'>
      <!-- <anonymous range>[32] -->
      <subrange length='32' lower-bound='0' upper-bound='31' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='99f823ef025a9d75' id='type-id-381'/>
    </array-type-def>
    <!-- AddressMap<HeapProfileTable::AllocValue>* -->
    <pointer-type-def type-id='type-id-248' size-in-bits='64' hash='27ca620fdc0acd81' id='type-id-257'/>
    <!-- AllocObject& -->
    <reference-type-def kind='lvalue' type-id='type-id-361' size-in-bits='64' hash='c626c1f004b7edfa' id='type-id-382'/>
    <!-- AllocObject* -->
    <pointer-type-def type-id='type-id-361' size-in-bits='64' hash='98e4132b728e09d4' id='type-id-383'/>
    <!-- AllocObject* const -->
    <qualified-type-def type-id='type-id-383' const='yes' hash='c4a16ff4a37103ce' id='type-id-384'/>
    <!-- AllocObject* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-384' size-in-bits='64' hash='f5fb013facda5ffa' id='type-id-385'/>
    <!-- AllocObject*& -->
    <reference-type-def kind='lvalue' type-id='type-id-383' size-in-bits='64' hash='86490b5895bbed86' id='type-id-386'/>
    <!-- DisabledRangeMap* -->
    <pointer-type-def type-id='type-id-364' size-in-bits='64' hash='a3f9b8e2c6edab54' id='type-id-387'/>
    <!-- DisabledRangeMap** -->
    <pointer-type-def type-id='type-id-387' size-in-bits='64' hash='1b2d2eb3fd01e066' id='type-id-388'/>
    <!-- GlobalRegionCallerRangeMap* -->
    <pointer-type-def type-id='type-id-366' size-in-bits='64' hash='c0244ea8ad03b845' id='type-id-389'/>
    <!-- GlobalRegionCallerRangeMap** -->
    <pointer-type-def type-id='type-id-389' size-in-bits='64' hash='c819f0d9982d0e3f' id='type-id-390'/>
    <!-- GoogleInitializer* -->
    <pointer-type-def type-id='type-id-259' size-in-bits='64' hash='566791fedbd89a17' id='type-id-264'/>
    <!-- GoogleInitializer* const -->
    <qualified-type-def type-id='type-id-264' const='yes' hash='832c270a6145f187' id='type-id-391'/>
    <!-- HeapCleaner* -->
    <pointer-type-def type-id='type-id-265' size-in-bits='64' hash='a79471b92bd2625a' id='type-id-268'/>
    <!-- HeapCleaner* const -->
    <qualified-type-def type-id='type-id-268' const='yes' hash='21a89aebcf94d950' id='type-id-392'/>
    <!-- HeapLeakChecker* -->
    <pointer-type-def type-id='type-id-269' size-in-bits='64' hash='d55377855cf76ce7' id='type-id-279'/>
    <!-- HeapLeakChecker* const -->
    <qualified-type-def type-id='type-id-279' const='yes' hash='b93bb1ff52f08527' id='type-id-393'/>
    <!-- HeapLeakChecker::Disabler* -->
    <pointer-type-def type-id='type-id-270' size-in-bits='64' hash='10cd53d230669192' id='type-id-271'/>
    <!-- HeapLeakChecker::Disabler* const -->
    <qualified-type-def type-id='type-id-271' const='yes' hash='c703da715da761f1' id='type-id-394'/>
    <!-- HeapLeakChecker::RangeValue& -->
    <reference-type-def kind='lvalue' type-id='type-id-276' size-in-bits='64' hash='734c32c7a2c39822' id='type-id-395'/>
    <!-- HeapProfileBucket* -->
    <pointer-type-def type-id='type-id-289' size-in-bits='64' hash='58e57fc994709824' id='type-id-344'/>
    <!-- HeapProfileTable* -->
    <pointer-type-def type-id='type-id-281' size-in-bits='64' hash='921e04b160c7d1f7' id='type-id-313'/>
    <!-- HeapProfileTable** -->
    <pointer-type-def type-id='type-id-313' size-in-bits='64' hash='ec9d5108eb9a2b3e' id='type-id-396'/>
    <!-- HeapProfileTable::AddNonLiveArgs* -->
    <pointer-type-def type-id='type-id-282' size-in-bits='64' hash='e48cd8b4058344df' id='type-id-320'/>
    <!-- HeapProfileTable::AllocInfo* -->
    <pointer-type-def type-id='type-id-287' size-in-bits='64' hash='f8d18ced706fb73f' id='type-id-321'/>
    <!-- HeapProfileTable::AllocValue* -->
    <pointer-type-def type-id='type-id-258' size-in-bits='64' hash='7505dcae5582781d' id='type-id-300'/>
    <!-- HeapProfileTable::AllocValue::Bucket* -->
    <pointer-type-def type-id='type-id-288' size-in-bits='64' hash='88df8b6683f98ed2' id='type-id-296'/>
    <!-- HeapProfileTable::AllocValue::Bucket** -->
    <pointer-type-def type-id='type-id-296' size-in-bits='64' hash='4df5de4be2947731' id='type-id-310'/>
    <!-- HeapProfileTable::AllocationMap* -->
    <pointer-type-def type-id='type-id-299' size-in-bits='64' hash='739e1e4f1de648e5' id='type-id-311'/>
    <!-- HeapProfileTable::BufferArgs* -->
    <pointer-type-def type-id='type-id-290' size-in-bits='64' hash='ec052920a6de5bb1' id='type-id-317'/>
    <!-- HeapProfileTable::DumpArgs* -->
    <pointer-type-def type-id='type-id-291' size-in-bits='64' hash='6f6cdf84d20bfe66' id='type-id-397'/>
    <!-- HeapProfileTable::DumpArgs::Stats* -->
    <pointer-type-def type-id='type-id-292' size-in-bits='64' hash='15d73fb7ebf997cd' id='type-id-293'/>
    <!-- HeapProfileTable::Snapshot* -->
    <pointer-type-def type-id='type-id-294' size-in-bits='64' hash='ffd8886d4bc3cd83' id='type-id-283'/>
    <!-- HeapProfileTable::Snapshot::ReportState* -->
    <pointer-type-def type-id='type-id-297' size-in-bits='64' hash='5c407806d8cefa3e' id='type-id-301'/>
    <!-- LibraryLiveObjectsStacks* -->
    <pointer-type-def type-id='type-id-368' size-in-bits='64' hash='01bb7b5b689c1c55' id='type-id-398'/>
    <!-- LibraryLiveObjectsStacks** -->
    <pointer-type-def type-id='type-id-398' size-in-bits='64' hash='4871c20c22ea1d7f' id='type-id-399'/>
    <!-- LiveObjectsStack* -->
    <pointer-type-def type-id='type-id-370' size-in-bits='64' hash='cd51ae8080840d3c' id='type-id-400'/>
    <!-- LiveObjectsStack** -->
    <pointer-type-def type-id='type-id-400' size-in-bits='64' hash='8ff287de4d2c5168' id='type-id-401'/>
    <!-- LowLevelAlloc::Arena* -->
    <pointer-type-def type-id='type-id-323' size-in-bits='64' hash='b4325a8ff1c518d9' id='type-id-87'/>
    <!-- MemoryRegionMap::LockHolder* -->
    <pointer-type-def type-id='type-id-325' size-in-bits='64' hash='84f9f55ce069bbc8' id='type-id-402'/>
    <!-- MemoryRegionMap::LockHolder* const -->
    <qualified-type-def type-id='type-id-402' const='yes' hash='ed3f9b15f992fa41' id='type-id-403'/>
    <!-- MemoryRegionMap::Region* -->
    <pointer-type-def type-id='type-id-327' size-in-bits='64' hash='2a25bcdaa99f44a6' id='type-id-343'/>
    <!-- STL_Allocator<AllocObject, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-347' size-in-bits='64' hash='64be31e301eb3486' id='type-id-404'/>
    <!-- STL_Allocator<AllocObject, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-347' size-in-bits='64' hash='2f8c03e9ae80a3c9' id='type-id-405'/>
    <!-- STL_Allocator<AllocObject, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-405' const='yes' hash='35c8ac3ca946c176' id='type-id-406'/>
    <!-- STL_Allocator<char, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-348' size-in-bits='64' hash='a84940de32fb1c65' id='type-id-407'/>
    <!-- STL_Allocator<char, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-407' const='yes' hash='9652461c3c0e40bd' id='type-id-408'/>
    <!-- STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-349' size-in-bits='64' hash='8860d9d98ff0c5e6' id='type-id-409'/>
    <!-- STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-409' const='yes' hash='6f73a973f315d1c7' id='type-id-410'/>
    <!-- STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-350' size-in-bits='64' hash='39386eaeadc1b565' id='type-id-411'/>
    <!-- STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-350' size-in-bits='64' hash='c546f7d6cbb2b3b5' id='type-id-412'/>
    <!-- STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-412' const='yes' hash='394b945a8e246165' id='type-id-413'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-351' size-in-bits='64' hash='e024f02a6c421546' id='type-id-414'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-351' size-in-bits='64' hash='d154d03963a52336' id='type-id-415'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-415' const='yes' hash='2af7178fd72acf36' id='type-id-416'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-352' size-in-bits='64' hash='8c1e6d88e90135d3' id='type-id-417'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-352' size-in-bits='64' hash='279e692a1a354fdc' id='type-id-418'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-418' const='yes' hash='e53abfb81f65ffee' id='type-id-419'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-353' size-in-bits='64' hash='cf65b592ba11906e' id='type-id-420'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-353' size-in-bits='64' hash='46071a8c88fc91bc' id='type-id-421'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-421' const='yes' hash='53d53f1cae800899' id='type-id-422'/>
    <!-- STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-354' size-in-bits='64' hash='87bf87ccc55e0167' id='type-id-423'/>
    <!-- STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-423' const='yes' hash='96b3c13e077f4eae' id='type-id-424'/>
    <!-- STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-355' size-in-bits='64' hash='36a02b4c28239f29' id='type-id-425'/>
    <!-- STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-425' const='yes' hash='1f4df51dc90dc614' id='type-id-426'/>
    <!-- STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-356' size-in-bits='64' hash='ec2dbe05548680b1' id='type-id-427'/>
    <!-- STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-427' const='yes' hash='b456d730500e9f17' id='type-id-428'/>
    <!-- STL_Allocator<void*, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-357' size-in-bits='64' hash='1c396c745647dc9e' id='type-id-429'/>
    <!-- STL_Allocator<void*, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-357' size-in-bits='64' hash='5ad964df81e51440' id='type-id-430'/>
    <!-- STL_Allocator<void*, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-430' const='yes' hash='94372520e79d20a9' id='type-id-431'/>
    <!-- StackTopSet* -->
    <pointer-type-def type-id='type-id-378' size-in-bits='64' hash='18187cd5f591babc' id='type-id-432'/>
    <!-- StackTopSet** -->
    <pointer-type-def type-id='type-id-432' size-in-bits='64' hash='665f9308bee6e52c' id='type-id-433'/>
    <!-- __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-434' size-in-bits='64' hash='d4cbfc244407fb5c' id='type-id-435'/>
    <!-- __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-434' size-in-bits='64' hash='7e1ef7223c31038a' id='type-id-436'/>
    <!-- __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* const -->
    <qualified-type-def type-id='type-id-436' const='yes' hash='bba9c6b74cc3b9d2' id='type-id-437'/>
    <!-- __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-438' size-in-bits='64' hash='723eb65ccec2b3fa' id='type-id-439'/>
    <!-- __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-438' size-in-bits='64' hash='b7a6582dd6224319' id='type-id-440'/>
    <!-- __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* const -->
    <qualified-type-def type-id='type-id-440' const='yes' hash='783442b6db2f286a' id='type-id-441'/>
    <!-- __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-442' size-in-bits='64' hash='0ce6bcbc44150da1' id='type-id-443'/>
    <!-- __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >* -->
    <pointer-type-def type-id='type-id-442' size-in-bits='64' hash='9241321b5f82df63' id='type-id-444'/>
    <!-- __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >* const -->
    <qualified-type-def type-id='type-id-444' const='yes' hash='037df4282af9fb7c' id='type-id-445'/>
    <!-- __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-446' size-in-bits='64' hash='6fa7bb78e219b8da' id='type-id-447'/>
    <!-- __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-446' size-in-bits='64' hash='d58baffd6a29a693' id='type-id-448'/>
    <!-- __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >* const -->
    <qualified-type-def type-id='type-id-448' const='yes' hash='3dbfaa60559a1c5a' id='type-id-449'/>
    <!-- __gnu_cxx::new_allocator<char>* const -->
    <qualified-type-def type-id='type-id-450' const='yes' hash='e44adfc70c429f12' id='type-id-451'/>
    <!-- __gnu_cxx::new_allocator<void (*)()>* -->
    <pointer-type-def type-id='type-id-452' size-in-bits='64' hash='64ae31aa0c47d7ea' id='type-id-453'/>
    <!-- __gnu_cxx::new_allocator<void (*)()>* const -->
    <qualified-type-def type-id='type-id-453' const='yes' hash='bc516a1dca02f1b9' id='type-id-454'/>
    <!-- base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)>* -->
    <pointer-type-def type-id='type-id-455' size-in-bits='64' hash='4f0c3d505352c896' id='type-id-456'/>
    <!-- base::internal::HookList<void (*)(const void*, ptrdiff_t)>* -->
    <pointer-type-def type-id='type-id-457' size-in-bits='64' hash='d3ad080fd241ed93' id='type-id-458'/>
    <!-- const AddressMap<HeapProfileTable::AllocValue> -->
    <qualified-type-def type-id='type-id-248' const='yes' hash='893a52b56acbc372' id='type-id-459'/>
    <!-- const AddressMap<HeapProfileTable::AllocValue>* -->
    <pointer-type-def type-id='type-id-459' size-in-bits='64' hash='d527572b90279b81' id='type-id-460'/>
    <!-- const AddressMap<HeapProfileTable::AllocValue>* const -->
    <qualified-type-def type-id='type-id-460' const='yes' hash='2a3e93edb9eb13e5' id='type-id-461'/>
    <!-- const AllocObject -->
    <qualified-type-def type-id='type-id-361' const='yes' hash='accb06e5d78d2e25' id='type-id-462'/>
    <!-- const AllocObject& -->
    <reference-type-def kind='lvalue' type-id='type-id-462' size-in-bits='64' hash='e17d6d2de7bb16db' id='type-id-463'/>
    <!-- const AllocObject* -->
    <pointer-type-def type-id='type-id-462' size-in-bits='64' hash='88a9ce81957ef4cd' id='type-id-464'/>
    <!-- const AllocObject* const -->
    <qualified-type-def type-id='type-id-464' const='yes' hash='c5259849b368cf1c' id='type-id-465'/>
    <!-- const AllocObject* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-465' size-in-bits='64' hash='af20903bff4aa74a' id='type-id-466'/>
    <!-- const GoogleInitializer::VoidFunction -->
    <qualified-type-def type-id='type-id-260' const='yes' hash='2f87264feb5513f7' id='type-id-263'/>
    <!-- const HeapLeakChecker -->
    <qualified-type-def type-id='type-id-269' const='yes' hash='c767313c280eac82' id='type-id-467'/>
    <!-- const HeapLeakChecker& -->
    <reference-type-def kind='lvalue' type-id='type-id-467' size-in-bits='64' hash='7a14f1fb59e073ff' id='type-id-468'/>
    <!-- const HeapLeakChecker* -->
    <pointer-type-def type-id='type-id-467' size-in-bits='64' hash='79db06d5b12edb72' id='type-id-280'/>
    <!-- const HeapLeakChecker* const -->
    <qualified-type-def type-id='type-id-280' const='yes' hash='e1405d6ea4a45adc' id='type-id-469'/>
    <!-- const HeapLeakChecker::Disabler -->
    <qualified-type-def type-id='type-id-270' const='yes' hash='9c8eaf28f001102c' id='type-id-470'/>
    <!-- const HeapLeakChecker::Disabler& -->
    <reference-type-def kind='lvalue' type-id='type-id-470' size-in-bits='64' hash='195a2884e02e3551' id='type-id-471'/>
    <!-- const HeapLeakChecker::RangeValue -->
    <qualified-type-def type-id='type-id-276' const='yes' hash='8ce2a42a0941277a' id='type-id-472'/>
    <!-- const HeapLeakChecker::RangeValue& -->
    <reference-type-def kind='lvalue' type-id='type-id-472' size-in-bits='64' hash='c85b13dabdf5fcb5' id='type-id-473'/>
    <!-- const HeapProfileStats -->
    <qualified-type-def type-id='type-id-285' const='yes' hash='cd747c029beb62ad' id='type-id-474'/>
    <!-- const HeapProfileStats& -->
    <reference-type-def kind='lvalue' type-id='type-id-474' size-in-bits='64' hash='803ff467052f1ff9' id='type-id-475'/>
    <!-- const HeapProfileStats* -->
    <pointer-type-def type-id='type-id-474' size-in-bits='64' hash='11f31473db6b4e3c' id='type-id-476'/>
    <!-- const HeapProfileTable -->
    <qualified-type-def type-id='type-id-281' const='yes' hash='c7622e4934b890df' id='type-id-477'/>
    <!-- const HeapProfileTable& -->
    <reference-type-def kind='lvalue' type-id='type-id-477' size-in-bits='64' hash='796f5fc8f3d534b3' id='type-id-478'/>
    <!-- const HeapProfileTable* -->
    <pointer-type-def type-id='type-id-477' size-in-bits='64' hash='b4b57f8dcd10756b' id='type-id-318'/>
    <!-- const HeapProfileTable* const -->
    <qualified-type-def type-id='type-id-318' const='yes' hash='19d4d7c209401c90' id='type-id-479'/>
    <!-- const HeapProfileTable::AllocContextInfo -->
    <qualified-type-def type-id='type-id-284' const='yes' hash='32cedd583101f33f' id='type-id-480'/>
    <!-- const HeapProfileTable::AllocContextInfo& -->
    <reference-type-def kind='lvalue' type-id='type-id-480' size-in-bits='64' hash='da9c33b8ee5e972e' id='type-id-481'/>
    <!-- const HeapProfileTable::AllocInfo -->
    <qualified-type-def type-id='type-id-287' const='yes' hash='d31cb430fa8b1f8e' id='type-id-482'/>
    <!-- const HeapProfileTable::AllocInfo& -->
    <reference-type-def kind='lvalue' type-id='type-id-482' size-in-bits='64' hash='56c77bd15b3381a8' id='type-id-483'/>
    <!-- const HeapProfileTable::AllocValue -->
    <qualified-type-def type-id='type-id-258' const='yes' hash='05aa5db0903e12f1' id='type-id-484'/>
    <!-- const HeapProfileTable::AllocValue& -->
    <reference-type-def kind='lvalue' type-id='type-id-484' size-in-bits='64' hash='9a766da64f0c6086' id='type-id-312'/>
    <!-- const HeapProfileTable::AllocValue* -->
    <pointer-type-def type-id='type-id-484' size-in-bits='64' hash='663c53f2d84bf7f7' id='type-id-485'/>
    <!-- const HeapProfileTable::AllocValue* const -->
    <qualified-type-def type-id='type-id-485' const='yes' hash='73d0ed1b7c1d40e4' id='type-id-486'/>
    <!-- const HeapProfileTable::AllocValue::Bucket -->
    <qualified-type-def type-id='type-id-288' const='yes' hash='05676b0784bb4b46' id='type-id-487'/>
    <!-- const HeapProfileTable::AllocValue::Bucket& -->
    <reference-type-def kind='lvalue' type-id='type-id-487' size-in-bits='64' hash='134ac618967234ac' id='type-id-314'/>
    <!-- const HeapProfileTable::AllocValue::Bucket* -->
    <pointer-type-def type-id='type-id-487' size-in-bits='64' hash='4bccd3da311c3510' id='type-id-316'/>
    <!-- const HeapProfileTable::BufferArgs -->
    <qualified-type-def type-id='type-id-290' const='yes' hash='64055b4f3abf9f8a' id='type-id-488'/>
    <!-- const HeapProfileTable::BufferArgs& -->
    <reference-type-def kind='lvalue' type-id='type-id-488' size-in-bits='64' hash='1f007f1e9579c282' id='type-id-489'/>
    <!-- const HeapProfileTable::DumpArgs -->
    <qualified-type-def type-id='type-id-291' const='yes' hash='888107b405b4de34' id='type-id-490'/>
    <!-- const HeapProfileTable::DumpArgs& -->
    <reference-type-def kind='lvalue' type-id='type-id-490' size-in-bits='64' hash='732f237f661e54f8' id='type-id-315'/>
    <!-- const HeapProfileTable::DumpArgs::Stats -->
    <qualified-type-def type-id='type-id-292' const='yes' hash='5a67046b16fca9c5' id='type-id-491'/>
    <!-- const HeapProfileTable::DumpArgs::Stats& -->
    <reference-type-def kind='lvalue' type-id='type-id-491' size-in-bits='64' hash='4e6e7195b7a0db7f' id='type-id-492'/>
    <!-- const HeapProfileTable::Snapshot -->
    <qualified-type-def type-id='type-id-294' const='yes' hash='0ca6ba79ddbe3374' id='type-id-493'/>
    <!-- const HeapProfileTable::Snapshot& -->
    <reference-type-def kind='lvalue' type-id='type-id-493' size-in-bits='64' hash='576cee1496c5f615' id='type-id-494'/>
    <!-- const HeapProfileTable::Snapshot* -->
    <pointer-type-def type-id='type-id-493' size-in-bits='64' hash='78c32f713d6dcded' id='type-id-495'/>
    <!-- const HeapProfileTable::Snapshot* const -->
    <qualified-type-def type-id='type-id-495' const='yes' hash='3a143e15f35db0a8' id='type-id-496'/>
    <!-- const MemoryRegionMap::LockHolder -->
    <qualified-type-def type-id='type-id-325' const='yes' hash='5b65356031fd5d8c' id='type-id-497'/>
    <!-- const MemoryRegionMap::LockHolder& -->
    <reference-type-def kind='lvalue' type-id='type-id-497' size-in-bits='64' hash='2870acded8661bab' id='type-id-498'/>
    <!-- const MemoryRegionMap::Region -->
    <qualified-type-def type-id='type-id-327' const='yes' hash='11862c1b4dce7b82' id='type-id-499'/>
    <!-- const MemoryRegionMap::Region& -->
    <reference-type-def kind='lvalue' type-id='type-id-499' size-in-bits='64' hash='3b0aa4d1706ea891' id='type-id-341'/>
    <!-- const MemoryRegionMap::Region* -->
    <pointer-type-def type-id='type-id-499' size-in-bits='64' hash='420a460455857255' id='type-id-342'/>
    <!-- const MemoryRegionMap::Region* const -->
    <qualified-type-def type-id='type-id-342' const='yes' hash='8ee07a3239e471a2' id='type-id-500'/>
    <!-- const STL_Allocator<AllocObject, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-347' const='yes' hash='02bf8467ac7aa7fd' id='type-id-501'/>
    <!-- const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-501' size-in-bits='64' hash='558980db5099f323' id='type-id-502'/>
    <!-- const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-501' size-in-bits='64' hash='44cfae81c1833ddf' id='type-id-503'/>
    <!-- const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-503' const='yes' hash='563c8dac69d32baa' id='type-id-504'/>
    <!-- const STL_Allocator<char, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-348' const='yes' hash='89a0fa66fa2056e8' id='type-id-505'/>
    <!-- const STL_Allocator<char, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-505' size-in-bits='64' hash='6c381c3bca83a2ae' id='type-id-506'/>
    <!-- const STL_Allocator<char, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-505' size-in-bits='64' hash='81d3799e0ada16d6' id='type-id-507'/>
    <!-- const STL_Allocator<char, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-507' const='yes' hash='2d277dbb5ae126c9' id='type-id-508'/>
    <!-- const STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-349' const='yes' hash='ff4d1414952f91ea' id='type-id-509'/>
    <!-- const STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-509' size-in-bits='64' hash='4415aaa04af0a1d2' id='type-id-510'/>
    <!-- const STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-509' size-in-bits='64' hash='4b24fbacd4232d48' id='type-id-511'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-350' const='yes' hash='d5bb7b3f076144a0' id='type-id-512'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-512' size-in-bits='64' hash='c35c75df1c856c4c' id='type-id-513'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-512' size-in-bits='64' hash='979d5a0b30e37bcf' id='type-id-514'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-351' const='yes' hash='34f5bf5b9e080b8d' id='type-id-515'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-515' size-in-bits='64' hash='e0329cd2fcfc7a6c' id='type-id-516'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-515' size-in-bits='64' hash='972c7418d9782a7b' id='type-id-517'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-352' const='yes' hash='9b932f18f4ffd8c9' id='type-id-518'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-518' size-in-bits='64' hash='34bca7e96a457ac5' id='type-id-519'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-518' size-in-bits='64' hash='24d1b3755cc952c6' id='type-id-520'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-353' const='yes' hash='56a7660be37f4087' id='type-id-521'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-521' size-in-bits='64' hash='3d4be12a0443ec6d' id='type-id-522'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-521' size-in-bits='64' hash='86274b334f80c186' id='type-id-523'/>
    <!-- const STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-354' const='yes' hash='aa4c7b616e786375' id='type-id-524'/>
    <!-- const STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-524' size-in-bits='64' hash='3a5f21f273c8087a' id='type-id-525'/>
    <!-- const STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-524' size-in-bits='64' hash='6787ff77ed419caf' id='type-id-526'/>
    <!-- const STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-355' const='yes' hash='7824406c711f6199' id='type-id-527'/>
    <!-- const STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-527' size-in-bits='64' hash='490d6c2102d46ad3' id='type-id-528'/>
    <!-- const STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-527' size-in-bits='64' hash='0d49ae178dff6b2c' id='type-id-529'/>
    <!-- const STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-356' const='yes' hash='067e0ab9cd7f0e64' id='type-id-530'/>
    <!-- const STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-530' size-in-bits='64' hash='72bbc46f94d100e6' id='type-id-531'/>
    <!-- const STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-530' size-in-bits='64' hash='9d28fe08d2815148' id='type-id-532'/>
    <!-- const STL_Allocator<void*, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-357' const='yes' hash='e7faf02809ae4e31' id='type-id-533'/>
    <!-- const STL_Allocator<void*, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-533' size-in-bits='64' hash='3797d10f0c77c7a0' id='type-id-534'/>
    <!-- const STL_Allocator<void*, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-533' size-in-bits='64' hash='6d80234105dc4ed8' id='type-id-535'/>
    <!-- const STL_Allocator<void*, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-535' const='yes' hash='f57a3d1ab20c7b92' id='type-id-536'/>
    <!-- const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > -->
    <qualified-type-def type-id='type-id-434' const='yes' hash='6f596c2718e0acd8' id='type-id-537'/>
    <!-- const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-537' size-in-bits='64' hash='1b86e380fbe195fb' id='type-id-538'/>
    <!-- const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-537' size-in-bits='64' hash='ea0dbc36d82fd835' id='type-id-539'/>
    <!-- const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* const -->
    <qualified-type-def type-id='type-id-539' const='yes' hash='6d2718e1fc6122f1' id='type-id-540'/>
    <!-- const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > -->
    <qualified-type-def type-id='type-id-438' const='yes' hash='2c522ad53a4301b6' id='type-id-541'/>
    <!-- const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-541' size-in-bits='64' hash='fd288ef0628ba1ec' id='type-id-542'/>
    <!-- const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-541' size-in-bits='64' hash='38e20c89fbbd87de' id='type-id-543'/>
    <!-- const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* const -->
    <qualified-type-def type-id='type-id-543' const='yes' hash='bda916e2efd299c9' id='type-id-544'/>
    <!-- const __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > > -->
    <qualified-type-def type-id='type-id-442' const='yes' hash='cec0e113fb00e4a2' id='type-id-545'/>
    <!-- const __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-545' size-in-bits='64' hash='3bfcb680cfcc959a' id='type-id-546'/>
    <!-- const __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >* -->
    <pointer-type-def type-id='type-id-545' size-in-bits='64' hash='b457bfdd10a11c12' id='type-id-547'/>
    <!-- const __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >* const -->
    <qualified-type-def type-id='type-id-547' const='yes' hash='acfd9fb0e44a14d8' id='type-id-548'/>
    <!-- const __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > > -->
    <qualified-type-def type-id='type-id-446' const='yes' hash='63d17a1ee9728233' id='type-id-549'/>
    <!-- const __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-549' size-in-bits='64' hash='044af8bbda9438d8' id='type-id-550'/>
    <!-- const __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-549' size-in-bits='64' hash='3892adaf14a09c00' id='type-id-551'/>
    <!-- const __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >* const -->
    <qualified-type-def type-id='type-id-551' const='yes' hash='386c6b6b5e645987' id='type-id-552'/>
    <!-- const __gnu_cxx::new_allocator<void (*)()> -->
    <qualified-type-def type-id='type-id-452' const='yes' hash='a705758eaf016b75' id='type-id-553'/>
    <!-- const __gnu_cxx::new_allocator<void (*)()>& -->
    <reference-type-def kind='lvalue' type-id='type-id-553' size-in-bits='64' hash='2e0dcad20ce8cc23' id='type-id-554'/>
    <!-- const __gnu_cxx::new_allocator<void (*)()>* -->
    <pointer-type-def type-id='type-id-553' size-in-bits='64' hash='ba83be0c745964ac' id='type-id-555'/>
    <!-- const __gnu_cxx::new_allocator<void (*)()>* const -->
    <qualified-type-def type-id='type-id-555' const='yes' hash='a4b9da88f92c8290' id='type-id-556'/>
    <!-- const base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)> -->
    <qualified-type-def type-id='type-id-455' const='yes' hash='4fffe40af4225f17' id='type-id-557'/>
    <!-- const base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)>* -->
    <pointer-type-def type-id='type-id-557' size-in-bits='64' hash='7a5827bc5f47a325' id='type-id-558'/>
    <!-- const base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)>* const -->
    <qualified-type-def type-id='type-id-558' const='yes' hash='ce99f8af4cc12892' id='type-id-559'/>
    <!-- const base::internal::HookList<void (*)(const void*, ptrdiff_t)> -->
    <qualified-type-def type-id='type-id-457' const='yes' hash='ddf4c816c9104c1e' id='type-id-560'/>
    <!-- const base::internal::HookList<void (*)(const void*, ptrdiff_t)>* -->
    <pointer-type-def type-id='type-id-560' size-in-bits='64' hash='6eeb6884924b7ef4' id='type-id-561'/>
    <!-- const base::internal::HookList<void (*)(const void*, ptrdiff_t)>* const -->
    <qualified-type-def type-id='type-id-561' const='yes' hash='252587d75e6e06dc' id='type-id-562'/>
    <!-- const bool -->
    <qualified-type-def type-id='type-id-59' const='yes' hash='2b32da4512609d62' id='type-id-563'/>
    <!-- const bool& -->
    <reference-type-def kind='lvalue' type-id='type-id-563' size-in-bits='64' hash='883080011329ce3a' id='type-id-564'/>
    <!-- const char* const -->
    <qualified-type-def type-id='type-id-60' const='yes' hash='ec42cf78a9d93a8c' id='type-id-262'/>
    <!-- const char* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-262' size-in-bits='64' hash='99be3ab0d9b2fe43' id='type-id-565'/>
    <!-- const size_t -->
    <qualified-type-def type-id='type-id-61' const='yes' hash='86827e66a8bd4e2d' id='type-id-566'/>
    <!-- const size_t& -->
    <reference-type-def kind='lvalue' type-id='type-id-566' size-in-bits='64' hash='59df9380ec284028' id='type-id-567'/>
    <!-- const std::_Identity<long unsigned int> -->
    <qualified-type-def type-id='type-id-568' const='yes' hash='5f73e58a5c84aef5' id='type-id-569'/>
    <!-- const std::_Identity<long unsigned int>* -->
    <pointer-type-def type-id='type-id-569' size-in-bits='64' hash='1666e15aa677bde0' id='type-id-570'/>
    <!-- const std::_Identity<long unsigned int>* const -->
    <qualified-type-def type-id='type-id-570' const='yes' hash='b88850ef74728474' id='type-id-571'/>
    <!-- const std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-572' const='yes' hash='75ea5bc3086087de' id='type-id-573'/>
    <!-- const std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-573' size-in-bits='64' hash='e640cda2aa1cb557' id='type-id-574'/>
    <!-- const std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-573' size-in-bits='64' hash='e59019ab68bb93cc' id='type-id-575'/>
    <!-- const std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-575' const='yes' hash='1e063f09b41870b9' id='type-id-576'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-577' const='yes' hash='f9a5417229a901cc' id='type-id-578'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-578' size-in-bits='64' hash='5546678f6c110a67' id='type-id-579'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-578' size-in-bits='64' hash='f44e5759e728708e' id='type-id-580'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-580' const='yes' hash='6ba8831bc8dd12e2' id='type-id-581'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-582' const='yes' hash='036882b9abc668fe' id='type-id-583'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-583' size-in-bits='64' hash='00e5672ecb47e9c0' id='type-id-584'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-583' size-in-bits='64' hash='16ed76410190f9f0' id='type-id-585'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-585' const='yes' hash='7825e12a5b10e8bf' id='type-id-586'/>
    <!-- const std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-587' const='yes' hash='41459fe75b86ea9a' id='type-id-588'/>
    <!-- const std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-588' size-in-bits='64' hash='227d97d21b911769' id='type-id-589'/>
    <!-- const std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-588' size-in-bits='64' hash='8e0417d1e8308484' id='type-id-590'/>
    <!-- const std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-590' const='yes' hash='8c6076881beabb37' id='type-id-591'/>
    <!-- const std::_Rb_tree_const_iterator<MemoryRegionMap::Region> -->
    <qualified-type-def type-id='type-id-331' const='yes' hash='a99374d6bab7ff11' id='type-id-592'/>
    <!-- const std::_Rb_tree_const_iterator<MemoryRegionMap::Region>& -->
    <reference-type-def kind='lvalue' type-id='type-id-592' size-in-bits='64' hash='68ddc2d52c6a6f0e' id='type-id-593'/>
    <!-- const std::_Rb_tree_const_iterator<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-592' size-in-bits='64' hash='77fcb720375d81e5' id='type-id-594'/>
    <!-- const std::_Rb_tree_const_iterator<MemoryRegionMap::Region>* const -->
    <qualified-type-def type-id='type-id-594' const='yes' hash='e5855bd345d4f80a' id='type-id-595'/>
    <!-- const std::_Rb_tree_const_iterator<long unsigned int> -->
    <qualified-type-def type-id='type-id-596' const='yes' hash='62026a538fc3cef0' id='type-id-597'/>
    <!-- const std::_Rb_tree_const_iterator<long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-597' size-in-bits='64' hash='f76f545fd55e2e0f' id='type-id-598'/>
    <!-- const std::_Rb_tree_const_iterator<long unsigned int>* -->
    <pointer-type-def type-id='type-id-597' size-in-bits='64' hash='c9f801bbf8208ca9' id='type-id-599'/>
    <!-- const std::_Rb_tree_const_iterator<long unsigned int>* const -->
    <qualified-type-def type-id='type-id-599' const='yes' hash='6c87dd7bf098658f' id='type-id-600'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
    <qualified-type-def type-id='type-id-601' const='yes' hash='b3d04a04999e3451' id='type-id-602'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-602' size-in-bits='64' hash='8b2093921c869ec5' id='type-id-603'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* -->
    <pointer-type-def type-id='type-id-602' size-in-bits='64' hash='136647d98c968c3a' id='type-id-604'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* const -->
    <qualified-type-def type-id='type-id-604' const='yes' hash='74beb1db87ac0261' id='type-id-605'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> > -->
    <qualified-type-def type-id='type-id-606' const='yes' hash='b2890eb2fd637e61' id='type-id-607'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-607' size-in-bits='64' hash='efce95b678b2a74a' id='type-id-608'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >* -->
    <pointer-type-def type-id='type-id-607' size-in-bits='64' hash='24b155ae4359385b' id='type-id-609'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >* const -->
    <qualified-type-def type-id='type-id-609' const='yes' hash='6f043a72fbb15e37' id='type-id-610'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
    <qualified-type-def type-id='type-id-611' const='yes' hash='4400d275dc9a785a' id='type-id-612'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-612' size-in-bits='64' hash='fac0b3556a0d889b' id='type-id-613'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* -->
    <pointer-type-def type-id='type-id-612' size-in-bits='64' hash='6bdb5fd7cab981bc' id='type-id-614'/>
    <!-- const std::_Rb_tree_iterator<MemoryRegionMap::Region> -->
    <qualified-type-def type-id='type-id-615' const='yes' hash='10b8509f9e10af31' id='type-id-616'/>
    <!-- const std::_Rb_tree_iterator<MemoryRegionMap::Region>& -->
    <reference-type-def kind='lvalue' type-id='type-id-616' size-in-bits='64' hash='3dc58fd357360ae9' id='type-id-617'/>
    <!-- const std::_Rb_tree_iterator<long unsigned int> -->
    <qualified-type-def type-id='type-id-618' const='yes' hash='e104ebac458ea553' id='type-id-619'/>
    <!-- const std::_Rb_tree_iterator<long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-619' size-in-bits='64' hash='9970212aa7f84772' id='type-id-620'/>
    <!-- const std::_Rb_tree_iterator<long unsigned int>* -->
    <pointer-type-def type-id='type-id-619' size-in-bits='64' hash='c78d15d2c830a8a6' id='type-id-621'/>
    <!-- const std::_Rb_tree_iterator<long unsigned int>* const -->
    <qualified-type-def type-id='type-id-621' const='yes' hash='22442548bcef8330' id='type-id-622'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
    <qualified-type-def type-id='type-id-623' const='yes' hash='bc38e3e661386af6' id='type-id-624'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-624' size-in-bits='64' hash='3bf6764931af2104' id='type-id-625'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* -->
    <pointer-type-def type-id='type-id-624' size-in-bits='64' hash='5fb0526171e4e2ea' id='type-id-626'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* const -->
    <qualified-type-def type-id='type-id-626' const='yes' hash='616ba70558299adb' id='type-id-627'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> > -->
    <qualified-type-def type-id='type-id-628' const='yes' hash='55b02e9d7b57c9fc' id='type-id-629'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-629' size-in-bits='64' hash='b88c4488c3e873b6' id='type-id-630'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >* -->
    <pointer-type-def type-id='type-id-629' size-in-bits='64' hash='b2afef71ecf24327' id='type-id-631'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >* const -->
    <qualified-type-def type-id='type-id-631' const='yes' hash='8560e343ce1b8e90' id='type-id-632'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
    <qualified-type-def type-id='type-id-633' const='yes' hash='ee3eefc6775946df' id='type-id-634'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-634' size-in-bits='64' hash='95b7dec000eb74a8' id='type-id-635'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* -->
    <pointer-type-def type-id='type-id-634' size-in-bits='64' hash='1e2a7686195bf86b' id='type-id-636'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* const -->
    <qualified-type-def type-id='type-id-636' const='yes' hash='03197857f266dc4b' id='type-id-637'/>
    <!-- const std::_Rb_tree_node_base -->
    <qualified-type-def type-id='type-id-638' const='yes' hash='ff152f07e39e1536' id='type-id-639'/>
    <!-- const std::_Rb_tree_node_base* -->
    <pointer-type-def type-id='type-id-639' size-in-bits='64' hash='cdb3ec6f1570c647' id='type-id-640'/>
    <!-- const std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
    <qualified-type-def type-id='type-id-641' const='yes' hash='91e80b0d82b71aad' id='type-id-642'/>
    <!-- const std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* -->
    <pointer-type-def type-id='type-id-642' size-in-bits='64' hash='4ce4a687134f91ae' id='type-id-643'/>
    <!-- const std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* const -->
    <qualified-type-def type-id='type-id-643' const='yes' hash='9e96e0756112acec' id='type-id-644'/>
    <!-- const std::_Select1st<std::pair<const long unsigned int, long unsigned int> > -->
    <qualified-type-def type-id='type-id-645' const='yes' hash='3e3c347d59030f75' id='type-id-646'/>
    <!-- const std::_Select1st<std::pair<const long unsigned int, long unsigned int> >* -->
    <pointer-type-def type-id='type-id-646' size-in-bits='64' hash='5b01944f43b4e8d2' id='type-id-647'/>
    <!-- const std::_Select1st<std::pair<const long unsigned int, long unsigned int> >* const -->
    <qualified-type-def type-id='type-id-647' const='yes' hash='4957b24fc70e1897' id='type-id-648'/>
    <!-- const std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
    <qualified-type-def type-id='type-id-649' const='yes' hash='40538cca5008b9e9' id='type-id-650'/>
    <!-- const std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* -->
    <pointer-type-def type-id='type-id-650' size-in-bits='64' hash='214f00809c568628' id='type-id-651'/>
    <!-- const std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* const -->
    <qualified-type-def type-id='type-id-651' const='yes' hash='afa74f6952aedb0a' id='type-id-652'/>
    <!-- const std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-653' const='yes' hash='2e773d6ff72d904b' id='type-id-654'/>
    <!-- const std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-654' size-in-bits='64' hash='60138fed8e54e614' id='type-id-655'/>
    <!-- const std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-655' const='yes' hash='569513b1be0b1597' id='type-id-656'/>
    <!-- const std::_Vector_base<void (*)(), std::allocator<void (*)()> > -->
    <qualified-type-def type-id='type-id-657' const='yes' hash='c60af80859388e79' id='type-id-658'/>
    <!-- const std::_Vector_base<void (*)(), std::allocator<void (*)()> >* -->
    <pointer-type-def type-id='type-id-658' size-in-bits='64' hash='6776cdf60d657cbe' id='type-id-659'/>
    <!-- const std::_Vector_base<void (*)(), std::allocator<void (*)()> >* const -->
    <qualified-type-def type-id='type-id-659' const='yes' hash='59b6d57bbf63abd7' id='type-id-660'/>
    <!-- const std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-661' const='yes' hash='ed78512334bad26b' id='type-id-662'/>
    <!-- const std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-662' size-in-bits='64' hash='30cea3739833bbe9' id='type-id-663'/>
    <!-- const std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-663' const='yes' hash='45d759dc2980f75b' id='type-id-664'/>
    <!-- const std::allocator<void (*)()> -->
    <qualified-type-def type-id='type-id-665' const='yes' hash='106643b567521cee' id='type-id-666'/>
    <!-- const std::allocator<void (*)()>& -->
    <reference-type-def kind='lvalue' type-id='type-id-666' size-in-bits='64' hash='1e25540bc356fd3f' id='type-id-667'/>
    <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-668' const='yes' hash='632096072e76e63d' id='type-id-669'/>
    <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-669' size-in-bits='64' hash='f20949d6bd2baeca' id='type-id-670'/>
    <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-669' size-in-bits='64' hash='0f813f9423fc70d2' id='type-id-671'/>
    <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-671' const='yes' hash='e8b44390363a5c20' id='type-id-672'/>
    <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep -->
    <qualified-type-def type-id='type-id-673' const='yes' hash='7226944aa4e46352' id='type-id-674'/>
    <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep* -->
    <pointer-type-def type-id='type-id-674' size-in-bits='64' hash='61c33da8fd0cc9a8' id='type-id-675'/>
    <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep* const -->
    <qualified-type-def type-id='type-id-675' const='yes' hash='e3a9df79e286d8c0' id='type-id-676'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> >* const -->
    <qualified-type-def type-id='type-id-677' const='yes' hash='514521c34f0ee6b8' id='type-id-678'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep -->
    <qualified-type-def type-id='type-id-679' const='yes' hash='7226944aa4e46352' id='type-id-680'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep* -->
    <pointer-type-def type-id='type-id-680' size-in-bits='64' hash='61c33da8fd0cc9a8' id='type-id-681'/>
    <!-- const std::char_traits<char>::char_type -->
    <qualified-type-def type-id='type-id-682' const='yes' hash='0d301f00e830e5eb' id='type-id-683'/>
    <!-- const std::char_traits<char>::char_type& -->
    <reference-type-def kind='lvalue' type-id='type-id-683' size-in-bits='64' hash='d98a60be7234f7c8' id='type-id-684'/>
    <!-- const std::char_traits<char>::char_type* -->
    <pointer-type-def type-id='type-id-683' size-in-bits='64' hash='f4903706bce76c85' id='type-id-685'/>
    <!-- const std::char_traits<char>::int_type -->
    <qualified-type-def type-id='type-id-686' const='yes' hash='9c3f1503b45b0328' id='type-id-687'/>
    <!-- const std::char_traits<char>::int_type& -->
    <reference-type-def kind='lvalue' type-id='type-id-687' size-in-bits='64' hash='00b5256d58d8bd92' id='type-id-688'/>
    <!-- const std::less<long unsigned int> -->
    <qualified-type-def type-id='type-id-689' const='yes' hash='5d498865f38eb057' id='type-id-690'/>
    <!-- const std::less<long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-690' size-in-bits='64' hash='f113631b60e9068c' id='type-id-691'/>
    <!-- const std::less<long unsigned int>* -->
    <pointer-type-def type-id='type-id-690' size-in-bits='64' hash='df8c0d3150b9b291' id='type-id-692'/>
    <!-- const std::less<long unsigned int>* const -->
    <qualified-type-def type-id='type-id-692' const='yes' hash='fc2f7e2576cd04dc' id='type-id-693'/>
    <!-- const std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > -->
    <qualified-type-def type-id='type-id-694' const='yes' hash='6876a52a5619ce07' id='type-id-695'/>
    <!-- const std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-695' size-in-bits='64' hash='4a173051006838b3' id='type-id-696'/>
    <!-- const std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-695' size-in-bits='64' hash='a62a4ecdd028982a' id='type-id-697'/>
    <!-- const std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >* const -->
    <qualified-type-def type-id='type-id-697' const='yes' hash='f63c99d018d76d91' id='type-id-698'/>
    <!-- const std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-363' const='yes' hash='e8ffe4e29da8ea38' id='type-id-699'/>
    <!-- const std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-699' size-in-bits='64' hash='687bbe3ce9cda357' id='type-id-700'/>
    <!-- const std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-699' size-in-bits='64' hash='40b2df459fb559b3' id='type-id-701'/>
    <!-- const std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-365' const='yes' hash='f3a5be8e61719bbc' id='type-id-702'/>
    <!-- const std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-702' size-in-bits='64' hash='8f74e7414576d9cd' id='type-id-703'/>
    <!-- const std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-702' size-in-bits='64' hash='9625a82da66e4034' id='type-id-704'/>
    <!-- const std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-367' const='yes' hash='8f4c33a1019cc3ae' id='type-id-705'/>
    <!-- const std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-705' size-in-bits='64' hash='958bb5909eef1414' id='type-id-706'/>
    <!-- const std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-705' size-in-bits='64' hash='caba7918a4a8bc53' id='type-id-707'/>
    <!-- const std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-707' const='yes' hash='179c4ba0a598c292' id='type-id-708'/>
    <!-- const std::pair<const long unsigned int, HeapLeakChecker::RangeValue> -->
    <qualified-type-def type-id='type-id-709' const='yes' hash='6a2158f128d7ffba' id='type-id-710'/>
    <!-- const std::pair<const long unsigned int, HeapLeakChecker::RangeValue>& -->
    <reference-type-def kind='lvalue' type-id='type-id-710' size-in-bits='64' hash='2b42984aa78e180f' id='type-id-711'/>
    <!-- const std::pair<const long unsigned int, HeapLeakChecker::RangeValue>* -->
    <pointer-type-def type-id='type-id-710' size-in-bits='64' hash='c373f8b8c9e04265' id='type-id-712'/>
    <!-- const std::pair<const long unsigned int, long unsigned int> -->
    <qualified-type-def type-id='type-id-713' const='yes' hash='b1ffda668c982e08' id='type-id-714'/>
    <!-- const std::pair<const long unsigned int, long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-714' size-in-bits='64' hash='2a64eb5f8e50da2c' id='type-id-715'/>
    <!-- const std::pair<const long unsigned int, long unsigned int>* -->
    <pointer-type-def type-id='type-id-714' size-in-bits='64' hash='fd13598488b830eb' id='type-id-716'/>
    <!-- const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > -->
    <qualified-type-def type-id='type-id-717' const='yes' hash='f5948268722803a6' id='type-id-718'/>
    <!-- const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-718' size-in-bits='64' hash='8a9a1d797e1d7830' id='type-id-719'/>
    <!-- const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-718' size-in-bits='64' hash='fd7552c453b69962' id='type-id-720'/>
    <!-- const std::pair<long unsigned int, HeapLeakChecker::RangeValue> -->
    <qualified-type-def type-id='type-id-721' const='yes' hash='b615ba01aa551f92' id='type-id-722'/>
    <!-- const std::pair<long unsigned int, HeapLeakChecker::RangeValue>& -->
    <reference-type-def kind='lvalue' type-id='type-id-722' size-in-bits='64' hash='6e7ca09e3a4710c8' id='type-id-723'/>
    <!-- const std::pair<long unsigned int, long unsigned int> -->
    <qualified-type-def type-id='type-id-724' const='yes' hash='20a7909ca18bbbad' id='type-id-725'/>
    <!-- const std::pair<long unsigned int, long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-725' size-in-bits='64' hash='3a42ae960bc54cb3' id='type-id-726'/>
    <!-- const std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-377' const='yes' hash='c75ae7eadf8aa76d' id='type-id-727'/>
    <!-- const std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-727' size-in-bits='64' hash='f8f9ce5f9c5d1d67' id='type-id-728'/>
    <!-- const std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-727' size-in-bits='64' hash='053087693c6dd47c' id='type-id-729'/>
    <!-- const std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-729' const='yes' hash='8ab4ddf65aebc88f' id='type-id-730'/>
    <!-- const std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-369' const='yes' hash='bd84c99732c42e90' id='type-id-731'/>
    <!-- const std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-731' size-in-bits='64' hash='4479d40f519e3df2' id='type-id-732'/>
    <!-- const std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-731' size-in-bits='64' hash='2546ea4243cdf0be' id='type-id-733'/>
    <!-- const std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-733' const='yes' hash='d8bd68dd567530de' id='type-id-734'/>
    <!-- const std::vector<void (*)(), std::allocator<void (*)()> > -->
    <qualified-type-def type-id='type-id-735' const='yes' hash='663921d1e466de22' id='type-id-736'/>
    <!-- const std::vector<void (*)(), std::allocator<void (*)()> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-736' size-in-bits='64' hash='f87b94639809b46c' id='type-id-737'/>
    <!-- const std::vector<void (*)(), std::allocator<void (*)()> >* -->
    <pointer-type-def type-id='type-id-736' size-in-bits='64' hash='4751c1e99147b797' id='type-id-738'/>
    <!-- const std::vector<void (*)(), std::allocator<void (*)()> >* const -->
    <qualified-type-def type-id='type-id-738' const='yes' hash='f0278931e35cb855' id='type-id-739'/>
    <!-- const std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-740' const='yes' hash='7a450a9a562a63c4' id='type-id-741'/>
    <!-- const std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-741' size-in-bits='64' hash='ef2ef9e038defc9b' id='type-id-742'/>
    <!-- const std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-741' size-in-bits='64' hash='38ffdd72c7514c5c' id='type-id-743'/>
    <!-- const std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-743' const='yes' hash='2ff3f9e00730d20c' id='type-id-744'/>
    <!-- const unsigned long int* -->
    <pointer-type-def type-id='type-id-745' size-in-bits='64' hash='3cecca488cd00e0d' id='type-id-746'/>
    <!-- size_t (*)(const HeapProfileTable::AllocValue&) -->
    <pointer-type-def type-id='type-id-747' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-748'/>
    <!-- std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-572' size-in-bits='64' hash='3424d9bdef1f1fe9' id='type-id-749'/>
    <!-- std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-572' size-in-bits='64' hash='041651a091b49c85' id='type-id-750'/>
    <!-- std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-750' const='yes' hash='891d315c77507f2b' id='type-id-751'/>
    <!-- std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>* -->
    <pointer-type-def type-id='type-id-752' size-in-bits='64' hash='4b2ff9ceaf116335' id='type-id-753'/>
    <!-- std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>* const -->
    <qualified-type-def type-id='type-id-753' const='yes' hash='e8cf0ed67a90ea4a' id='type-id-754'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-577' size-in-bits='64' hash='156289be121d38bd' id='type-id-755'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-577' size-in-bits='64' hash='5fad08c27eb15d75' id='type-id-756'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-756' const='yes' hash='e48bbfb2ac3a43ec' id='type-id-757'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>* -->
    <pointer-type-def type-id='type-id-758' size-in-bits='64' hash='4b2ff9ceaf116335' id='type-id-759'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>* const -->
    <qualified-type-def type-id='type-id-759' const='yes' hash='e8cf0ed67a90ea4a' id='type-id-760'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-582' size-in-bits='64' hash='92a28c32b409f8ad' id='type-id-761'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-582' size-in-bits='64' hash='4f2b65619d2f783c' id='type-id-762'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-762' const='yes' hash='cb624255acd9e063' id='type-id-763'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>* -->
    <pointer-type-def type-id='type-id-764' size-in-bits='64' hash='4b2ff9ceaf116335' id='type-id-765'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>* const -->
    <qualified-type-def type-id='type-id-765' const='yes' hash='e8cf0ed67a90ea4a' id='type-id-766'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-587' size-in-bits='64' hash='373f325ad2f0a5e4' id='type-id-767'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-587' size-in-bits='64' hash='9372b5f3b64863ad' id='type-id-768'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-768' const='yes' hash='de9319c685e64649' id='type-id-769'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false>* -->
    <pointer-type-def type-id='type-id-770' size-in-bits='64' hash='a651ac0c5ea4d9d2' id='type-id-771'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false>* const -->
    <qualified-type-def type-id='type-id-771' const='yes' hash='a0232b9d574a8562' id='type-id-772'/>
    <!-- std::_Rb_tree_const_iterator<MemoryRegionMap::Region>& -->
    <reference-type-def kind='lvalue' type-id='type-id-331' size-in-bits='64' hash='a20cecf2037061b0' id='type-id-773'/>
    <!-- std::_Rb_tree_const_iterator<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-331' size-in-bits='64' hash='f31d62bf64495ab0' id='type-id-774'/>
    <!-- std::_Rb_tree_const_iterator<MemoryRegionMap::Region>* const -->
    <qualified-type-def type-id='type-id-774' const='yes' hash='6e2a635775d0a841' id='type-id-775'/>
    <!-- std::_Rb_tree_const_iterator<long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-596' size-in-bits='64' hash='d75d6c12dd36d0e6' id='type-id-776'/>
    <!-- std::_Rb_tree_const_iterator<long unsigned int>* -->
    <pointer-type-def type-id='type-id-596' size-in-bits='64' hash='960a6cf900acb233' id='type-id-777'/>
    <!-- std::_Rb_tree_const_iterator<long unsigned int>* const -->
    <qualified-type-def type-id='type-id-777' const='yes' hash='ba4f1a6fd70a4f1d' id='type-id-778'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-601' size-in-bits='64' hash='e0d00b7755ed2314' id='type-id-779'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* -->
    <pointer-type-def type-id='type-id-601' size-in-bits='64' hash='f26a4670a8bdc44d' id='type-id-780'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* const -->
    <qualified-type-def type-id='type-id-780' const='yes' hash='6f11617aa4894e83' id='type-id-781'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-606' size-in-bits='64' hash='b87868db6546f266' id='type-id-782'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >* -->
    <pointer-type-def type-id='type-id-606' size-in-bits='64' hash='ee8f03df120a1189' id='type-id-783'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >* const -->
    <qualified-type-def type-id='type-id-783' const='yes' hash='58dfd3e15aacc40f' id='type-id-784'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-611' size-in-bits='64' hash='4413f069f3463fed' id='type-id-785'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* -->
    <pointer-type-def type-id='type-id-611' size-in-bits='64' hash='de3696b2b4556cd3' id='type-id-786'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* const -->
    <qualified-type-def type-id='type-id-786' const='yes' hash='a0b70fa561664f61' id='type-id-787'/>
    <!-- std::_Rb_tree_iterator<long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-618' size-in-bits='64' hash='aa1f2af7fd00bc61' id='type-id-788'/>
    <!-- std::_Rb_tree_iterator<long unsigned int>* -->
    <pointer-type-def type-id='type-id-618' size-in-bits='64' hash='a3c82d05e0566644' id='type-id-789'/>
    <!-- std::_Rb_tree_iterator<long unsigned int>* const -->
    <qualified-type-def type-id='type-id-789' const='yes' hash='62a0fd779fd83a0a' id='type-id-790'/>
    <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-623' size-in-bits='64' hash='57d00e3fb9d13d58' id='type-id-791'/>
    <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* -->
    <pointer-type-def type-id='type-id-623' size-in-bits='64' hash='160411b307904fa6' id='type-id-792'/>
    <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* const -->
    <qualified-type-def type-id='type-id-792' const='yes' hash='46d85356c2525b40' id='type-id-793'/>
    <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-628' size-in-bits='64' hash='893ec553562f974e' id='type-id-794'/>
    <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >* -->
    <pointer-type-def type-id='type-id-628' size-in-bits='64' hash='ec41c4a265ffe9ee' id='type-id-795'/>
    <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >* const -->
    <qualified-type-def type-id='type-id-795' const='yes' hash='905b8ac92c2454fc' id='type-id-796'/>
    <!-- std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-633' size-in-bits='64' hash='8e43f5b5685179b3' id='type-id-797'/>
    <!-- std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* -->
    <pointer-type-def type-id='type-id-633' size-in-bits='64' hash='757666f788a9e19e' id='type-id-798'/>
    <!-- std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* const -->
    <qualified-type-def type-id='type-id-798' const='yes' hash='8454e6a29d4c0b60' id='type-id-799'/>
    <!-- std::_Rb_tree_node_base* -->
    <pointer-type-def type-id='type-id-638' size-in-bits='64' hash='68858e106acefb39' id='type-id-800'/>
    <!-- std::_Rb_tree_node_base*& -->
    <reference-type-def kind='lvalue' type-id='type-id-800' size-in-bits='64' hash='25d1ab60378aba7a' id='type-id-801'/>
    <!-- std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-653' size-in-bits='64' hash='65b71fe011ab6de3' id='type-id-802'/>
    <!-- std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-802' const='yes' hash='83a87bb96aeeec1d' id='type-id-803'/>
    <!-- std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl* -->
    <pointer-type-def type-id='type-id-804' size-in-bits='64' hash='437509a8ebc56156' id='type-id-805'/>
    <!-- std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl* const -->
    <qualified-type-def type-id='type-id-805' const='yes' hash='9b9a9e3e6ead6f78' id='type-id-806'/>
    <!-- std::_Vector_base<void (*)(), std::allocator<void (*)()> >* -->
    <pointer-type-def type-id='type-id-657' size-in-bits='64' hash='c8b5a725ee4c901f' id='type-id-807'/>
    <!-- std::_Vector_base<void (*)(), std::allocator<void (*)()> >* const -->
    <qualified-type-def type-id='type-id-807' const='yes' hash='092bd9a2414f0182' id='type-id-808'/>
    <!-- std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl* -->
    <pointer-type-def type-id='type-id-809' size-in-bits='64' hash='437509a8ebc56156' id='type-id-810'/>
    <!-- std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl* const -->
    <qualified-type-def type-id='type-id-810' const='yes' hash='9b9a9e3e6ead6f78' id='type-id-811'/>
    <!-- std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-661' size-in-bits='64' hash='d1d6177643ded135' id='type-id-812'/>
    <!-- std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-812' const='yes' hash='e531af045d2ffad5' id='type-id-813'/>
    <!-- std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl* -->
    <pointer-type-def type-id='type-id-814' size-in-bits='64' hash='437509a8ebc56156' id='type-id-815'/>
    <!-- std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl* const -->
    <qualified-type-def type-id='type-id-815' const='yes' hash='9b9a9e3e6ead6f78' id='type-id-816'/>
    <!-- std::allocator<void (*)()>& -->
    <reference-type-def kind='lvalue' type-id='type-id-665' size-in-bits='64' hash='5a7fe4297c327710' id='type-id-817'/>
    <!-- std::allocator<void (*)()>* -->
    <pointer-type-def type-id='type-id-665' size-in-bits='64' hash='4524b9c0be857b0a' id='type-id-818'/>
    <!-- std::allocator<void (*)()>* const -->
    <qualified-type-def type-id='type-id-818' const='yes' hash='36936c2dd8fca91f' id='type-id-819'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-668' size-in-bits='64' hash='304c0b5d5ea2efc4' id='type-id-820'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-668' size-in-bits='64' hash='c49587e5cddf8886' id='type-id-821'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-821' const='yes' hash='9a75344b7bebb12b' id='type-id-822'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Alloc_hider* -->
    <pointer-type-def type-id='type-id-823' size-in-bits='64' hash='9d029584a1ffef40' id='type-id-824'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Alloc_hider* const -->
    <qualified-type-def type-id='type-id-824' const='yes' hash='bdb67d5a3f1e852b' id='type-id-825'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep& -->
    <reference-type-def kind='lvalue' type-id='type-id-673' size-in-bits='64' hash='dce7c83b7dca5265' id='type-id-826'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep* -->
    <pointer-type-def type-id='type-id-673' size-in-bits='64' hash='0eeadcf9df869442' id='type-id-827'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep* const -->
    <qualified-type-def type-id='type-id-827' const='yes' hash='4432589e1ddb9aed' id='type-id-828'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >* const -->
    <qualified-type-def type-id='type-id-829' const='yes' hash='277400705582a96c' id='type-id-830'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider* const -->
    <qualified-type-def type-id='type-id-831' const='yes' hash='bdb67d5a3f1e852b' id='type-id-832'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep* const -->
    <qualified-type-def type-id='type-id-833' const='yes' hash='4432589e1ddb9aed' id='type-id-834'/>
    <!-- std::char_traits<char>::char_type& -->
    <reference-type-def kind='lvalue' type-id='type-id-682' size-in-bits='64' hash='75929b1513585467' id='type-id-835'/>
    <!-- std::char_traits<char>::char_type* -->
    <pointer-type-def type-id='type-id-682' size-in-bits='64' hash='4cef840ef4725ab6' id='type-id-836'/>
    <!-- std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-363' size-in-bits='64' hash='e60d3aa1c9cd0874' id='type-id-837'/>
    <!-- std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-363' size-in-bits='64' hash='bafda5d3fa70adc3' id='type-id-838'/>
    <!-- std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-838' const='yes' hash='5a608fc7d8df6130' id='type-id-839'/>
    <!-- std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-365' size-in-bits='64' hash='7636bd7efed366c6' id='type-id-840'/>
    <!-- std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-365' size-in-bits='64' hash='ce89926c0afcc11d' id='type-id-841'/>
    <!-- std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-841' const='yes' hash='68e0eca2e82735c0' id='type-id-842'/>
    <!-- std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-367' size-in-bits='64' hash='4e845626b7f4b0ed' id='type-id-843'/>
    <!-- std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-367' size-in-bits='64' hash='1f32ca8c15c02670' id='type-id-844'/>
    <!-- std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-844' const='yes' hash='b64dc3bec0e9ee61' id='type-id-845'/>
    <!-- std::pair<const long unsigned int, HeapLeakChecker::RangeValue>& -->
    <reference-type-def kind='lvalue' type-id='type-id-709' size-in-bits='64' hash='841f62a155550a0f' id='type-id-846'/>
    <!-- std::pair<const long unsigned int, HeapLeakChecker::RangeValue>* -->
    <pointer-type-def type-id='type-id-709' size-in-bits='64' hash='859aba1907d22452' id='type-id-847'/>
    <!-- std::pair<const long unsigned int, HeapLeakChecker::RangeValue>* const -->
    <qualified-type-def type-id='type-id-847' const='yes' hash='dd7eb1c64e0be8d3' id='type-id-848'/>
    <!-- std::pair<const long unsigned int, long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-713' size-in-bits='64' hash='e20a5d081c42fc4d' id='type-id-849'/>
    <!-- std::pair<const long unsigned int, long unsigned int>* -->
    <pointer-type-def type-id='type-id-713' size-in-bits='64' hash='4c24b79defb34fb3' id='type-id-850'/>
    <!-- std::pair<const long unsigned int, long unsigned int>* const -->
    <qualified-type-def type-id='type-id-850' const='yes' hash='21e9a74abec6ad17' id='type-id-851'/>
    <!-- std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-717' size-in-bits='64' hash='a5e61221e8b7c4cc' id='type-id-852'/>
    <!-- std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-717' size-in-bits='64' hash='25910c8a7b1e8702' id='type-id-853'/>
    <!-- std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* const -->
    <qualified-type-def type-id='type-id-853' const='yes' hash='fe86d992f68179c7' id='type-id-854'/>
    <!-- std::pair<long unsigned int, HeapLeakChecker::RangeValue>* -->
    <pointer-type-def type-id='type-id-721' size-in-bits='64' hash='c1675460a71f364d' id='type-id-855'/>
    <!-- std::pair<long unsigned int, HeapLeakChecker::RangeValue>* const -->
    <qualified-type-def type-id='type-id-855' const='yes' hash='7e0e6d40649d3a71' id='type-id-856'/>
    <!-- std::pair<long unsigned int, long unsigned int>* -->
    <pointer-type-def type-id='type-id-724' size-in-bits='64' hash='762fde9cb7973032' id='type-id-857'/>
    <!-- std::pair<long unsigned int, long unsigned int>* const -->
    <qualified-type-def type-id='type-id-857' const='yes' hash='373b0d479faf430e' id='type-id-858'/>
    <!-- std::pair<std::_Rb_tree_const_iterator<long unsigned int>, bool>* -->
    <pointer-type-def type-id='type-id-859' size-in-bits='64' hash='90e4e003f12d5da9' id='type-id-860'/>
    <!-- std::pair<std::_Rb_tree_const_iterator<long unsigned int>, bool>* const -->
    <qualified-type-def type-id='type-id-860' const='yes' hash='a580cea2b06a78af' id='type-id-861'/>
    <!-- std::pair<std::_Rb_tree_iterator<long unsigned int>, bool>* -->
    <pointer-type-def type-id='type-id-862' size-in-bits='64' hash='d1d8047086f0e54d' id='type-id-863'/>
    <!-- std::pair<std::_Rb_tree_iterator<long unsigned int>, bool>* const -->
    <qualified-type-def type-id='type-id-863' const='yes' hash='eb5aca859e5f72c6' id='type-id-864'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, bool>* -->
    <pointer-type-def type-id='type-id-865' size-in-bits='64' hash='19f3d0387e379af0' id='type-id-866'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, bool>* const -->
    <qualified-type-def type-id='type-id-866' const='yes' hash='30fe2a247fe058e9' id='type-id-867'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >, bool>* -->
    <pointer-type-def type-id='type-id-868' size-in-bits='64' hash='696a2eb4da09a175' id='type-id-869'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >, bool>* const -->
    <qualified-type-def type-id='type-id-869' const='yes' hash='81c8fb2a3ba7e17f' id='type-id-870'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool>* -->
    <pointer-type-def type-id='type-id-871' size-in-bits='64' hash='9e2e73c83e5672c4' id='type-id-872'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool>* const -->
    <qualified-type-def type-id='type-id-872' const='yes' hash='d4f61830a0064efb' id='type-id-873'/>
    <!-- std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-377' size-in-bits='64' hash='d2c11b6eb3958849' id='type-id-874'/>
    <!-- std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-377' size-in-bits='64' hash='b5bebae0c88be804' id='type-id-875'/>
    <!-- std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-875' const='yes' hash='29f37117bc906bf1' id='type-id-876'/>
    <!-- std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-369' size-in-bits='64' hash='f6bf1db9522e80b7' id='type-id-877'/>
    <!-- std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-369' size-in-bits='64' hash='a7286192c97077c2' id='type-id-878'/>
    <!-- std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-878' const='yes' hash='77c625be08321496' id='type-id-879'/>
    <!-- std::vector<void (*)(), std::allocator<void (*)()> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-735' size-in-bits='64' hash='b6d6cecd171ba5e4' id='type-id-880'/>
    <!-- std::vector<void (*)(), std::allocator<void (*)()> >* -->
    <pointer-type-def type-id='type-id-735' size-in-bits='64' hash='be644cbee9ea26fc' id='type-id-267'/>
    <!-- std::vector<void (*)(), std::allocator<void (*)()> >* const -->
    <qualified-type-def type-id='type-id-267' const='yes' hash='fb28a9ca173b8d02' id='type-id-881'/>
    <!-- std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-740' size-in-bits='64' hash='6501fd64e511c47e' id='type-id-882'/>
    <!-- std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-740' size-in-bits='64' hash='a79f957a59865ea5' id='type-id-883'/>
    <!-- std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-883' const='yes' hash='3e33890aa222513b' id='type-id-884'/>
    <!-- unsigned long int& -->
    <reference-type-def kind='lvalue' type-id='type-id-21' size-in-bits='64' hash='b08a4d7705311570' id='type-id-885'/>
    <!-- unsigned long int* -->
    <pointer-type-def type-id='type-id-21' size-in-bits='64' hash='d9e2f19705735211' id='type-id-886'/>
    <!-- void (*)(const HeapProfileTable::AllocContextInfo&) -->
    <pointer-type-def type-id='type-id-887' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-303'/>
    <!-- void (*)(void) const -->
    <qualified-type-def type-id='type-id-261' const='yes' hash='6fd743acdba65045' id='type-id-888'/>
    <!-- void (*)(void) const& -->
    <reference-type-def kind='lvalue' type-id='type-id-888' size-in-bits='64' hash='d357d6f75e871c2e' id='type-id-889'/>
    <!-- void (*)(void) const* -->
    <pointer-type-def type-id='type-id-888' size-in-bits='64' hash='09e423a99cb07be4' id='type-id-890'/>
    <!-- void (*)(void)& -->
    <reference-type-def kind='lvalue' type-id='type-id-261' size-in-bits='64' hash='08ad80fa94e51a26' id='type-id-891'/>
    <!-- void (*)(void)* -->
    <pointer-type-def type-id='type-id-261' size-in-bits='64' hash='551ba7e18ed5752b' id='type-id-892'/>
    <!-- void (*)(void)* const -->
    <qualified-type-def type-id='type-id-892' const='yes' hash='2a91facb283adb1e' id='type-id-893'/>
    <!-- void (*)(void)* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-893' size-in-bits='64' hash='e919f554e7937b2c' id='type-id-894'/>
    <!-- void (*)(void*, HeapProfileTable::AllocValue*, void (*)(void*, const HeapProfileTable::AllocInfo&)) -->
    <pointer-type-def type-id='type-id-895' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-896'/>
    <!-- void (*)(void*, const HeapProfileTable::AllocInfo&) -->
    <pointer-type-def type-id='type-id-897' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-305'/>
    <!-- void (*)(void*, ptrdiff_t) -->
    <pointer-type-def type-id='type-id-898' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-375'/>
    <!-- void (*)(void*, ptrdiff_t)* -->
    <pointer-type-def type-id='type-id-375' size-in-bits='64' hash='551ba7e18ed5752b' id='type-id-899'/>
    <!-- void (*)(void*, void*, size_t, int, int, int, off_t) -->
    <pointer-type-def type-id='type-id-900' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-372'/>
    <!-- void (*)(void*, void*, size_t, int, int, int, off_t)* -->
    <pointer-type-def type-id='type-id-372' size-in-bits='64' hash='551ba7e18ed5752b' id='type-id-901'/>
    <!-- void* (*)(size_t) -->
    <pointer-type-def type-id='type-id-206' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-307'/>
    <!-- void* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-902' size-in-bits='64' hash='96def6eeaeb2ccd0' id='type-id-903'/>
    <!-- void* const* -->
    <pointer-type-def type-id='type-id-902' size-in-bits='64' hash='cca8ba375802253e' id='type-id-286'/>
    <!-- void*& -->
    <reference-type-def kind='lvalue' type-id='type-id-56' size-in-bits='64' hash='fb592a4752ed7557' id='type-id-904'/>
    <!-- void** const -->
    <qualified-type-def type-id='type-id-184' const='yes' hash='52c4b44d191c43e5' id='type-id-905'/>
    <!-- void** const& -->
    <reference-type-def kind='lvalue' type-id='type-id-905' size-in-bits='64' hash='004df27d316b7d17' id='type-id-906'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::Cluster* -->
    <pointer-type-def type-id='type-id-249' size-in-bits='64' id='type-id-907'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::Cluster** -->
    <pointer-type-def type-id='type-id-907' size-in-bits='64' id='type-id-252'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::Entry* -->
    <pointer-type-def type-id='type-id-250' size-in-bits='64' id='type-id-253'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::Object* -->
    <pointer-type-def type-id='type-id-251' size-in-bits='64' id='type-id-256'/>
    <!-- const std::_Rb_tree_node<MemoryRegionMap::Region> -->
    <qualified-type-def type-id='type-id-908' const='yes' id='type-id-909'/>
    <!-- const std::_Rb_tree_node<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-909' size-in-bits='64' id='type-id-910'/>
    <!-- const std::_Rb_tree_node<long unsigned int> -->
    <qualified-type-def type-id='type-id-911' const='yes' id='type-id-912'/>
    <reference-type-def kind='lvalue' type-id='type-id-912' size-in-bits='64' id='type-id-913'/>
    <!-- const std::_Rb_tree_node<long unsigned int>* -->
    <pointer-type-def type-id='type-id-912' size-in-bits='64' id='type-id-914'/>
    <!-- const std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
    <qualified-type-def type-id='type-id-915' const='yes' id='type-id-916'/>
    <reference-type-def kind='lvalue' type-id='type-id-916' size-in-bits='64' id='type-id-917'/>
    <!-- const std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* -->
    <pointer-type-def type-id='type-id-916' size-in-bits='64' id='type-id-918'/>
    <!-- const std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> > -->
    <qualified-type-def type-id='type-id-919' const='yes' id='type-id-920'/>
    <reference-type-def kind='lvalue' type-id='type-id-920' size-in-bits='64' id='type-id-921'/>
    <!-- const std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >* -->
    <pointer-type-def type-id='type-id-920' size-in-bits='64' id='type-id-922'/>
    <!-- const std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
    <qualified-type-def type-id='type-id-923' const='yes' id='type-id-924'/>
    <reference-type-def kind='lvalue' type-id='type-id-924' size-in-bits='64' id='type-id-925'/>
    <!-- const std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* -->
    <pointer-type-def type-id='type-id-924' size-in-bits='64' id='type-id-926'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- class std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> > -->
      <class-decl name='_Rb_tree&lt;long unsigned int, long unsigned int, std::_Identity&lt;long unsigned int&gt;, std::less&lt;long unsigned int&gt;, STL_Allocator&lt;long unsigned int, HeapLeakChecker::Allocator&gt; &gt;' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' hash='5c1b12654c8bd5fb' id='type-id-572'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false> -->
          <class-decl name='_Rb_tree_impl&lt;std::less&lt;long unsigned int&gt;, false&gt;' is-struct='yes' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' hash='dd1aadc4a06ff363' id='type-id-752'>
            <!-- class STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-350'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::less<long unsigned int> std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-689' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-638' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false> std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-752' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<long unsigned int>*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeImmSt9_IdentityImESt4lessImE13STL_AllocatorImN15HeapLeakChecker9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeImE' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeImmSt9_IdentityImESt4lessImE13STL_AllocatorImN15HeapLeakChecker9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeImE' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-750' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<long unsigned int>*' -->
            <parameter type-id='type-id-927'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<long unsigned int> std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const unsigned long int&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeImmSt9_IdentityImESt4lessImE13STL_AllocatorImN15HeapLeakChecker9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSB_RKm' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeImmSt9_IdentityImESt4lessImE13STL_AllocatorImN15HeapLeakChecker9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSB_RKm' hash='591bcb047a6ffd3b'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-750' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-640'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-640'/>
            <!-- parameter of type 'const unsigned long int&' -->
            <parameter type-id='type-id-928'/>
            <!-- struct std::_Rb_tree_iterator<long unsigned int> -->
            <return type-id='type-id-618'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> > -->
      <class-decl name='_Rb_tree&lt;long unsigned int, std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt;, std::_Select1st&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;, std::less&lt;long unsigned int&gt;, STL_Allocator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt;, HeapLeakChecker::Allocator&gt; &gt;' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' hash='9232299cdd7a5669' id='type-id-577'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false> -->
          <class-decl name='_Rb_tree_impl&lt;std::less&lt;long unsigned int&gt;, false&gt;' is-struct='yes' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' hash='dd1aadc4a06ff363' id='type-id-758'>
            <!-- class STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-351'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::less<long unsigned int> std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-689' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-638' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false> std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-758' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeImSt4pairIKmN15HeapLeakChecker10RangeValueEESt10_Select1stIS4_ESt4lessImE13STL_AllocatorIS4_NS2_9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS4_E' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeImSt4pairIKmN15HeapLeakChecker10RangeValueEESt10_Select1stIS4_ESt4lessImE13STL_AllocatorIS4_NS2_9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS4_E' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-756' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >*' -->
            <parameter type-id='type-id-929'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const std::pair<const long unsigned int, HeapLeakChecker::RangeValue>&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeImSt4pairIKmN15HeapLeakChecker10RangeValueEESt10_Select1stIS4_ESt4lessImE13STL_AllocatorIS4_NS2_9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSF_RKS4_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeImSt4pairIKmN15HeapLeakChecker10RangeValueEESt10_Select1stIS4_ESt4lessImE13STL_AllocatorIS4_NS2_9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSF_RKS4_' hash='57dbd69b6c0c7dbb'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-756' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-640'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-640'/>
            <!-- parameter of type 'const std::pair<const long unsigned int, HeapLeakChecker::RangeValue>&' -->
            <parameter type-id='type-id-711'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
            <return type-id='type-id-623'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> > -->
      <class-decl name='_Rb_tree&lt;long unsigned int, std::pair&lt;const long unsigned int, long unsigned int&gt;, std::_Select1st&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;, std::less&lt;long unsigned int&gt;, STL_Allocator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt;, HeapLeakChecker::Allocator&gt; &gt;' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' hash='fe6f354b69cb5a4e' id='type-id-582'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false> -->
          <class-decl name='_Rb_tree_impl&lt;std::less&lt;long unsigned int&gt;, false&gt;' is-struct='yes' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' hash='dd1aadc4a06ff363' id='type-id-764'>
            <!-- class STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-352'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::less<long unsigned int> std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-689' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-638' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false> std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-764' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImE13STL_AllocatorIS2_N15HeapLeakChecker9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS2_E' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImE13STL_AllocatorIS2_N15HeapLeakChecker9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS2_E' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-762' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >*' -->
            <parameter type-id='type-id-930'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> > std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const std::pair<const long unsigned int, long unsigned int>&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImE13STL_AllocatorIS2_N15HeapLeakChecker9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSE_RKS2_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImE13STL_AllocatorIS2_N15HeapLeakChecker9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSE_RKS2_' hash='78a6228f9d63649d'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-762' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-640'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-640'/>
            <!-- parameter of type 'const std::pair<const long unsigned int, long unsigned int>&' -->
            <parameter type-id='type-id-715'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> > -->
            <return type-id='type-id-628'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> > -->
      <class-decl name='_Rb_tree&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;, std::less&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt;, STL_Allocator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, HeapLeakChecker::Allocator&gt; &gt;' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' hash='15cf7a5901ae88cc' id='type-id-587'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false> -->
          <class-decl name='_Rb_tree_impl&lt;std::less&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt;, false&gt;' is-struct='yes' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' hash='ae57639f529b7c33' id='type-id-770'>
            <!-- class STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-353'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-694' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-638' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false> std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-770' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE8_M_eraseEPSt13_Rb_tree_nodeISD_E' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE8_M_eraseEPSt13_Rb_tree_nodeISD_E' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-768' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >*' -->
            <parameter type-id='type-id-931'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE10_M_insert_EPKSt18_Rb_tree_node_baseSM_RKSD_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE10_M_insert_EPKSt18_Rb_tree_node_baseSM_RKSD_' hash='2853dcdd541ff226'>
            <!-- implicit parameter of type 'std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-768' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-640'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-640'/>
            <!-- parameter of type 'const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
            <parameter type-id='type-id-719'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
            <return type-id='type-id-633'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool> std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_insert_unique(const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&) -->
          <function-decl name='_M_insert_unique' mangled-name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE16_M_insert_uniqueERKSD_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1161' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE16_M_insert_uniqueERKSD_' hash='5af356eb0f66347f'>
            <!-- implicit parameter of type 'std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-768' is-artificial='yes'/>
            <!-- parameter of type 'const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
            <parameter type-id='type-id-719'/>
            <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool> -->
            <return type-id='type-id-871'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&) -->
          <function-decl name='_M_insert_unique_' mangled-name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorISD_ERKSD_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1206' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorISD_ERKSD_' hash='5af356eb0f66347f'>
            <!-- implicit parameter of type 'std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-768' is-artificial='yes'/>
            <!-- parameter of type 'struct std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >' -->
            <parameter type-id='type-id-611'/>
            <!-- parameter of type 'const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
            <parameter type-id='type-id-719'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
            <return type-id='type-id-633'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::allocator<void (*)()> -->
      <class-decl name='allocator&lt;void (*)()&gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' hash='919807b8c58f7d16' id='type-id-665'>
        <!-- class __gnu_cxx::new_allocator<void (*)()> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-452'/>
      </class-decl>
      <!-- class std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > -->
      <class-decl name='basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='105' column='1' hash='d127f351b1f37e43' id='type-id-668'>
        <member-type access='private'>
          <!-- struct std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Alloc_hider -->
          <class-decl name='_Alloc_hider' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='258' column='1' hash='b2053c926fcda493' id='type-id-823'>
            <!-- class STL_Allocator<char, HeapLeakChecker::Allocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-348'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- char* std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Alloc_hider::_M_p -->
              <var-decl name='_M_p' type-id='type-id-130' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='262' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep -->
          <class-decl name='_Rep' is-struct='yes' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='148' column='1' hash='1100d7022e36b961' id='type-id-673'>
            <!-- struct std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep_base -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-932'/>
            <data-member access='public' static='yes'>
              <!-- static const char std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_S_terminal -->
              <var-decl name='_S_terminal' type-id='type-id-933' mangled-name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep11_S_terminalE' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='56' column='1' elf-symbol-id='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep11_S_terminalE'/>
            </data-member>
            <data-member access='public' static='yes'>
              <!-- static size_t std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_S_empty_rep_storage[4] -->
              <var-decl name='_S_empty_rep_storage' type-id='type-id-359' mangled-name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep20_S_empty_rep_storageE' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='68' column='1' elf-symbol-id='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep20_S_empty_rep_storageE'/>
            </data-member>
            <member-function access='public'>
              <!-- void std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_M_destroy(const STL_Allocator<char, HeapLeakChecker::Allocator>&) -->
              <function-decl name='_M_destroy' mangled-name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep10_M_destroyERKS4_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='445' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep10_M_destroyERKS4_' hash='42c3c5c8bfe04da6'>
                <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep*' -->
                <parameter type-id='type-id-827' is-artificial='yes'/>
                <!-- parameter of type 'const STL_Allocator<char, HeapLeakChecker::Allocator>&' -->
                <parameter type-id='type-id-506'/>
                <!-- void -->
                <return type-id='type-id-58'/>
              </function-decl>
            </member-function>
            <member-function access='public' static='yes'>
              <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep* std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_S_create(size_t, const STL_Allocator<char, HeapLeakChecker::Allocator>&) -->
              <function-decl name='_S_create' mangled-name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep9_S_createEmmRKS4_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='546' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep9_S_createEmmRKS4_' hash='d10fc0cc685542d3'>
                <!-- parameter of type 'typedef size_t' -->
                <parameter type-id='type-id-61' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='547' column='1'/>
                <!-- parameter of type 'typedef size_t' -->
                <parameter type-id='type-id-61' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='547' column='1'/>
                <!-- parameter of type 'const STL_Allocator<char, HeapLeakChecker::Allocator>&' -->
                <parameter type-id='type-id-506' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='548' column='1'/>
                <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep* -->
                <return type-id='type-id-827'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep_base -->
          <class-decl name='_Rep_base' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-932'/>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Alloc_hider std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_M_dataplus -->
          <var-decl name='_M_dataplus' type-id='type-id-823' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='274' column='1'/>
        </data-member>
        <member-function access='private' destructor='yes'>
          <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::~basic_string() -->
          <function-decl name='~basic_string' mangled-name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEED1Ev' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='502' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEED1Ev' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-821' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >&) -->
          <function-decl name='basic_string' mangled-name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC1ERKS5_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='170' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC1ERKS5_' hash='104ad7b850a5f0c8'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-821' is-artificial='yes'/>
            <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-670'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(const char*, const STL_Allocator<char, HeapLeakChecker::Allocator>&) -->
          <function-decl name='basic_string' mangled-name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC2EPKcRKS4_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='213' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC2EPKcRKS4_' hash='018ec0b2d7322e58'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-821' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-60'/>
            <!-- parameter of type 'const STL_Allocator<char, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-506'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> > -->
      <class-decl name='map&lt;long unsigned int, HeapLeakChecker::RangeValue, std::less&lt;long unsigned int&gt;, STL_Allocator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt;, HeapLeakChecker::Allocator&gt; &gt;' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='87' column='1' hash='cbddb0fe5641585d' id='type-id-363'>
        <member-type access='private'>
          <!-- class std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::value_compare -->
          <class-decl name='value_compare' visibility='default' is-declaration-only='yes' id='type-id-934'/>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> > std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-577' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='128' column='1'/>
        </data-member>
      </class-decl>
      <!-- class std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> > -->
      <class-decl name='map&lt;long unsigned int, long unsigned int, std::less&lt;long unsigned int&gt;, STL_Allocator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt;, HeapLeakChecker::Allocator&gt; &gt;' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='87' column='1' hash='84b1efe9e4f51d70' id='type-id-365'>
        <member-type access='private'>
          <!-- class std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::value_compare -->
          <class-decl name='value_compare' visibility='default' is-declaration-only='yes' id='type-id-935'/>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> > std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-582' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='128' column='1'/>
        </data-member>
      </class-decl>
      <!-- class std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> > -->
      <class-decl name='map&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt;, std::less&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt;, STL_Allocator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, HeapLeakChecker::Allocator&gt; &gt;' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='87' column='1' hash='530b4e917e9fc847' id='type-id-367'>
        <member-type access='private'>
          <!-- class std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::value_compare -->
          <class-decl name='value_compare' visibility='default' is-declaration-only='yes' id='type-id-936'/>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> > std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-587' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='128' column='1'/>
        </data-member>
      </class-decl>
      <!-- class std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> > -->
      <class-decl name='set&lt;long unsigned int, std::less&lt;long unsigned int&gt;, STL_Allocator&lt;long unsigned int, HeapLeakChecker::Allocator&gt; &gt;' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='88' column='1' hash='a61cd994aba76917' id='type-id-377'>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> > std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-572' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='112' column='1'/>
        </data-member>
      </class-decl>
      <!-- class std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > -->
      <class-decl name='vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt;' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='171' column='1' hash='47c552a06ecfb644' id='type-id-369'>
        <!-- struct std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > -->
        <base-class access='protected' layout-offset-in-bits='0' type-id='type-id-653'/>
        <member-function access='protected'>
          <!-- void std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_M_insert_aux(__gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, const AllocObject&) -->
          <function-decl name='_M_insert_aux' mangled-name='_ZNSt6vectorI11AllocObject13STL_AllocatorIS0_N15HeapLeakChecker9AllocatorEEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S5_EERKS0_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='295' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt6vectorI11AllocObject13STL_AllocatorIS0_N15HeapLeakChecker9AllocatorEEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S5_EERKS0_' hash='c9aa3e5fbfe25956'>
            <!-- implicit parameter of type 'std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-878' is-artificial='yes'/>
            <!-- parameter of type 'class __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >' -->
            <parameter type-id='type-id-434'/>
            <!-- parameter of type 'const AllocObject&' -->
            <parameter type-id='type-id-463'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::vector<void (*)(), std::allocator<void (*)()> > -->
      <class-decl name='vector&lt;void (*)(), std::allocator&lt;void (*)()&gt; &gt;' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='171' column='1' hash='9b2debf44af59bb1' id='type-id-735'>
        <!-- struct std::_Vector_base<void (*)(), std::allocator<void (*)()> > -->
        <base-class access='protected' layout-offset-in-bits='0' type-id='type-id-657'/>
        <member-function access='protected'>
          <!-- void std::vector<void (*)(), std::allocator<void (*)()> >::_M_insert_aux(__gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >, void (*)(void) const&) -->
          <function-decl name='_M_insert_aux' mangled-name='_ZNSt6vectorIPFvvESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='295' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt6vectorIPFvvESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_' hash='47cef4e1a89b3b2e'>
            <!-- implicit parameter of type 'std::vector<void (*)(), std::allocator<void (*)()> >*' -->
            <parameter type-id='type-id-267' is-artificial='yes'/>
            <!-- parameter of type 'class __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >' -->
            <parameter type-id='type-id-442'/>
            <!-- parameter of type 'void (*)(void) const&' -->
            <parameter type-id='type-id-889'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > -->
      <class-decl name='vector&lt;void*, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt;' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='171' column='1' hash='7079e63a111be3ef' id='type-id-740'>
        <!-- struct std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > -->
        <base-class access='protected' layout-offset-in-bits='0' type-id='type-id-661'/>
        <member-function access='protected'>
          <!-- void std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_M_insert_aux(__gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >, void* const&) -->
          <function-decl name='_M_insert_aux' mangled-name='_ZNSt6vectorIPv13STL_AllocatorIS0_N15HeapLeakChecker9AllocatorEEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S5_EERKS0_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='295' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt6vectorIPv13STL_AllocatorIS0_N15HeapLeakChecker9AllocatorEEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S5_EERKS0_' hash='1c0b93fc5fcd8780'>
            <!-- implicit parameter of type 'std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-883' is-artificial='yes'/>
            <!-- parameter of type 'class __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >' -->
            <parameter type-id='type-id-446'/>
            <!-- parameter of type 'void* const&' -->
            <parameter type-id='type-id-903'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- enum std::_Rb_tree_color -->
      <enum-decl name='_Rb_tree_color' size-in-bits='32' alignment-in-bits='32' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='85' column='1' hash='81137187fd45bc76' id='type-id-937'>
        <underlying-type type-id='type-id-93'/>
        <enumerator name='_S_red' value='0'/>
        <enumerator name='_S_black' value='1'/>
      </enum-decl>
      <!-- struct std::_Destroy_aux<true> -->
      <class-decl name='_Destroy_aux&lt;true&gt;' is-struct='yes' visibility='default' hash='b98517795f7e396e' id='type-id-938'/>
      <!-- struct std::_Identity<long unsigned int> -->
      <class-decl name='_Identity&lt;long unsigned int&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='469' column='1' hash='92e7fecd627bf7b7' id='type-id-568'>
        <!-- struct std::unary_function<long unsigned int, long unsigned int> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-939'/>
      </class-decl>
      <!-- struct std::_Rb_tree_const_iterator<MemoryRegionMap::Region> -->
      <class-decl name='_Rb_tree_const_iterator&lt;MemoryRegionMap::Region&gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='224' column='1' hash='ef4b2e1fac28f7bb' id='type-id-331'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Const_Base_ptr std::_Rb_tree_const_iterator<MemoryRegionMap::Region>::_M_node -->
          <var-decl name='_M_node' type-id='type-id-940' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='294' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Rb_tree_const_iterator<long unsigned int> -->
      <class-decl name='_Rb_tree_const_iterator&lt;long unsigned int&gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='224' column='1' hash='db046b2d9570fa75' id='type-id-596'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Const_Base_ptr std::_Rb_tree_const_iterator<long unsigned int>::_M_node -->
          <var-decl name='_M_node' type-id='type-id-940' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='294' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
      <class-decl name='_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='224' column='1' hash='a44062a4601703cf' id='type-id-601'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Const_Base_ptr std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-940' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='294' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> > -->
      <class-decl name='_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='224' column='1' hash='612cb00c27036af2' id='type-id-606'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Const_Base_ptr std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-940' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='294' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='_Rb_tree_const_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='224' column='1' hash='cf6a6898f228fade' id='type-id-611'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Const_Base_ptr std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-940' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='294' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Rb_tree_iterator<long unsigned int> -->
      <class-decl name='_Rb_tree_iterator&lt;long unsigned int&gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='154' column='1' hash='977585e5b9b5bd62' id='type-id-618'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_iterator<long unsigned int>::_M_node -->
          <var-decl name='_M_node' type-id='type-id-941' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='219' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
      <class-decl name='_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='154' column='1' hash='ba787c37aed88bc2' id='type-id-623'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-941' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='219' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> > -->
      <class-decl name='_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='154' column='1' hash='b7b846a460756225' id='type-id-628'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-941' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='219' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='_Rb_tree_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='154' column='1' hash='b0c4388ae643801e' id='type-id-633'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-941' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='219' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Rb_tree_node_base -->
      <class-decl name='_Rb_tree_node_base' is-struct='yes' visibility='default' size-in-bits='256' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='88' column='1' hash='b0e18d50c8118c17#2' id='type-id-638'>
        <member-type access='public'>
          <!-- typedef std::_Rb_tree_node_base* std::_Rb_tree_node_base::_Base_ptr -->
          <typedef-decl name='_Base_ptr' type-id='type-id-800' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='89' column='1' hash='68858e106acefb39' id='type-id-941'/>
        </member-type>
        <member-type access='public'>
          <!-- typedef const std::_Rb_tree_node_base* std::_Rb_tree_node_base::_Const_Base_ptr -->
          <typedef-decl name='_Const_Base_ptr' type-id='type-id-640' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='90' column='1' hash='cdb3ec6f1570c647' id='type-id-940'/>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_color std::_Rb_tree_node_base::_M_color -->
          <var-decl name='_M_color' type-id='type-id-937' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='92' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_node_base::_M_parent -->
          <var-decl name='_M_parent' type-id='type-id-941' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='93' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='128'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_node_base::_M_left -->
          <var-decl name='_M_left' type-id='type-id-941' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='94' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='192'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_node_base::_M_right -->
          <var-decl name='_M_right' type-id='type-id-941' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='95' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
      <class-decl name='_Select1st&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='482' column='1' hash='481e9b7087e4a4bd' id='type-id-641'>
        <!-- struct std::unary_function<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, const long unsigned int> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-942'/>
      </class-decl>
      <!-- struct std::_Select1st<std::pair<const long unsigned int, long unsigned int> > -->
      <class-decl name='_Select1st&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='482' column='1' hash='feb18d69ad1daa39' id='type-id-645'>
        <!-- struct std::unary_function<std::pair<const long unsigned int, long unsigned int>, const long unsigned int> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-943'/>
      </class-decl>
      <!-- struct std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='_Select1st&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='482' column='1' hash='08a0eae3e738914f' id='type-id-649'>
        <!-- struct std::unary_function<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-944'/>
      </class-decl>
      <!-- struct std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > -->
      <class-decl name='_Vector_base&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='70' column='1' hash='53c31241bbd4bf37' id='type-id-653'>
        <member-type access='public'>
          <!-- struct std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl -->
          <class-decl name='_Vector_impl' is-struct='yes' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='75' column='1' hash='f0e80b06ea8a3de3' id='type-id-804'>
            <!-- class STL_Allocator<AllocObject, HeapLeakChecker::Allocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-347'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- AllocObject* std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl::_M_start -->
              <var-decl name='_M_start' type-id='type-id-383' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='76' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- AllocObject* std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl::_M_finish -->
              <var-decl name='_M_finish' type-id='type-id-383' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='77' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- AllocObject* std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl::_M_end_of_storage -->
              <var-decl name='_M_end_of_storage' type-id='type-id-383' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='78' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-804' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='136' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Vector_base<void (*)(), std::allocator<void (*)()> > -->
      <class-decl name='_Vector_base&lt;void (*)(), std::allocator&lt;void (*)()&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='70' column='1' hash='5972e8efeaee8104' id='type-id-657'>
        <member-type access='public'>
          <!-- struct std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl -->
          <class-decl name='_Vector_impl' is-struct='yes' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='75' column='1' hash='903cea7ada8a5188' id='type-id-809'>
            <!-- class std::allocator<void (*)()> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-665'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- void (*)(void)* std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl::_M_start -->
              <var-decl name='_M_start' type-id='type-id-892' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='76' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- void (*)(void)* std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl::_M_finish -->
              <var-decl name='_M_finish' type-id='type-id-892' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='77' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- void (*)(void)* std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl::_M_end_of_storage -->
              <var-decl name='_M_end_of_storage' type-id='type-id-892' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='78' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-809' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='136' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > -->
      <class-decl name='_Vector_base&lt;void*, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='70' column='1' hash='ee7a217899937bf4' id='type-id-661'>
        <member-type access='public'>
          <!-- struct std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl -->
          <class-decl name='_Vector_impl' is-struct='yes' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='75' column='1' hash='b6d0f85e9f47d55f' id='type-id-814'>
            <!-- class STL_Allocator<void*, HeapLeakChecker::Allocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-357'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- void** std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl::_M_start -->
              <var-decl name='_M_start' type-id='type-id-184' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='76' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- void** std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl::_M_finish -->
              <var-decl name='_M_finish' type-id='type-id-184' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='77' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- void** std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl::_M_end_of_storage -->
              <var-decl name='_M_end_of_storage' type-id='type-id-184' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='78' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-814' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='136' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::__alloc_swap<STL_Allocator<AllocObject, HeapLeakChecker::Allocator>, true> -->
      <class-decl name='__alloc_swap&lt;STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt;, true&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='148' column='1' hash='6048c35ee8fcb1f5' id='type-id-945'/>
      <!-- struct std::__copy_move<false, false, std::random_access_iterator_tag> -->
      <class-decl name='__copy_move&lt;false, false, std::random_access_iterator_tag&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='335' column='1' hash='ff590c30b4c4d976' id='type-id-946'/>
      <!-- struct std::__copy_move<false, true, std::random_access_iterator_tag> -->
      <class-decl name='__copy_move&lt;false, true, std::random_access_iterator_tag&gt;' is-struct='yes' visibility='default' hash='3a65afcab571c2a9' id='type-id-947'/>
      <!-- struct std::__copy_move_backward<false, false, std::random_access_iterator_tag> -->
      <class-decl name='__copy_move_backward&lt;false, false, std::random_access_iterator_tag&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='539' column='1' hash='12bdf03f50e5f86a#2' id='type-id-948'/>
      <!-- struct std::__copy_move_backward<false, true, std::random_access_iterator_tag> -->
      <class-decl name='__copy_move_backward&lt;false, true, std::random_access_iterator_tag&gt;' is-struct='yes' visibility='default' hash='e802bc59b93de241' id='type-id-949'/>
      <!-- struct std::__false_type -->
      <class-decl name='__false_type' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/cpp_type_traits.h' line='79' column='1' hash='738b2445a3be28a4' id='type-id-950'/>
      <!-- struct std::__miter_base<AllocObject*, false> -->
      <class-decl name='__miter_base&lt;AllocObject*, false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' hash='9a8ae722f8b4b7ef' id='type-id-951'/>
      <!-- struct std::__miter_base<__gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, false> -->
      <class-decl name='__miter_base&lt;__gnu_cxx::__normal_iterator&lt;AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' hash='43f0ac915671ed48' id='type-id-952'/>
      <!-- struct std::__miter_base<void (**)(), false> -->
      <class-decl name='__miter_base&lt;void (**)(), false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' hash='9f35c1e50fbf20ea' id='type-id-953'/>
      <!-- struct std::__miter_base<void**, false> -->
      <class-decl name='__miter_base&lt;void**, false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' hash='1205e67f1557fc05#2' id='type-id-954'/>
      <!-- struct std::__niter_base<AllocObject*, false> -->
      <class-decl name='__niter_base&lt;AllocObject*, false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' hash='e48b910cdd68bf6c' id='type-id-955'/>
      <!-- struct std::__niter_base<__gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, true> -->
      <class-decl name='__niter_base&lt;__gnu_cxx::__normal_iterator&lt;AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, true&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' hash='ff43f2611690d952' id='type-id-956'/>
      <!-- struct std::__niter_base<void (**)(), false> -->
      <class-decl name='__niter_base&lt;void (**)(), false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' hash='fd00fc294373fb3f' id='type-id-957'/>
      <!-- struct std::__niter_base<void**, false> -->
      <class-decl name='__niter_base&lt;void**, false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' hash='24b720d4c529cbad#2' id='type-id-958'/>
      <!-- struct std::__uninitialized_copy<true> -->
      <class-decl name='__uninitialized_copy&lt;true&gt;' is-struct='yes' visibility='default' hash='acaf84e6290e064f' id='type-id-959'/>
      <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> > -->
      <class-decl name='basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;' is-struct='yes' visibility='default' hash='e91349cbc194db55' id='type-id-960'>
        <member-function access='private'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long int, unsigned long int, unsigned long int) -->
          <function-decl name='_M_mutate' mangled-name='_ZNSs9_M_mutateEmmm' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='469' column='1' visibility='default' binding='global' size-in-bits='64' hash='a46227d8770aeeb5'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-21'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-21'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-21'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_leak_hard() -->
          <function-decl name='_M_leak_hard' mangled-name='_ZNSs12_M_leak_hardEv' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='455' column='1' visibility='default' binding='global' size-in-bits='64' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long int, char) -->
          <function-decl name='resize' mangled-name='_ZNSs6resizeEmc' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='640' column='1' visibility='default' binding='global' size-in-bits='64' hash='c0419ee95cd6d61e'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-21'/>
            <!-- parameter of type 'char' -->
            <parameter type-id='type-id-82'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long int) -->
          <function-decl name='reserve' mangled-name='_ZNSs7reserveEm' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='502' column='1' visibility='default' binding='global' size-in-bits='64' hash='e0055d99adb0e173'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-21'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(const char*, unsigned long int) -->
          <function-decl name='append' mangled-name='_ZNSs6appendEPKcm' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='298' column='1' visibility='default' binding='global' size-in-bits='64' hash='057ff5c51024c26f'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-60'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-21'/>
            <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >& -->
            <return type-id='type-id-961'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(const char*) -->
          <function-decl name='append' mangled-name='_ZNSs6appendEPKc' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='868' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' hash='097fbf330d1f319d'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-60'/>
            <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >& -->
            <return type-id='type-id-961'/>
          </function-decl>
        </member-function>
        <member-function access='public' const='yes'>
          <!-- int std::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(const char*) -->
          <function-decl name='compare' mangled-name='_ZNKSs7compareEPKc' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='949' column='1' visibility='default' binding='global' size-in-bits='64' hash='e9ea91a7eab8302c'>
            <!-- implicit parameter of type 'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-677' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-60'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::bidirectional_iterator_tag -->
      <class-decl name='bidirectional_iterator_tag' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_types.h' line='86' column='1' hash='b81b3b2f07587e8f' id='type-id-962'>
        <!-- struct std::forward_iterator_tag -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-963'/>
      </class-decl>
      <!-- struct std::binary_function<long unsigned int, long unsigned int, bool> -->
      <class-decl name='binary_function&lt;long unsigned int, long unsigned int, bool&gt;' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='113' column='1' hash='9bfad793dad31317' id='type-id-964'/>
      <!-- struct std::binary_function<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, bool> -->
      <class-decl name='binary_function&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, bool&gt;' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='113' column='1' hash='d1a7b0cc2aa6841d' id='type-id-965'/>
      <!-- struct std::char_traits<char> -->
      <class-decl name='char_traits&lt;char&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/char_traits.h' line='238' column='1' hash='fc88b5d70352b916#2' id='type-id-966'>
        <member-type access='public'>
          <!-- typedef char std::char_traits<char>::char_type -->
          <typedef-decl name='char_type' type-id='type-id-82' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/char_traits.h' line='239' column='1' hash='65b2d157027b431a' id='type-id-682'/>
        </member-type>
        <member-type access='public'>
          <!-- typedef int std::char_traits<char>::int_type -->
          <typedef-decl name='int_type' type-id='type-id-1' size-in-bits='32' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/char_traits.h' line='240' column='1' hash='09d17c08f594edc7' id='type-id-686'/>
        </member-type>
      </class-decl>
      <!-- struct std::forward_iterator_tag -->
      <class-decl name='forward_iterator_tag' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_types.h' line='83' column='1' hash='1ce091bb5df7890a' id='type-id-963'>
        <!-- struct std::input_iterator_tag -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-967'/>
      </class-decl>
      <!-- struct std::input_iterator_tag -->
      <class-decl name='input_iterator_tag' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_types.h' line='79' column='1' hash='82f140ba4c281ffd' id='type-id-967'/>
      <!-- struct std::less<long unsigned int> -->
      <class-decl name='less&lt;long unsigned int&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='227' column='1' hash='adca245805214c8c' id='type-id-689'>
        <!-- struct std::binary_function<long unsigned int, long unsigned int, bool> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-964'/>
      </class-decl>
      <!-- struct std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > -->
      <class-decl name='less&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='227' column='1' hash='971684e9eb674953' id='type-id-694'>
        <!-- struct std::binary_function<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, bool> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-965'/>
      </class-decl>
      <!-- struct std::pair<const long unsigned int, HeapLeakChecker::RangeValue> -->
      <class-decl name='pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt;' is-struct='yes' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='062e17047552efd7' id='type-id-709'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- const unsigned long int std::pair<const long unsigned int, HeapLeakChecker::RangeValue>::first -->
          <var-decl name='first' type-id='type-id-745' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- HeapLeakChecker::RangeValue std::pair<const long unsigned int, HeapLeakChecker::RangeValue>::second -->
          <var-decl name='second' type-id='type-id-276' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::pair<const long unsigned int, long unsigned int> -->
      <class-decl name='pair&lt;const long unsigned int, long unsigned int&gt;' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='7f1c49977e0e5a40' id='type-id-713'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- const unsigned long int std::pair<const long unsigned int, long unsigned int>::first -->
          <var-decl name='first' type-id='type-id-745' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- unsigned long int std::pair<const long unsigned int, long unsigned int>::second -->
          <var-decl name='second' type-id='type-id-21' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > -->
      <class-decl name='pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;' is-struct='yes' visibility='default' size-in-bits='256' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='d58150c760592c57' id='type-id-717'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >::first -->
          <var-decl name='first' type-id='type-id-669' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >::second -->
          <var-decl name='second' type-id='type-id-369' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::pair<long unsigned int, HeapLeakChecker::RangeValue> -->
      <class-decl name='pair&lt;long unsigned int, HeapLeakChecker::RangeValue&gt;' is-struct='yes' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='739b9789e3e593b6' id='type-id-721'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- unsigned long int std::pair<long unsigned int, HeapLeakChecker::RangeValue>::first -->
          <var-decl name='first' type-id='type-id-21' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- HeapLeakChecker::RangeValue std::pair<long unsigned int, HeapLeakChecker::RangeValue>::second -->
          <var-decl name='second' type-id='type-id-276' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::pair<long unsigned int, long unsigned int> -->
      <class-decl name='pair&lt;long unsigned int, long unsigned int&gt;' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='d5ccc9a6e2c957b9' id='type-id-724'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- unsigned long int std::pair<long unsigned int, long unsigned int>::first -->
          <var-decl name='first' type-id='type-id-21' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- unsigned long int std::pair<long unsigned int, long unsigned int>::second -->
          <var-decl name='second' type-id='type-id-21' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<long unsigned int>, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;long unsigned int&gt;, bool&gt;' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='309f458a1e5fb4f6' id='type-id-859'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_const_iterator<long unsigned int> std::pair<std::_Rb_tree_const_iterator<long unsigned int>, bool>::first -->
          <var-decl name='first' type-id='type-id-596' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_const_iterator<long unsigned int>, bool>::second -->
          <var-decl name='second' type-id='type-id-59' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::pair<std::_Rb_tree_iterator<long unsigned int>, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;long unsigned int&gt;, bool&gt;' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='4671b3e1a54f6705' id='type-id-862'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_iterator<long unsigned int> std::pair<std::_Rb_tree_iterator<long unsigned int>, bool>::first -->
          <var-decl name='first' type-id='type-id-618' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_iterator<long unsigned int>, bool>::second -->
          <var-decl name='second' type-id='type-id-59' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;, bool&gt;' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='32acaf15bec6ce52' id='type-id-865'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, bool>::first -->
          <var-decl name='first' type-id='type-id-623' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, bool>::second -->
          <var-decl name='second' type-id='type-id-59' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;, bool&gt;' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='76156eb46cc521e1' id='type-id-868'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> > std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >, bool>::first -->
          <var-decl name='first' type-id='type-id-628' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >, bool>::second -->
          <var-decl name='second' type-id='type-id-59' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;, bool&gt;' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='9b580a9093608ea3' id='type-id-871'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool>::first -->
          <var-decl name='first' type-id='type-id-633' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool>::second -->
          <var-decl name='second' type-id='type-id-59' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::random_access_iterator_tag -->
      <class-decl name='random_access_iterator_tag' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_types.h' line='89' column='1' hash='2cf237ece7bebf66' id='type-id-968'>
        <!-- struct std::bidirectional_iterator_tag -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-962'/>
      </class-decl>
      <!-- struct std::unary_function<long unsigned int, long unsigned int> -->
      <class-decl name='unary_function&lt;long unsigned int, long unsigned int&gt;' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='101' column='1' hash='b31a290ccd83e2b7' id='type-id-939'/>
      <!-- struct std::unary_function<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, const long unsigned int> -->
      <class-decl name='unary_function&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt;, const long unsigned int&gt;' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='101' column='1' hash='01ea0598cab29287' id='type-id-942'/>
      <!-- struct std::unary_function<std::pair<const long unsigned int, long unsigned int>, const long unsigned int> -->
      <class-decl name='unary_function&lt;std::pair&lt;const long unsigned int, long unsigned int&gt;, const long unsigned int&gt;' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='101' column='1' hash='c69d3bccad50fcd4' id='type-id-943'/>
      <!-- struct std::unary_function<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > -->
      <class-decl name='unary_function&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt;' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='101' column='1' hash='f6d10d1a21d3e178' id='type-id-944'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-969'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-970'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-971'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;const AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-972'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-973'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-974'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<void (* const*)(), std::vector<void (*)(), std::allocator<void (*)()> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;void (* const*)(), std::vector&lt;void (*)(), std::allocator&lt;void (*)()&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-975'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;void (**)(), std::vector&lt;void (*)(), std::allocator&lt;void (*)()&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-976'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<void* const*, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;void* const*, std::vector&lt;void*, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-977'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;void**, std::vector&lt;void*, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-978'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_const_iterator<long unsigned int> > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_const_iterator&lt;long unsigned int&gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-979'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-980'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-981'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-982'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_iterator<long unsigned int> > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_iterator&lt;long unsigned int&gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-983'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-984'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-985'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-986'/>
      <!-- struct std::_Rb_tree_iterator<MemoryRegionMap::Region> -->
      <class-decl name='_Rb_tree_iterator&lt;MemoryRegionMap::Region&gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='154' column='1' hash='b7cbc877fd283670' id='type-id-615'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_iterator<MemoryRegionMap::Region>::_M_node -->
          <var-decl name='_M_node' type-id='type-id-941' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='219' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Rb_tree_node<MemoryRegionMap::Region> -->
      <class-decl name='_Rb_tree_node&lt;MemoryRegionMap::Region&gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-908'/>
      <!-- struct std::_Rb_tree_node<long unsigned int> -->
      <class-decl name='_Rb_tree_node&lt;long unsigned int&gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-911'/>
      <!-- struct std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
      <class-decl name='_Rb_tree_node&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-915'/>
      <!-- struct std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> > -->
      <class-decl name='_Rb_tree_node&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-919'/>
      <!-- struct std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='_Rb_tree_node&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-923'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<long unsigned int>, std::_Rb_tree_const_iterator<long unsigned int> > -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;long unsigned int&gt;, std::_Rb_tree_const_iterator&lt;long unsigned int&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-987'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;, std::_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-988'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >, std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;, std::_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-989'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > > -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;, std::_Rb_tree_const_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-990'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<long unsigned int>, std::_Rb_tree_iterator<long unsigned int> > -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;long unsigned int&gt;, std::_Rb_tree_iterator&lt;long unsigned int&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-991'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-992'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >, std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-993'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > > -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-994'/>
      <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const char*) -->
      <function-decl name='operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;' mangled-name='_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='2198' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_' hash='e665031424228f5d'>
        <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&' -->
        <parameter type-id='type-id-995'/>
        <!-- parameter of type 'const char*' -->
        <parameter type-id='type-id-60'/>
        <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> > -->
        <return type-id='type-id-996'/>
      </function-decl>
      <!-- struct std::allocator<char> -->
      <class-decl name='allocator&lt;char&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stringfwd.h' line='45' column='1' hash='0e29bc311ca95715#2' id='type-id-997'>
        <!-- class __gnu_cxx::new_allocator<char> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-998'/>
      </class-decl>
      <!-- typedef std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::string -->
      <typedef-decl name='string' type-id='type-id-996' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stringfwd.h' line='56' column='1' id='type-id-999'/>
    </namespace-decl>
    <reference-type-def kind='lvalue' type-id='type-id-911' size-in-bits='64' id='type-id-1000'/>
    <!-- std::_Rb_tree_node<long unsigned int>* -->
    <pointer-type-def type-id='type-id-911' size-in-bits='64' id='type-id-927'/>
    <reference-type-def kind='lvalue' type-id='type-id-915' size-in-bits='64' id='type-id-1001'/>
    <!-- std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* -->
    <pointer-type-def type-id='type-id-915' size-in-bits='64' id='type-id-929'/>
    <reference-type-def kind='lvalue' type-id='type-id-919' size-in-bits='64' id='type-id-1002'/>
    <!-- std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >* -->
    <pointer-type-def type-id='type-id-919' size-in-bits='64' id='type-id-930'/>
    <reference-type-def kind='lvalue' type-id='type-id-923' size-in-bits='64' id='type-id-1003'/>
    <!-- std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* -->
    <pointer-type-def type-id='type-id-923' size-in-bits='64' id='type-id-931'/>
    <!-- void* const -->
    <qualified-type-def type-id='type-id-56' const='yes' id='type-id-902'/>
    <!-- void* const -->
    <qualified-type-def type-id='type-id-56' const='yes' id='type-id-1004'/>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- namespace tcmalloc::commandlineflags -->
      <namespace-decl name='commandlineflags'>
        <!-- bool tcmalloc::commandlineflags::StringToBool(const char*, bool) -->
        <function-decl name='StringToBool' mangled-name='_ZN8tcmalloc16commandlineflags12StringToBoolEPKcb' filepath='./src/base/commandlineflags.h' line='118' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc16commandlineflags12StringToBoolEPKcb' hash='ccbc94ea235cadeb'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-59'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead'>
      <!-- int32 FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_heap_check_pointer_source_alignment -->
      <var-decl name='FLAGS_heap_check_pointer_source_alignment' type-id='type-id-81' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead41FLAGS_heap_check_pointer_source_alignmentE' visibility='default' filepath='src/heap-checker.cc' line='190' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead41FLAGS_heap_check_pointer_source_alignmentE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noheap_check_pointer_source_alignment -->
      <var-decl name='FLAGS_noheap_check_pointer_source_alignment' type-id='type-id-82' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead43FLAGS_noheap_check_pointer_source_alignmentE' visibility='default' filepath='src/heap-checker.cc' line='194' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead43FLAGS_noheap_check_pointer_source_alignmentE'/>
      <!-- int32 FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_heap_check_delay_seconds -->
      <var-decl name='FLAGS_heap_check_delay_seconds' type-id='type-id-81' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead30FLAGS_heap_check_delay_secondsE' visibility='default' filepath='src/heap-checker.cc' line='216' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead30FLAGS_heap_check_delay_secondsE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noheap_check_delay_seconds -->
      <var-decl name='FLAGS_noheap_check_delay_seconds' type-id='type-id-82' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead32FLAGS_noheap_check_delay_secondsE' visibility='default' filepath='src/heap-checker.cc' line='225' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead32FLAGS_noheap_check_delay_secondsE'/>
    </namespace-decl>
    <!-- void LogPrintf(int, const char*, typedef __va_list_tag __va_list_tag*) -->
    <function-decl name='LogPrintf' mangled-name='_Z9LogPrintfiPKcP13__va_list_tag' filepath='./src/base/logging.h' line='198' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z9LogPrintfiPKcP13__va_list_tag' hash='09869f0b6b21fd13'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='./src/base/logging.h' line='198' column='1'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60' filepath='./src/base/logging.h' line='198' column='1'/>
      <!-- parameter of type 'typedef __va_list_tag __va_list_tag*' -->
      <parameter type-id='type-id-80' filepath='./src/base/logging.h' line='198' column='1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void RAW_LOG(int, const char*, ...) -->
    <function-decl name='RAW_LOG' mangled-name='_Z7RAW_LOGiPKcz' filepath='./src/base/logging.h' line='228' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z7RAW_LOGiPKcz' hash='e9ea91a7eab8302c'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='./src/base/logging.h' line='229' column='1'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60' filepath='./src/base/logging.h' line='229' column='1'/>
      <parameter is-variadic='yes'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void RAW_VLOG(int, const char*, ...) -->
    <function-decl name='RAW_VLOG' mangled-name='_Z8RAW_VLOGiPKcz' filepath='./src/base/logging.h' line='229' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z8RAW_VLOGiPKcz' hash='e9ea91a7eab8302c'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='./src/base/logging.h' line='229' column='1'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60' filepath='./src/base/logging.h' line='229' column='1'/>
      <parameter is-variadic='yes'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- namespace __gnu_cxx -->
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > -->
      <class-decl name='__normal_iterator&lt;AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='669' column='1' hash='c9f376c79853343e' id='type-id-434'>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- AllocObject* __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >::_M_current -->
          <var-decl name='_M_current' type-id='type-id-383' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='671' column='1'/>
        </data-member>
      </class-decl>
      <!-- class __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > -->
      <class-decl name='__normal_iterator&lt;const AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='669' column='1' hash='3fe97910b437d8d2' id='type-id-438'>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- const AllocObject* __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >::_M_current -->
          <var-decl name='_M_current' type-id='type-id-464' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='671' column='1'/>
        </data-member>
      </class-decl>
      <!-- class __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > > -->
      <class-decl name='__normal_iterator&lt;void (**)(), std::vector&lt;void (*)(), std::allocator&lt;void (*)()&gt; &gt; &gt;' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='669' column='1' hash='4b54dbc79c1c40c2' id='type-id-442'>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- void (*)(void)* __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >::_M_current -->
          <var-decl name='_M_current' type-id='type-id-892' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='671' column='1'/>
        </data-member>
      </class-decl>
      <!-- class __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > > -->
      <class-decl name='__normal_iterator&lt;void**, std::vector&lt;void*, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt; &gt;' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='669' column='1' hash='2069a6c02df2083a' id='type-id-446'>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- void** __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >::_M_current -->
          <var-decl name='_M_current' type-id='type-id-184' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='671' column='1'/>
        </data-member>
      </class-decl>
      <!-- class __gnu_cxx::new_allocator<char> -->
      <class-decl name='new_allocator&lt;char&gt;' visibility='default' hash='517d217d895f9944' id='type-id-1005'/>
      <!-- class __gnu_cxx::new_allocator<void (*)()> -->
      <class-decl name='new_allocator&lt;void (*)()&gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' hash='baa276a39ad46dce' id='type-id-452'/>
      <!-- class __gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > -->
      <class-decl name='__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1006'/>
      <!-- class __gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > -->
      <class-decl name='__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1007'/>
      <!-- class __gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > -->
      <class-decl name='__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1008'/>
      <!-- class __gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > -->
      <class-decl name='__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1009'/>
      <!-- class __gnu_cxx::__normal_iterator<void (* const*)(), std::vector<void (*)(), std::allocator<void (*)()> > > -->
      <class-decl name='__normal_iterator&lt;void (* const*)(), std::vector&lt;void (*)(), std::allocator&lt;void (*)()&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1010'/>
      <!-- class __gnu_cxx::__normal_iterator<void* const*, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > > -->
      <class-decl name='__normal_iterator&lt;void* const*, std::vector&lt;void*, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1011'/>
    </namespace-decl>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- namespace base::subtle -->
      <namespace-decl name='subtle'>
      </namespace-decl>
      <!-- namespace base::internal -->
      <namespace-decl name='internal'>
        <!-- struct base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)> -->
        <class-decl name='HookList&lt;void (*)(const void*, const void*, size_t, int, int, int, off_t)&gt;' is-struct='yes' visibility='default' size-in-bits='576' filepath='src/malloc_hook-inl.h' line='59' column='1' hash='ed8b1cae5dcb81e4#2' id='type-id-455'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-245' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-246' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
        <!-- struct base::internal::HookList<void (*)(const void*, ptrdiff_t)> -->
        <class-decl name='HookList&lt;void (*)(const void*, ptrdiff_t)&gt;' is-struct='yes' visibility='default' size-in-bits='576' filepath='src/malloc_hook-inl.h' line='59' column='1' hash='c33a23d20ff1aff9#2' id='type-id-457'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, ptrdiff_t)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-245' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, ptrdiff_t)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-246' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead'>
      <!-- std::string FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_heap_check -->
      <var-decl name='FLAGS_heap_check' type-id='type-id-999' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead16FLAGS_heap_checkE' visibility='default' filepath='src/heap-checker.cc' line='142' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead16FLAGS_heap_checkE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_noheap_check -->
      <var-decl name='FLAGS_noheap_check' type-id='type-id-82' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead18FLAGS_noheap_checkE' visibility='default' filepath='src/heap-checker.cc' line='148' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead18FLAGS_noheap_checkE'/>
      <!-- std::string FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_heap_profile_pprof -->
      <var-decl name='FLAGS_heap_profile_pprof' type-id='type-id-999' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead24FLAGS_heap_profile_pprofE' visibility='default' filepath='src/heap-checker.cc' line='229' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead24FLAGS_heap_profile_pprofE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_noheap_profile_pprof -->
      <var-decl name='FLAGS_noheap_profile_pprof' type-id='type-id-82' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead26FLAGS_noheap_profile_pprofE' visibility='default' filepath='src/heap-checker.cc' line='231' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead26FLAGS_noheap_profile_pprofE'/>
      <!-- std::string FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_heap_check_dump_directory -->
      <var-decl name='FLAGS_heap_check_dump_directory' type-id='type-id-999' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead31FLAGS_heap_check_dump_directoryE' visibility='default' filepath='src/heap-checker.cc' line='233' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead31FLAGS_heap_check_dump_directoryE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_noheap_check_dump_directory -->
      <var-decl name='FLAGS_noheap_check_dump_directory' type-id='type-id-82' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead33FLAGS_noheap_check_dump_directoryE' visibility='default' filepath='src/heap-checker.cc' line='235' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead33FLAGS_noheap_check_dump_directoryE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead'>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_report -->
      <var-decl name='FLAGS_heap_check_report' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead23FLAGS_heap_check_reportE' visibility='default' filepath='src/heap-checker.cc' line='150' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead23FLAGS_heap_check_reportE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_report -->
      <var-decl name='FLAGS_noheap_check_report' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead25FLAGS_noheap_check_reportE' visibility='default' filepath='src/heap-checker.cc' line='150' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead25FLAGS_noheap_check_reportE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_before_constructors -->
      <var-decl name='FLAGS_heap_check_before_constructors' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead36FLAGS_heap_check_before_constructorsE' visibility='default' filepath='src/heap-checker.cc' line='152' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead36FLAGS_heap_check_before_constructorsE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_before_constructors -->
      <var-decl name='FLAGS_noheap_check_before_constructors' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead38FLAGS_noheap_check_before_constructorsE' visibility='default' filepath='src/heap-checker.cc' line='154' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead38FLAGS_noheap_check_before_constructorsE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_after_destructors -->
      <var-decl name='FLAGS_heap_check_after_destructors' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead34FLAGS_heap_check_after_destructorsE' visibility='default' filepath='src/heap-checker.cc' line='156' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead34FLAGS_heap_check_after_destructorsE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_after_destructors -->
      <var-decl name='FLAGS_noheap_check_after_destructors' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead36FLAGS_noheap_check_after_destructorsE' visibility='default' filepath='src/heap-checker.cc' line='159' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead36FLAGS_noheap_check_after_destructorsE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_strict_check -->
      <var-decl name='FLAGS_heap_check_strict_check' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead29FLAGS_heap_check_strict_checkE' visibility='default' filepath='src/heap-checker.cc' line='161' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead29FLAGS_heap_check_strict_checkE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_strict_check -->
      <var-decl name='FLAGS_noheap_check_strict_check' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_noheap_check_strict_checkE' visibility='default' filepath='src/heap-checker.cc' line='161' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_noheap_check_strict_checkE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_ignore_global_live -->
      <var-decl name='FLAGS_heap_check_ignore_global_live' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_heap_check_ignore_global_liveE' visibility='default' filepath='src/heap-checker.cc' line='163' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_heap_check_ignore_global_liveE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_ignore_global_live -->
      <var-decl name='FLAGS_noheap_check_ignore_global_live' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_noheap_check_ignore_global_liveE' visibility='default' filepath='src/heap-checker.cc' line='166' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_noheap_check_ignore_global_liveE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_identify_leaks -->
      <var-decl name='FLAGS_heap_check_identify_leaks' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_heap_check_identify_leaksE' visibility='default' filepath='src/heap-checker.cc' line='168' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_heap_check_identify_leaksE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_identify_leaks -->
      <var-decl name='FLAGS_noheap_check_identify_leaks' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead33FLAGS_noheap_check_identify_leaksE' visibility='default' filepath='src/heap-checker.cc' line='173' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead33FLAGS_noheap_check_identify_leaksE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_ignore_thread_live -->
      <var-decl name='FLAGS_heap_check_ignore_thread_live' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_heap_check_ignore_thread_liveE' visibility='default' filepath='src/heap-checker.cc' line='175' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_heap_check_ignore_thread_liveE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_ignore_thread_live -->
      <var-decl name='FLAGS_noheap_check_ignore_thread_live' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_noheap_check_ignore_thread_liveE' visibility='default' filepath='src/heap-checker.cc' line='178' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_noheap_check_ignore_thread_liveE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_test_pointer_alignment -->
      <var-decl name='FLAGS_heap_check_test_pointer_alignment' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead39FLAGS_heap_check_test_pointer_alignmentE' visibility='default' filepath='src/heap-checker.cc' line='180' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead39FLAGS_heap_check_test_pointer_alignmentE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_test_pointer_alignment -->
      <var-decl name='FLAGS_noheap_check_test_pointer_alignment' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead41FLAGS_noheap_check_test_pointer_alignmentE' visibility='default' filepath='src/heap-checker.cc' line='183' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead41FLAGS_noheap_check_test_pointer_alignmentE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_run_under_gdb -->
      <var-decl name='FLAGS_heap_check_run_under_gdb' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead30FLAGS_heap_check_run_under_gdbE' visibility='default' filepath='src/heap-checker.cc' line='211' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead30FLAGS_heap_check_run_under_gdbE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_run_under_gdb -->
      <var-decl name='FLAGS_noheap_check_run_under_gdb' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_noheap_check_run_under_gdbE' visibility='default' filepath='src/heap-checker.cc' line='214' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_noheap_check_run_under_gdbE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead'>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_check_max_pointer_offset -->
      <var-decl name='FLAGS_heap_check_max_pointer_offset' type-id='type-id-105' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead35FLAGS_heap_check_max_pointer_offsetE' visibility='default' filepath='src/heap-checker.cc' line='204' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead35FLAGS_heap_check_max_pointer_offsetE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_check_max_pointer_offset -->
      <var-decl name='FLAGS_noheap_check_max_pointer_offset' type-id='type-id-82' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead37FLAGS_noheap_check_max_pointer_offsetE' visibility='default' filepath='src/heap-checker.cc' line='209' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead37FLAGS_noheap_check_max_pointer_offsetE'/>
    </namespace-decl>
    <!-- void HeapLeakChecker_RunHeapCleanups() -->
    <function-decl name='HeapLeakChecker_RunHeapCleanups' mangled-name='_Z31HeapLeakChecker_RunHeapCleanupsv' filepath='src/heap-checker.cc' line='1931' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z31HeapLeakChecker_RunHeapCleanupsv' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void HeapLeakChecker_InternalInitStart() -->
    <function-decl name='HeapLeakChecker_InternalInitStart' mangled-name='_Z33HeapLeakChecker_InternalInitStartv' filepath='src/heap-checker.cc' line='1954' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z33HeapLeakChecker_InternalInitStartv' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void HeapLeakChecker_BeforeConstructors() -->
    <function-decl name='HeapLeakChecker_BeforeConstructors' mangled-name='_Z34HeapLeakChecker_BeforeConstructorsv' filepath='src/heap-checker.cc' line='2259' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z34HeapLeakChecker_BeforeConstructorsv' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void MallocHook_InitAtFirstAllocation_HeapLeakChecker() -->
    <function-decl name='MallocHook_InitAtFirstAllocation_HeapLeakChecker' mangled-name='MallocHook_InitAtFirstAllocation_HeapLeakChecker' filepath='src/heap-checker.cc' line='2306' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_InitAtFirstAllocation_HeapLeakChecker' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void HeapLeakChecker_AfterDestructors() -->
    <function-decl name='HeapLeakChecker_AfterDestructors' mangled-name='_Z32HeapLeakChecker_AfterDestructorsv' filepath='src/heap-checker.cc' line='2311' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z32HeapLeakChecker_AfterDestructorsv' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- size_t (const HeapProfileTable::AllocValue&) -->
    <function-type size-in-bits='64' hash='eea6ded2882eee29' id='type-id-747'>
      <!-- parameter of type 'const HeapProfileTable::AllocValue&' -->
      <parameter type-id='type-id-312'/>
      <!-- typedef size_t -->
      <return type-id='type-id-61'/>
    </function-type>
    <!-- void (const HeapProfileTable::AllocContextInfo&) -->
    <function-type size-in-bits='64' hash='7e243d7379992916' id='type-id-887'>
      <!-- parameter of type 'const HeapProfileTable::AllocContextInfo&' -->
      <parameter type-id='type-id-481'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (void*, HeapProfileTable::AllocValue*, void (*)(void*, const HeapProfileTable::AllocInfo&)) -->
    <function-type size-in-bits='64' hash='79e377909b3eb7d7' id='type-id-895'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
      <parameter type-id='type-id-300'/>
      <!-- parameter of type 'void (*)(void*, const HeapProfileTable::AllocInfo&)' -->
      <parameter type-id='type-id-305'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (void*, const HeapProfileTable::AllocInfo&) -->
    <function-type size-in-bits='64' hash='da590111a99c362b' id='type-id-897'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'const HeapProfileTable::AllocInfo&' -->
      <parameter type-id='type-id-483'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (void*, ptrdiff_t) -->
    <function-type size-in-bits='64' hash='52c0efb08d2aa513' id='type-id-898'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'typedef ptrdiff_t' -->
      <parameter type-id='type-id-346'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (void*, void*, size_t, int, int, int, off_t) -->
    <function-type size-in-bits='64' hash='d89e6f5baae5273c' id='type-id-900'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'typedef off_t' -->
      <parameter type-id='type-id-345'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- int (std::basic_string<char, std::char_traits<char>, std::allocator<char> >::*) (const char*) -->
    <function-type method-class-id='type-id-960' const='yes' size-in-bits='64' hash='e9ea91a7eab8302c' id='type-id-1012'>
      <!-- implicit parameter of type 'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
      <parameter type-id='type-id-677' is-artificial='yes'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >& (std::basic_string<char, std::char_traits<char>, std::allocator<char> >::*) (const char*) -->
    <function-type method-class-id='type-id-996' size-in-bits='64' hash='097fbf330d1f319d' id='type-id-1013'>
      <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
      <parameter type-id='type-id-829' is-artificial='yes'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >& -->
      <return type-id='type-id-961'/>
    </function-type>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >& (std::basic_string<char, std::char_traits<char>, std::allocator<char> >::*) (const char*, unsigned long int) -->
    <function-type method-class-id='type-id-996' size-in-bits='64' hash='057ff5c51024c26f' id='type-id-1014'>
      <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
      <parameter type-id='type-id-829' is-artificial='yes'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- parameter of type 'unsigned long int' -->
      <parameter type-id='type-id-21'/>
      <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >& -->
      <return type-id='type-id-961'/>
    </function-type>
    <!-- void (std::basic_string<char, std::char_traits<char>, std::allocator<char> >::*) () -->
    <function-type method-class-id='type-id-996' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-1015'>
      <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
      <parameter type-id='type-id-829' is-artificial='yes'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (std::basic_string<char, std::char_traits<char>, std::allocator<char> >::*) (unsigned long int) -->
    <function-type method-class-id='type-id-996' size-in-bits='64' hash='e0055d99adb0e173' id='type-id-1016'>
      <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
      <parameter type-id='type-id-829' is-artificial='yes'/>
      <!-- parameter of type 'unsigned long int' -->
      <parameter type-id='type-id-21'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (std::basic_string<char, std::char_traits<char>, std::allocator<char> >::*) (unsigned long int, char) -->
    <function-type method-class-id='type-id-960' size-in-bits='64' hash='c0419ee95cd6d61e' id='type-id-1017'>
      <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
      <parameter type-id='type-id-829' is-artificial='yes'/>
      <!-- parameter of type 'unsigned long int' -->
      <parameter type-id='type-id-21'/>
      <!-- parameter of type 'char' -->
      <parameter type-id='type-id-82'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (std::basic_string<char, std::char_traits<char>, std::allocator<char> >::*) (unsigned long int, unsigned long int, unsigned long int) -->
    <function-type method-class-id='type-id-960' size-in-bits='64' hash='a46227d8770aeeb5' id='type-id-1018'>
      <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
      <parameter type-id='type-id-829' is-artificial='yes'/>
      <!-- parameter of type 'unsigned long int' -->
      <parameter type-id='type-id-21'/>
      <!-- parameter of type 'unsigned long int' -->
      <parameter type-id='type-id-21'/>
      <!-- parameter of type 'unsigned long int' -->
      <parameter type-id='type-id-21'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/heap-profile-table.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- char[] -->
    <array-type-def dimensions='1' type-id='type-id-82' size-in-bits='unknown' hash='6915b710ae33e54a' id='type-id-309'>
      <!-- <anonymous range>[] -->
      <subrange length='unknown' lower-bound='0' upper-bound='0' size-in-bits='64' is-anonymous='yes' hash='eba0a2b392137dcb' id='type-id-1019'/>
    </array-type-def>
    <!-- AddressMap<HeapProfileTable::AllocValue>* const -->
    <qualified-type-def type-id='type-id-257' const='yes' hash='e0b7761f3d413ed0' id='type-id-1020'/>
    <!-- HeapProfileTable* const -->
    <qualified-type-def type-id='type-id-313' const='yes' hash='e2c92f5dd99d0aaf' id='type-id-1021'/>
    <!-- HeapProfileTable::AllocValue* const -->
    <qualified-type-def type-id='type-id-300' const='yes' hash='a05f0b37caea8e4c' id='type-id-1022'/>
    <!-- HeapProfileTable::AllocValue::Bucket* const -->
    <qualified-type-def type-id='type-id-296' const='yes' hash='43524f6b8895b070' id='type-id-1023'/>
    <!-- HeapProfileTable::AllocValue::Bucket* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-1023' size-in-bits='64' hash='b0a2cdee4c21458c' id='type-id-1024'/>
    <!-- HeapProfileTable::AllocValue::Bucket* const* -->
    <pointer-type-def type-id='type-id-1023' size-in-bits='64' hash='0a7a54adb79f8351' id='type-id-1025'/>
    <!-- HeapProfileTable::AllocValue::Bucket*& -->
    <reference-type-def kind='lvalue' type-id='type-id-296' size-in-bits='64' hash='3b79c66d235bbf5a' id='type-id-1026'/>
    <!-- HeapProfileTable::BufferArgs* const -->
    <qualified-type-def type-id='type-id-317' const='yes' hash='e5b7ce8368d24f14' id='type-id-1027'/>
    <!-- HeapProfileTable::DumpArgs* const -->
    <qualified-type-def type-id='type-id-397' const='yes' hash='418da9e21e6408a4' id='type-id-1028'/>
    <!-- HeapProfileTable::Snapshot* const -->
    <qualified-type-def type-id='type-id-283' const='yes' hash='47a9c69baece808c' id='type-id-1029'/>
    <!-- HeapProfileTable::Snapshot::Entry& -->
    <reference-type-def kind='lvalue' type-id='type-id-295' size-in-bits='64' hash='901883267dcbb721' id='type-id-1030'/>
    <!-- HeapProfileTable::Snapshot::Entry* -->
    <pointer-type-def type-id='type-id-295' size-in-bits='64' hash='f7f5bea74aeee6df' id='type-id-1031'/>
    <!-- HeapProfileTable::Snapshot::Entry* const -->
    <qualified-type-def type-id='type-id-1031' const='yes' hash='f747777c31e3526c' id='type-id-1032'/>
    <!-- __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-1033' size-in-bits='64' hash='eef44e1d6293f762' id='type-id-1034'/>
    <!-- __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const -->
    <qualified-type-def type-id='type-id-1034' const='yes' hash='86ef4a1c6e54a0d0' id='type-id-1035'/>
    <!-- __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1036' size-in-bits='64' hash='38c51b6709f25134' id='type-id-1037'/>
    <!-- __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* const -->
    <qualified-type-def type-id='type-id-1037' const='yes' hash='62d2ccfd088c97c3' id='type-id-1038'/>
    <!-- bool (*)(HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*) -->
    <pointer-type-def type-id='type-id-1039' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1040'/>
    <!-- bool* -->
    <pointer-type-def type-id='type-id-59' size-in-bits='64' hash='9c0e3f8596726a0b' id='type-id-143'/>
    <!-- const HeapProfileBucket -->
    <qualified-type-def type-id='type-id-289' const='yes' hash='42245880be286804' id='type-id-1041'/>
    <!-- const HeapProfileBucket* -->
    <pointer-type-def type-id='type-id-1041' size-in-bits='64' hash='cfc473927c50a1d7' id='type-id-1042'/>
    <!-- const HeapProfileTable::Snapshot::Entry -->
    <qualified-type-def type-id='type-id-295' const='yes' hash='32c68a2244d041f3' id='type-id-1043'/>
    <!-- const HeapProfileTable::Snapshot::Entry& -->
    <reference-type-def kind='lvalue' type-id='type-id-1043' size-in-bits='64' hash='30db24c88da98826' id='type-id-1044'/>
    <!-- const HeapProfileTable::Snapshot::Entry* -->
    <pointer-type-def type-id='type-id-1043' size-in-bits='64' hash='9c92bbb47e7184ae' id='type-id-1045'/>
    <!-- const HeapProfileTable::Snapshot::Entry* const -->
    <qualified-type-def type-id='type-id-1045' const='yes' hash='b725c6c7e3c4344e' id='type-id-1046'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
    <qualified-type-def type-id='type-id-1033' const='yes' hash='399ba2b1f7a1f6ff' id='type-id-1047'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1047' size-in-bits='64' hash='982be628d3e04a85' id='type-id-1048'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-1047' size-in-bits='64' hash='591178d4c3d4ce88' id='type-id-1049'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const -->
    <qualified-type-def type-id='type-id-1049' const='yes' hash='e856c6c52a298533' id='type-id-1050'/>
    <!-- const __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-1036' const='yes' hash='b3a6841c26df84c8' id='type-id-1051'/>
    <!-- const __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1051' size-in-bits='64' hash='88d8c6d7702c9ae3' id='type-id-1052'/>
    <!-- const __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1051' size-in-bits='64' hash='d6a96b55f3f2798f' id='type-id-1053'/>
    <!-- const std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
    <qualified-type-def type-id='type-id-1054' const='yes' hash='44edf13276f1212d' id='type-id-1055'/>
    <!-- const std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1055' size-in-bits='64' hash='51287da8c3914d4a' id='type-id-1056'/>
    <!-- const std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-1055' size-in-bits='64' hash='221ffecc1072ab87' id='type-id-1057'/>
    <!-- const std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const -->
    <qualified-type-def type-id='type-id-1057' const='yes' hash='8105e2a52abe9f8f' id='type-id-1058'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-1059' const='yes' hash='9a02d5210a10712d' id='type-id-1060'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1060' size-in-bits='64' hash='26b6e4c4e0d3a809' id='type-id-1061'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1060' size-in-bits='64' hash='5bc33bd2d5e5a453' id='type-id-1062'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* const -->
    <qualified-type-def type-id='type-id-1062' const='yes' hash='f889c6711a6c4cf1' id='type-id-1063'/>
    <!-- const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-1064' const='yes' hash='0f38fec4d4d72218' id='type-id-1065'/>
    <!-- const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1065' size-in-bits='64' hash='6c101c86481ce2b6' id='type-id-1066'/>
    <!-- const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1065' size-in-bits='64' hash='c7a3439033433cb6' id='type-id-1067'/>
    <!-- const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* const -->
    <qualified-type-def type-id='type-id-1067' const='yes' hash='d39f4c357ba75079' id='type-id-1068'/>
    <!-- const std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-1069' const='yes' hash='41e5a69cf583f34d' id='type-id-1070'/>
    <!-- const std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1070' size-in-bits='64' hash='df49fbdecaf4efe7' id='type-id-1071'/>
    <!-- const std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* const -->
    <qualified-type-def type-id='type-id-1071' const='yes' hash='480308a9eaf4fff1' id='type-id-1072'/>
    <!-- const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
    <qualified-type-def type-id='type-id-1073' const='yes' hash='436a77652a5948c5' id='type-id-1074'/>
    <!-- const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1074' size-in-bits='64' hash='60e01552a8258bd5' id='type-id-1075'/>
    <!-- const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-1076' const='yes' hash='17ed594f6d72fdf9' id='type-id-1077'/>
    <!-- const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1077' size-in-bits='64' hash='75317c45a83fca64' id='type-id-1078'/>
    <!-- const std::less<HeapProfileTable::Bucket*> -->
    <qualified-type-def type-id='type-id-1079' const='yes' hash='933252f16eb570c4' id='type-id-1080'/>
    <!-- const std::less<HeapProfileTable::Bucket*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1080' size-in-bits='64' hash='d1c19137a7ee8399' id='type-id-1081'/>
    <!-- const std::less<HeapProfileTable::Bucket*>* -->
    <pointer-type-def type-id='type-id-1080' size-in-bits='64' hash='14bda169e5bba8b4' id='type-id-1082'/>
    <!-- const std::less<HeapProfileTable::Bucket*>* const -->
    <qualified-type-def type-id='type-id-1082' const='yes' hash='31842a7134d15c6f' id='type-id-1083'/>
    <!-- const std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
    <qualified-type-def type-id='type-id-298' const='yes' hash='75742e30cc8d52ef' id='type-id-1084'/>
    <!-- const std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1084' size-in-bits='64' hash='ed243adc8966c8c9' id='type-id-1085'/>
    <!-- const std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-1084' size-in-bits='64' hash='6ac3a11525680c62' id='type-id-1086'/>
    <!-- const std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const -->
    <qualified-type-def type-id='type-id-1086' const='yes' hash='9c71ab38d14fe7ae' id='type-id-1087'/>
    <!-- const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> -->
    <qualified-type-def type-id='type-id-1088' const='yes' hash='0a85cd8a4c205622' id='type-id-1089'/>
    <!-- const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1089' size-in-bits='64' hash='d3145ec240726e81' id='type-id-1090'/>
    <!-- const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>* -->
    <pointer-type-def type-id='type-id-1089' size-in-bits='64' hash='847c40f6ed1e3d70' id='type-id-1091'/>
    <!-- const std::pair<const void* const, const char*> -->
    <qualified-type-def type-id='type-id-1092' const='yes' hash='b5c3d47355859335#2' id='type-id-1093'/>
    <!-- const std::pair<const void* const, const char*>* -->
    <pointer-type-def type-id='type-id-1093' size-in-bits='64' hash='96f0b7a4b27e185c#2' id='type-id-1094'/>
    <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1054' size-in-bits='64' hash='cfff5bd78360c3ac' id='type-id-1095'/>
    <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-1054' size-in-bits='64' hash='6d471e48d2b2387b' id='type-id-1096'/>
    <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const -->
    <qualified-type-def type-id='type-id-1096' const='yes' hash='6635ca67d819e9db' id='type-id-1097'/>
    <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>* -->
    <pointer-type-def type-id='type-id-1098' size-in-bits='64' hash='56f0cfc85a645958' id='type-id-1099'/>
    <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>* const -->
    <qualified-type-def type-id='type-id-1099' const='yes' hash='8442d9cba67b190f' id='type-id-1100'/>
    <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>* const -->
    <qualified-type-def type-id='type-id-1101' const='yes' hash='9007cf3100ca41c1' id='type-id-1102'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1059' size-in-bits='64' hash='46499ff5ab5d0664' id='type-id-1103'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1059' size-in-bits='64' hash='2cd0e05631294505' id='type-id-1104'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* const -->
    <qualified-type-def type-id='type-id-1104' const='yes' hash='a282c488f20aefcc' id='type-id-1105'/>
    <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1064' size-in-bits='64' hash='d3b72f7da10730fb' id='type-id-1106'/>
    <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1064' size-in-bits='64' hash='94c592503491d2f7' id='type-id-1107'/>
    <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* const -->
    <qualified-type-def type-id='type-id-1107' const='yes' hash='ccd950358e25ac05' id='type-id-1108'/>
    <!-- std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1073' size-in-bits='64' hash='1d3e593653af8b3c' id='type-id-1109'/>
    <!-- std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-1073' size-in-bits='64' hash='568c07999c82ac79' id='type-id-1110'/>
    <!-- std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const -->
    <qualified-type-def type-id='type-id-1110' const='yes' hash='4764139e91a9f799' id='type-id-1111'/>
    <!-- std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >* const -->
    <qualified-type-def type-id='type-id-1112' const='yes' hash='8dd1573c49ad976a' id='type-id-1113'/>
    <!-- std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1076' size-in-bits='64' hash='9d02b04319da348c' id='type-id-1114'/>
    <!-- std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* const -->
    <qualified-type-def type-id='type-id-1114' const='yes' hash='263015adcba70eb9' id='type-id-1115'/>
    <!-- std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-298' size-in-bits='64' hash='8d5be3571ad68a04' id='type-id-1116'/>
    <!-- std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-298' size-in-bits='64' hash='e4a35b7bd32edcfb' id='type-id-1117'/>
    <!-- std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const -->
    <qualified-type-def type-id='type-id-1117' const='yes' hash='2f64b4f7fa26e011' id='type-id-1118'/>
    <!-- std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1088' size-in-bits='64' hash='6da785dba22ff25f' id='type-id-1119'/>
    <!-- std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>* -->
    <pointer-type-def type-id='type-id-1088' size-in-bits='64' hash='d8ca1fe0337e1dda' id='type-id-1120'/>
    <!-- std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>* const -->
    <qualified-type-def type-id='type-id-1120' const='yes' hash='e307a786efa036ca' id='type-id-1121'/>
    <!-- std::pair<const void* const, const char*>* -->
    <pointer-type-def type-id='type-id-1092' size-in-bits='64' hash='50f29f29e6ce4313#2' id='type-id-1122'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>* -->
    <pointer-type-def type-id='type-id-1123' size-in-bits='64' hash='52012e4a18b9635c' id='type-id-1124'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>* const -->
    <qualified-type-def type-id='type-id-1124' const='yes' hash='76607f0d59c20921' id='type-id-1125'/>
    <!-- void (*)(const HeapProfileBucket*, HeapProfileTable::BufferArgs*) -->
    <pointer-type-def type-id='type-id-1126' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1127'/>
    <!-- void (*)(void*, HeapProfileTable::AllocValue*, HeapProfileTable::AddNonLiveArgs*) -->
    <pointer-type-def type-id='type-id-1128' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1129'/>
    <!-- void (*)(void*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot*) -->
    <pointer-type-def type-id='type-id-1130' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1131'/>
    <!-- void (*)(void*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot::ReportState*) -->
    <pointer-type-def type-id='type-id-1132' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1133'/>
    <!-- void (*)(void*, HeapProfileTable::AllocValue*, char*) -->
    <pointer-type-def type-id='type-id-1134' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1135'/>
    <!-- void (*)(void*, HeapProfileTable::AllocValue*, const HeapProfileTable::DumpArgs&) -->
    <pointer-type-def type-id='type-id-1136' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1137'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::Cluster* -->
    <pointer-type-def type-id='type-id-249' size-in-bits='64' id='type-id-1138'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::Cluster** -->
    <pointer-type-def type-id='type-id-1138' size-in-bits='64' id='type-id-1139'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::Entry* -->
    <pointer-type-def type-id='type-id-250' size-in-bits='64' id='type-id-1140'/>
    <!-- const std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-1141' const='yes' id='type-id-1142'/>
    <reference-type-def kind='lvalue' type-id='type-id-1142' size-in-bits='64' id='type-id-1143'/>
    <!-- const std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1142' size-in-bits='64' id='type-id-1144'/>
    <!-- const std::_Rb_tree_node<std::pair<const void* const, const char*> > -->
    <qualified-type-def type-id='type-id-1145' const='yes' id='type-id-1146'/>
    <!-- const std::_Rb_tree_node<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1146' size-in-bits='64' id='type-id-1147'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- class std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='_Rb_tree&lt;HeapProfileTable::Bucket*, std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt;, std::_Select1st&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;, std::less&lt;HeapProfileTable::Bucket*&gt;, std::allocator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' hash='e8d7145d1154c8ca' id='type-id-1054'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false> -->
          <class-decl name='_Rb_tree_impl&lt;std::less&lt;HeapProfileTable::Bucket*&gt;, false&gt;' is-struct='yes' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' hash='65e8a0bcd9a25814' id='type-id-1098'>
            <!-- class std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1073'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::less<HeapProfileTable::Bucket*> std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-1079' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-638' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false> std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-1098' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_erase(std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1096' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1148'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE10_M_insert_EPKSt18_Rb_tree_node_baseSG_RKS7_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE10_M_insert_EPKSt18_Rb_tree_node_baseSG_RKS7_' hash='ead57661589fb2b9'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1096' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-640'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-640'/>
            <!-- parameter of type 'const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&' -->
            <parameter type-id='type-id-1090'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
            <return type-id='type-id-1064'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool> std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_insert_unique(const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&) -->
          <function-decl name='_M_insert_unique' mangled-name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE16_M_insert_uniqueERKS7_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1161' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE16_M_insert_uniqueERKS7_' hash='2f3c3d5b91a66b75'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1096' is-artificial='yes'/>
            <!-- parameter of type 'const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&' -->
            <parameter type-id='type-id-1090'/>
            <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool> -->
            <return type-id='type-id-1123'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&) -->
          <function-decl name='_M_insert_unique_' mangled-name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS7_ERKS7_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1206' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS7_ERKS7_' hash='2f3c3d5b91a66b75'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1096' is-artificial='yes'/>
            <!-- parameter of type 'struct std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >' -->
            <parameter type-id='type-id-1059'/>
            <!-- parameter of type 'const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&' -->
            <parameter type-id='type-id-1090'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
            <return type-id='type-id-1064'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' hash='b31619e539efe784' id='type-id-1073'>
        <!-- class __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1033'/>
      </class-decl>
      <!-- class std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
      <class-decl name='allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' visibility='default' hash='7537a660b9acbaa0' id='type-id-1149'/>
      <!-- class std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='allocator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' hash='dcca758beee7017b' id='type-id-1076'>
        <!-- class __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1036'/>
      </class-decl>
      <!-- class std::allocator<std::pair<const void* const, const char*> > -->
      <class-decl name='allocator&lt;std::pair&lt;const void* const, const char*&gt; &gt;' visibility='default' hash='e612fa0ac1ff4b4d' id='type-id-1150'/>
      <!-- class std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='map&lt;HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less&lt;HeapProfileTable::Bucket*&gt;, std::allocator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='87' column='1' hash='17716318d1dafb62' id='type-id-298'>
        <member-type access='private'>
          <!-- class std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::value_compare -->
          <class-decl name='value_compare' visibility='default' is-declaration-only='yes' id='type-id-1151'/>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-1054' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='128' column='1'/>
        </data-member>
      </class-decl>
      <!-- class std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > > -->
      <class-decl name='map&lt;const void*, const char*, std::less&lt;const void*&gt;, std::allocator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' visibility='default' hash='1e55f9a07929dadf' id='type-id-1152'/>
      <!-- struct std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='_Rb_tree_const_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='224' column='1' hash='98e854d52bd5450b' id='type-id-1059'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Const_Base_ptr std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-940' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='294' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='_Rb_tree_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='154' column='1' hash='a657abb5313a9065' id='type-id-1064'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-941' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='219' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='_Select1st&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='482' column='1' hash='6debf9574f998b8a' id='type-id-1069'>
        <!-- struct std::unary_function<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, HeapProfileTable::Bucket* const> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1153'/>
      </class-decl>
      <!-- struct std::__copy_move_backward<false, false, std::random_access_iterator_tag> -->
      <class-decl name='__copy_move_backward&lt;false, false, std::random_access_iterator_tag&gt;' is-struct='yes' visibility='default' hash='6414770cf1d271dc' id='type-id-1154'/>
      <!-- struct std::__equal<false> -->
      <class-decl name='__equal&lt;false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='796' column='1' hash='285ccbe28dc2eacd#2' id='type-id-1155'/>
      <!-- struct std::__iter_swap<true> -->
      <class-decl name='__iter_swap&lt;true&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='96' column='1' hash='b0c2c8b661796cde' id='type-id-1156'/>
      <!-- struct std::__miter_base<HeapProfileTable::Bucket**, false> -->
      <class-decl name='__miter_base&lt;HeapProfileTable::Bucket**, false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' hash='e6022e0e6d7b882e' id='type-id-1157'/>
      <!-- struct std::__miter_base<HeapProfileTable::Snapshot::Entry*, false> -->
      <class-decl name='__miter_base&lt;HeapProfileTable::Snapshot::Entry*, false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' hash='bf2dacbfe068da7c' id='type-id-1158'/>
      <!-- struct std::__miter_base<const void* const*, false> -->
      <class-decl name='__miter_base&lt;const void* const*, false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' hash='dc1693073cca2cd7#2' id='type-id-1159'/>
      <!-- struct std::__niter_base<HeapProfileTable::Bucket**, false> -->
      <class-decl name='__niter_base&lt;HeapProfileTable::Bucket**, false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' hash='7ee524779907db4c' id='type-id-1160'/>
      <!-- struct std::__niter_base<HeapProfileTable::Snapshot::Entry*, false> -->
      <class-decl name='__niter_base&lt;HeapProfileTable::Snapshot::Entry*, false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' hash='9d8195f4c31e050c' id='type-id-1161'/>
      <!-- struct std::__niter_base<const void* const*, false> -->
      <class-decl name='__niter_base&lt;const void* const*, false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' hash='0dc380cb256b4d75#2' id='type-id-1162'/>
      <!-- struct std::__niter_base<const void**, false> -->
      <class-decl name='__niter_base&lt;const void**, false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' hash='dc5ea742a29927d9#2' id='type-id-1163'/>
      <!-- struct std::binary_function<HeapProfileTable::Bucket*, HeapProfileTable::Bucket*, bool> -->
      <class-decl name='binary_function&lt;HeapProfileTable::Bucket*, HeapProfileTable::Bucket*, bool&gt;' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='113' column='1' hash='81ec772321515d63' id='type-id-1164'/>
      <!-- struct std::less<HeapProfileTable::Bucket*> -->
      <class-decl name='less&lt;HeapProfileTable::Bucket*&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='227' column='1' hash='364b2672fe5e036b' id='type-id-1079'>
        <!-- struct std::binary_function<HeapProfileTable::Bucket*, HeapProfileTable::Bucket*, bool> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1164'/>
      </class-decl>
      <!-- struct std::less<const void*> -->
      <class-decl name='less&lt;const void*&gt;' is-struct='yes' visibility='default' hash='7fe6bd61a8061df2' id='type-id-1165'/>
      <!-- struct std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> -->
      <class-decl name='pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt;' is-struct='yes' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='7fd5e3ac9d5591a4' id='type-id-1088'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- HeapProfileTable::AllocValue::Bucket* const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>::first -->
          <var-decl name='first' type-id='type-id-1023' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- HeapProfileTable::Snapshot::Entry std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>::second -->
          <var-decl name='second' type-id='type-id-295' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::pair<const void* const, const char*> -->
      <class-decl name='pair&lt;const void* const, const char*&gt;' is-struct='yes' visibility='default' hash='42f92a3358b809be' id='type-id-1092'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;, bool&gt;' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='8ad2d2814bcdc317' id='type-id-1123'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>::first -->
          <var-decl name='first' type-id='type-id-1064' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>::second -->
          <var-decl name='second' type-id='type-id-59' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::unary_function<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, HeapProfileTable::Bucket* const> -->
      <class-decl name='unary_function&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt;, HeapProfileTable::Bucket* const&gt;' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='101' column='1' hash='eaf39b2019fe6ca8' id='type-id-1153'/>
      <!-- class std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > > -->
      <class-decl name='_Rb_tree&lt;const void*, std::pair&lt;const void* const, const char*&gt;, std::_Select1st&lt;std::pair&lt;const void* const, const char*&gt; &gt;, std::less&lt;const void*&gt;, std::allocator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' hash='5c4761ca05b86ae0' id='type-id-1166'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false> -->
          <class-decl name='_Rb_tree_impl&lt;std::less&lt;const void*&gt;, false&gt;' is-struct='yes' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' hash='9435f4b5294749dd' id='type-id-1167'>
            <!-- class std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1168'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::less<const void*> std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-1169' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-638' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false> std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-1167' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<const void* const, const char*> > std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const std::pair<const void* const, const char*>&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_M_insert_EPKSt18_Rb_tree_node_baseSF_RKS6_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_M_insert_EPKSt18_Rb_tree_node_baseSF_RKS6_' hash='5e751e6425e8d243'>
            <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1170' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-640' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-640' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::pair<const void* const, const char*>&' -->
            <parameter type-id='type-id-1171' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<const void* const, const char*> > -->
            <return type-id='type-id-1172'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool> std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_M_insert_unique(const std::pair<const void* const, const char*>&) -->
          <function-decl name='_M_insert_unique' mangled-name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE16_M_insert_uniqueERKS6_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1161' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE16_M_insert_uniqueERKS6_' hash='d24583018f8fcb52'>
            <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1170' is-artificial='yes'/>
            <!-- parameter of type 'const std::pair<const void* const, const char*>&' -->
            <parameter type-id='type-id-1171' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1162' column='1'/>
            <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool> -->
            <return type-id='type-id-1173'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<const void* const, const char*> > std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >, const std::pair<const void* const, const char*>&) -->
          <function-decl name='_M_insert_unique_' mangled-name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS6_ERKS6_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1206' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS6_ERKS6_' hash='d24583018f8fcb52'>
            <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1170' is-artificial='yes'/>
            <!-- parameter of type 'struct std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >' -->
            <parameter type-id='type-id-1174'/>
            <!-- parameter of type 'const std::pair<const void* const, const char*>&' -->
            <parameter type-id='type-id-1171'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<const void* const, const char*> > -->
            <return type-id='type-id-1172'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_M_erase(std::_Rb_tree_node<std::pair<const void* const, const char*> >*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1170' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1175'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1176'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1177'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1178'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1179'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1180'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_iterator<std::pair<const void* const, const char*> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1181'/>
      <!-- struct std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> > -->
      <class-decl name='_Rb_tree_const_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='224' column='1' hash='13aef8d61a71abd0' id='type-id-1174'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Const_Base_ptr std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-940' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='294' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Rb_tree_iterator<std::pair<const void* const, const char*> > -->
      <class-decl name='_Rb_tree_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='154' column='1' hash='bd2b103ca42ea725' id='type-id-1172'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_iterator<std::pair<const void* const, const char*> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-941' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='219' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='_Rb_tree_node&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1141'/>
      <!-- struct std::_Rb_tree_node<std::pair<const void* const, const char*> > -->
      <class-decl name='_Rb_tree_node&lt;std::pair&lt;const void* const, const char*&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1145'/>
      <!-- struct std::_Rb_tree_node_base -->
      <class-decl name='_Rb_tree_node_base' is-struct='yes' visibility='default' hash='e54097027ff8955a' id='type-id-1182'/>
      <!-- struct std::allocator<char> -->
      <class-decl name='allocator&lt;char&gt;' is-struct='yes' visibility='default' hash='602cd5d7a257432a' id='type-id-1183'/>
      <!-- struct std::char_traits<char> -->
      <class-decl name='char_traits&lt;char&gt;' is-struct='yes' visibility='default' hash='458bc359e04e351a' id='type-id-1184'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;, std::_Rb_tree_const_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1185'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >, std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt;, std::_Rb_tree_const_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1186'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1187'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt;, bool&gt;' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='abaf3c99f768e524' id='type-id-1173'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_iterator<std::pair<const void* const, const char*> > std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool>::first -->
          <var-decl name='first' type-id='type-id-1172' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool>::second -->
          <var-decl name='second' type-id='type-id-59' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, std::_Rb_tree_iterator<std::pair<const void* const, const char*> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1188'/>
      <!-- void std::__heap_select<HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, bool (*)(HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)) -->
      <function-decl name='__heap_select&lt;HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' mangled-name='_ZSt13__heap_selectIPP17HeapProfileBucketPFbP16HeapProfileStatsS4_EEvT_S7_S7_T0_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='1913' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZSt13__heap_selectIPP17HeapProfileBucketPFbP16HeapProfileStatsS4_EEvT_S7_S7_T0_' hash='3344e304e03190a0'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-310'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-310'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-310'/>
        <!-- parameter of type 'bool (*)(HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)' -->
        <parameter type-id='type-id-1040'/>
        <!-- void -->
        <return type-id='type-id-58'/>
      </function-decl>
      <!-- void std::__insertion_sort<HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
      <function-decl name='__insertion_sort&lt;HeapProfileTable::Snapshot::Entry*&gt;' mangled-name='_ZSt16__insertion_sortIPN16HeapProfileTable8Snapshot5EntryEEvT_S4_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2096' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZSt16__insertion_sortIPN16HeapProfileTable8Snapshot5EntryEEvT_S4_' hash='3369eb388d66a785'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-1031'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-1031'/>
        <!-- void -->
        <return type-id='type-id-58'/>
      </function-decl>
      <!-- void std::__insertion_sort<HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, bool (*)(HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)) -->
      <function-decl name='__insertion_sort&lt;HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' mangled-name='_ZSt16__insertion_sortIPP17HeapProfileBucketPFbP16HeapProfileStatsS4_EEvT_S7_T0_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2119' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZSt16__insertion_sortIPP17HeapProfileBucketPFbP16HeapProfileStatsS4_EEvT_S7_T0_' hash='d87afed8dc3d0bb4'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-310'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-310'/>
        <!-- parameter of type 'bool (*)(HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)' -->
        <parameter type-id='type-id-1040'/>
        <!-- void -->
        <return type-id='type-id-58'/>
      </function-decl>
      <!-- void std::__introsort_loop<HeapProfileTable::Snapshot::Entry*, long int>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*, long int) -->
      <function-decl name='__introsort_loop&lt;HeapProfileTable::Snapshot::Entry*, long int&gt;' mangled-name='_ZSt16__introsort_loopIPN16HeapProfileTable8Snapshot5EntryElEvT_S4_T0_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2245' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZSt16__introsort_loopIPN16HeapProfileTable8Snapshot5EntryElEvT_S4_T0_' hash='fc39c3348ccc0ee2'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-1031'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-1031'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-179'/>
        <!-- void -->
        <return type-id='type-id-58'/>
      </function-decl>
      <!-- void std::__introsort_loop<HeapProfileTable::Bucket**, long int, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, long int, bool (*)(HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)) -->
      <function-decl name='__introsort_loop&lt;HeapProfileTable::Bucket**, long int, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' mangled-name='_ZSt16__introsort_loopIPP17HeapProfileBucketlPFbP16HeapProfileStatsS4_EEvT_S7_T0_T1_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2277' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZSt16__introsort_loopIPP17HeapProfileBucketlPFbP16HeapProfileStatsS4_EEvT_S7_T0_T1_' hash='e77725b812ead766'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-310'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-310'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-179'/>
        <!-- parameter of type 'bool (*)(HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)' -->
        <parameter type-id='type-id-1040'/>
        <!-- void -->
        <return type-id='type-id-58'/>
      </function-decl>
      <!-- void std::__adjust_heap<HeapProfileTable::Snapshot::Entry*, long int, HeapProfileTable::Snapshot::Entry>(HeapProfileTable::Snapshot::Entry*, long int, long int, HeapProfileTable::Snapshot::Entry) -->
      <function-decl name='__adjust_heap&lt;HeapProfileTable::Snapshot::Entry*, long int, HeapProfileTable::Snapshot::Entry&gt;' mangled-name='_ZSt13__adjust_heapIPN16HeapProfileTable8Snapshot5EntryElS2_EvT_T0_S5_T1_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_heap.h' line='224' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZSt13__adjust_heapIPN16HeapProfileTable8Snapshot5EntryElS2_EvT_T0_S5_T1_' hash='9af83247cd63062a'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-1031'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-179'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-179'/>
        <!-- parameter of type 'struct HeapProfileTable::Snapshot::Entry' -->
        <parameter type-id='type-id-295'/>
        <!-- void -->
        <return type-id='type-id-58'/>
      </function-decl>
      <!-- void std::__adjust_heap<HeapProfileTable::Bucket**, long int, HeapProfileTable::Bucket*, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, long int, long int, HeapProfileTable::AllocValue::Bucket*, bool (*)(HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)) -->
      <function-decl name='__adjust_heap&lt;HeapProfileTable::Bucket**, long int, HeapProfileTable::Bucket*, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' mangled-name='_ZSt13__adjust_heapIPP17HeapProfileBucketlS1_PFbP16HeapProfileStatsS4_EEvT_T0_S8_T1_T2_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_heap.h' line='295' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZSt13__adjust_heapIPP17HeapProfileBucketlS1_PFbP16HeapProfileStatsS4_EEvT_T0_S8_T1_T2_' hash='88fdc81aa2f20443'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-310'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-179'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-179'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket*' -->
        <parameter type-id='type-id-296'/>
        <!-- parameter of type 'bool (*)(HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)' -->
        <parameter type-id='type-id-1040'/>
        <!-- void -->
        <return type-id='type-id-58'/>
      </function-decl>
    </namespace-decl>
    <reference-type-def kind='lvalue' type-id='type-id-1141' size-in-bits='64' id='type-id-1189'/>
    <!-- std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1141' size-in-bits='64' id='type-id-1148'/>
    <!-- std::_Rb_tree_node<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1145' size-in-bits='64' id='type-id-1175'/>
    <!-- void* const -->
    <qualified-type-def type-id='type-id-56' const='yes' id='type-id-1190'/>
    <!-- namespace __gnu_cxx -->
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' hash='2383e829b8cbe40e' id='type-id-1033'/>
      <!-- class __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
      <class-decl name='new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' visibility='default' hash='04731a23b1e0a0d8' id='type-id-1191'/>
      <!-- class __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='new_allocator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' hash='231fea6017e35a9d' id='type-id-1036'/>
      <!-- class __gnu_cxx::new_allocator<std::pair<const void* const, const char*> > -->
      <class-decl name='new_allocator&lt;std::pair&lt;const void* const, const char*&gt; &gt;' visibility='default' hash='5d87c8d417189a7c' id='type-id-1192'/>
      <!-- class __gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > -->
      <class-decl name='__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1193'/>
      <!-- class __gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > -->
      <class-decl name='__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1194'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead'>
      <!-- int32 FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_heap_check_max_leaks -->
      <var-decl name='FLAGS_heap_check_max_leaks' type-id='type-id-81' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead26FLAGS_heap_check_max_leaksE' visibility='default' filepath='src/heap-profile-table.cc' line='87' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead26FLAGS_heap_check_max_leaksE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noheap_check_max_leaks -->
      <var-decl name='FLAGS_noheap_check_max_leaks' type-id='type-id-82' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead28FLAGS_noheap_check_max_leaksE' visibility='default' filepath='src/heap-profile-table.cc' line='89' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead28FLAGS_noheap_check_max_leaksE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead'>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_cleanup_old_heap_profiles -->
      <var-decl name='FLAGS_cleanup_old_heap_profiles' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_cleanup_old_heap_profilesE' visibility='default' filepath='src/heap-profile-table.cc' line='83' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_cleanup_old_heap_profilesE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nocleanup_old_heap_profiles -->
      <var-decl name='FLAGS_nocleanup_old_heap_profiles' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead33FLAGS_nocleanup_old_heap_profilesE' visibility='default' filepath='src/heap-profile-table.cc' line='85' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead33FLAGS_nocleanup_old_heap_profilesE'/>
    </namespace-decl>
    <!-- bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*) -->
    <function-type size-in-bits='64' hash='7828ec1e806b5c68' id='type-id-1039'>
      <!-- parameter of type 'HeapProfileTable::DumpArgs::Stats*' -->
      <parameter type-id='type-id-293'/>
      <!-- parameter of type 'HeapProfileTable::DumpArgs::Stats*' -->
      <parameter type-id='type-id-293'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- void (const HeapProfileBucket*, HeapProfileTable::BufferArgs*) -->
    <function-type size-in-bits='64' hash='6454f55060d76996' id='type-id-1126'>
      <!-- parameter of type 'const HeapProfileBucket*' -->
      <parameter type-id='type-id-1042'/>
      <!-- parameter of type 'HeapProfileTable::BufferArgs*' -->
      <parameter type-id='type-id-317'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::AddNonLiveArgs*) -->
    <function-type size-in-bits='64' hash='f36b47d22ae82aa9' id='type-id-1128'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
      <parameter type-id='type-id-300'/>
      <!-- parameter of type 'HeapProfileTable::AddNonLiveArgs*' -->
      <parameter type-id='type-id-320'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot*) -->
    <function-type size-in-bits='64' hash='e4fe7bb089a91809' id='type-id-1130'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
      <parameter type-id='type-id-300'/>
      <!-- parameter of type 'HeapProfileTable::Snapshot*' -->
      <parameter type-id='type-id-283'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot::ReportState*) -->
    <function-type size-in-bits='64' hash='d794cebc31bd91f7' id='type-id-1132'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
      <parameter type-id='type-id-300'/>
      <!-- parameter of type 'HeapProfileTable::Snapshot::ReportState*' -->
      <parameter type-id='type-id-301'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (void*, HeapProfileTable::AllocValue*, char*) -->
    <function-type size-in-bits='64' hash='c3d5e8d93c14b581' id='type-id-1134'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
      <parameter type-id='type-id-300'/>
      <!-- parameter of type 'char*' -->
      <parameter type-id='type-id-130'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (void*, HeapProfileTable::AllocValue*, const HeapProfileTable::DumpArgs&) -->
    <function-type size-in-bits='64' hash='54cc623966dbb6a1' id='type-id-1136'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
      <parameter type-id='type-id-300'/>
      <!-- parameter of type 'const HeapProfileTable::DumpArgs&' -->
      <parameter type-id='type-id-315'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- std::_Rb_tree_iterator<std::pair<const void* const, const char*> > (std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::*) (const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const std::pair<const void* const, const char*>&) -->
    <function-type method-class-id='type-id-1166' size-in-bits='64' hash='5e751e6425e8d243' id='type-id-1195'>
      <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >*' -->
      <parameter type-id='type-id-1170' is-artificial='yes'/>
      <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
      <parameter type-id='type-id-640' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
      <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
      <parameter type-id='type-id-640' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
      <!-- parameter of type 'const std::pair<const void* const, const char*>&' -->
      <parameter type-id='type-id-1171' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
      <!-- struct std::_Rb_tree_iterator<std::pair<const void* const, const char*> > -->
      <return type-id='type-id-1172'/>
    </function-type>
    <!-- std::_Rb_tree_iterator<std::pair<const void* const, const char*> > (std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::*) (std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >, const std::pair<const void* const, const char*>&) -->
    <function-type method-class-id='type-id-1166' size-in-bits='64' hash='d24583018f8fcb52' id='type-id-1196'>
      <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >*' -->
      <parameter type-id='type-id-1170' is-artificial='yes'/>
      <!-- parameter of type 'struct std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >' -->
      <parameter type-id='type-id-1174'/>
      <!-- parameter of type 'const std::pair<const void* const, const char*>&' -->
      <parameter type-id='type-id-1171'/>
      <!-- struct std::_Rb_tree_iterator<std::pair<const void* const, const char*> > -->
      <return type-id='type-id-1172'/>
    </function-type>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool> (std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::*) (const std::pair<const void* const, const char*>&) -->
    <function-type method-class-id='type-id-1166' size-in-bits='64' hash='d24583018f8fcb52' id='type-id-1197'>
      <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >*' -->
      <parameter type-id='type-id-1170' is-artificial='yes'/>
      <!-- parameter of type 'const std::pair<const void* const, const char*>&' -->
      <parameter type-id='type-id-1171' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1162' column='1'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool> -->
      <return type-id='type-id-1173'/>
    </function-type>
    <!-- void (std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::*) (std::_Rb_tree_node<std::pair<const void* const, const char*> >*) -->
    <function-type method-class-id='type-id-1166' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-1198'>
      <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >*' -->
      <parameter type-id='type-id-1170' is-artificial='yes'/>
      <!-- parameter of type 'std::_Rb_tree_node<std::pair<const void* const, const char*> >*' -->
      <parameter type-id='type-id-1175'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/heap-profiler.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- struct HeapProfileEndWriter -->
    <class-decl name='HeapProfileEndWriter' is-struct='yes' visibility='default' size-in-bits='8' filepath='src/heap-profiler.cc' line='593' column='1' hash='9438584c7cfb3cf3' id='type-id-1199'>
      <member-function access='public' destructor='yes'>
        <!-- HeapProfileEndWriter::~HeapProfileEndWriter() -->
        <function-decl name='~HeapProfileEndWriter' mangled-name='_ZN20HeapProfileEndWriterD1Ev' filepath='src/heap-profiler.cc' line='594' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN20HeapProfileEndWriterD1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'HeapProfileEndWriter*' -->
          <parameter type-id='type-id-1200' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- HeapProfileEndWriter* -->
    <pointer-type-def type-id='type-id-1199' size-in-bits='64' hash='811a5cce6b31fdf0' id='type-id-1200'/>
    <!-- HeapProfileEndWriter* const -->
    <qualified-type-def type-id='type-id-1200' const='yes' hash='b0df6300572170e9' id='type-id-1201'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead'>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_allocation_interval -->
      <var-decl name='FLAGS_heap_profile_allocation_interval' type-id='type-id-105' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead38FLAGS_heap_profile_allocation_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='95' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead38FLAGS_heap_profile_allocation_intervalE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_allocation_interval -->
      <var-decl name='FLAGS_noheap_profile_allocation_interval' type-id='type-id-82' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead40FLAGS_noheap_profile_allocation_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='99' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead40FLAGS_noheap_profile_allocation_intervalE'/>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_deallocation_interval -->
      <var-decl name='FLAGS_heap_profile_deallocation_interval' type-id='type-id-105' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead40FLAGS_heap_profile_deallocation_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='100' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead40FLAGS_heap_profile_deallocation_intervalE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_deallocation_interval -->
      <var-decl name='FLAGS_noheap_profile_deallocation_interval' type-id='type-id-82' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead42FLAGS_noheap_profile_deallocation_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='104' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead42FLAGS_noheap_profile_deallocation_intervalE'/>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_inuse_interval -->
      <var-decl name='FLAGS_heap_profile_inuse_interval' type-id='type-id-105' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead33FLAGS_heap_profile_inuse_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='107' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead33FLAGS_heap_profile_inuse_intervalE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_inuse_interval -->
      <var-decl name='FLAGS_noheap_profile_inuse_interval' type-id='type-id-82' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead35FLAGS_noheap_profile_inuse_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='111' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead35FLAGS_noheap_profile_inuse_intervalE'/>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_time_interval -->
      <var-decl name='FLAGS_heap_profile_time_interval' type-id='type-id-105' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead32FLAGS_heap_profile_time_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='112' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead32FLAGS_heap_profile_time_intervalE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_time_interval -->
      <var-decl name='FLAGS_noheap_profile_time_interval' type-id='type-id-82' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead34FLAGS_noheap_profile_time_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='115' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead34FLAGS_noheap_profile_time_intervalE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead'>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_mmap_log -->
      <var-decl name='FLAGS_mmap_log' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead14FLAGS_mmap_logE' visibility='default' filepath='src/heap-profiler.cc' line='116' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead14FLAGS_mmap_logE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nommap_log -->
      <var-decl name='FLAGS_nommap_log' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead16FLAGS_nommap_logE' visibility='default' filepath='src/heap-profiler.cc' line='118' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead16FLAGS_nommap_logE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_mmap_profile -->
      <var-decl name='FLAGS_mmap_profile' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead18FLAGS_mmap_profileE' visibility='default' filepath='src/heap-profiler.cc' line='119' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead18FLAGS_mmap_profileE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nommap_profile -->
      <var-decl name='FLAGS_nommap_profile' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead20FLAGS_nommap_profileE' visibility='default' filepath='src/heap-profiler.cc' line='121' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead20FLAGS_nommap_profileE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_only_mmap_profile -->
      <var-decl name='FLAGS_only_mmap_profile' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead23FLAGS_only_mmap_profileE' visibility='default' filepath='src/heap-profiler.cc' line='122' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead23FLAGS_only_mmap_profileE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noonly_mmap_profile -->
      <var-decl name='FLAGS_noonly_mmap_profile' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead25FLAGS_noonly_mmap_profileE' visibility='default' filepath='src/heap-profiler.cc' line='125' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead25FLAGS_noonly_mmap_profileE'/>
    </namespace-decl>
    <!-- char* GetHeapProfile() -->
    <function-decl name='GetHeapProfile' mangled-name='GetHeapProfile' filepath='src/heap-profiler.cc' line='210' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='GetHeapProfile' hash='02a096d257a5e00d'>
      <!-- char* -->
      <return type-id='type-id-130'/>
    </function-decl>
    <!-- void HeapProfilerStart(const char*) -->
    <function-decl name='HeapProfilerStart' mangled-name='HeapProfilerStart' filepath='src/heap-profiler.cc' line='421' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='HeapProfilerStart' hash='53885bde0aa65efe'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60' filepath='src/heap-profiler.cc' line='533' column='1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- int IsHeapProfilerRunning() -->
    <function-decl name='IsHeapProfilerRunning' mangled-name='IsHeapProfilerRunning' filepath='src/heap-profiler.cc' line='487' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='IsHeapProfilerRunning' hash='388da3fa973fde78'>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void HeapProfilerStop() -->
    <function-decl name='HeapProfilerStop' mangled-name='HeapProfilerStop' filepath='src/heap-profiler.cc' line='492' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='HeapProfilerStop' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void HeapProfilerDump(const char*) -->
    <function-decl name='HeapProfilerDump' mangled-name='HeapProfilerDump' filepath='src/heap-profiler.cc' line='533' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='HeapProfilerDump' hash='53885bde0aa65efe'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60' filepath='src/heap-profiler.cc' line='533' column='1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/internal_logging.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- char[200] -->
    <array-type-def dimensions='1' type-id='type-id-82' size-in-bits='1600' hash='1f6c80cad2774359' id='type-id-1202'>
      <!-- <anonymous range>[200] -->
      <subrange length='200' lower-bound='0' upper-bound='199' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='c1708a8d000243c1' id='type-id-1203'/>
    </array-type-def>
    <!-- const tcmalloc::LogItem -->
    <qualified-type-def type-id='type-id-1204' const='yes' hash='193926108e650587' id='type-id-1205'/>
    <!-- const tcmalloc::LogItem& -->
    <reference-type-def kind='lvalue' type-id='type-id-1205' size-in-bits='64' hash='8825cabdbed53a82' id='type-id-1206'/>
    <!-- tcmalloc::Logger* -->
    <pointer-type-def type-id='type-id-1207' size-in-bits='64' hash='ba341d282dd4c190' id='type-id-1208'/>
    <!-- tcmalloc::Logger* const -->
    <qualified-type-def type-id='type-id-1208' const='yes' hash='4434ba402b358288' id='type-id-1209'/>
    <!-- void (*)(const char*, int) -->
    <pointer-type-def type-id='type-id-1210' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1211'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- class tcmalloc::Logger -->
      <class-decl name='Logger' visibility='default' size-in-bits='1728' filepath='src/internal_logging.cc' line='66' column='1' hash='bce9244cd4e13a40' id='type-id-1207'>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- char* tcmalloc::Logger::p_ -->
          <var-decl name='p_' type-id='type-id-130' visibility='default' filepath='src/internal_logging.cc' line='73' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- char* tcmalloc::Logger::end_ -->
          <var-decl name='end_' type-id='type-id-130' visibility='default' filepath='src/internal_logging.cc' line='74' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- char tcmalloc::Logger::buf_[200] -->
          <var-decl name='buf_' type-id='type-id-1202' visibility='default' filepath='src/internal_logging.cc' line='75' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- bool tcmalloc::Logger::AddStr(const char*, int) -->
          <function-decl name='AddStr' mangled-name='_ZN8tcmalloc6Logger6AddStrEPKci' filepath='src/internal_logging.cc' line='152' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc6Logger6AddStrEPKci' hash='310182b60d70758d'>
            <!-- implicit parameter of type 'tcmalloc::Logger*' -->
            <parameter type-id='type-id-1208' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-60'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::Logger::AddNum(uint64_t, int) -->
          <function-decl name='AddNum' mangled-name='_ZN8tcmalloc6Logger6AddNumEmi' filepath='src/internal_logging.cc' line='162' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc6Logger6AddNumEmi' hash='702ba70b5f835388'>
            <!-- implicit parameter of type 'tcmalloc::Logger*' -->
            <parameter type-id='type-id-1208' is-artificial='yes'/>
            <!-- parameter of type 'typedef uint64_t' -->
            <parameter type-id='type-id-16'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::Logger::Add(const tcmalloc::LogItem&) -->
          <function-decl name='Add' mangled-name='_ZN8tcmalloc6Logger3AddERKNS_7LogItemE' filepath='src/internal_logging.cc' line='123' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc6Logger3AddERKNS_7LogItemE' hash='6f98c1be0f50d7e3'>
            <!-- implicit parameter of type 'tcmalloc::Logger*' -->
            <parameter type-id='type-id-1208' is-artificial='yes'/>
            <!-- parameter of type 'const tcmalloc::LogItem&' -->
            <parameter type-id='type-id-1206'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- void (* tcmalloc::log_message_writer)(const char*, int) -->
      <var-decl name='log_message_writer' type-id='type-id-1211' mangled-name='_ZN8tcmalloc18log_message_writerE' visibility='default' filepath='src/internal_logging.cc' line='63' column='1' elf-symbol-id='_ZN8tcmalloc18log_message_writerE'/>
      <!-- void tcmalloc::Log(tcmalloc::LogMode, const char*, int, tcmalloc::LogItem, tcmalloc::LogItem, tcmalloc::LogItem, tcmalloc::LogItem) -->
      <function-decl name='Log' mangled-name='_ZN8tcmalloc3LogENS_7LogModeEPKciNS_7LogItemES3_S3_S3_' filepath='src/internal_logging.cc' line='78' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc3LogENS_7LogModeEPKciNS_7LogItemES3_S3_S3_' hash='45211de6d4926020'>
        <!-- parameter of type 'enum tcmalloc::LogMode' -->
        <parameter type-id='type-id-1212'/>
        <!-- parameter of type 'const char*' -->
        <parameter type-id='type-id-60'/>
        <!-- parameter of type 'int' -->
        <parameter type-id='type-id-1'/>
        <!-- parameter of type 'class tcmalloc::LogItem' -->
        <parameter type-id='type-id-1204'/>
        <!-- parameter of type 'class tcmalloc::LogItem' -->
        <parameter type-id='type-id-1204'/>
        <!-- parameter of type 'class tcmalloc::LogItem' -->
        <parameter type-id='type-id-1204'/>
        <!-- parameter of type 'class tcmalloc::LogItem' -->
        <parameter type-id='type-id-1204'/>
        <!-- void -->
        <return type-id='type-id-58'/>
      </function-decl>
      <!-- enum tcmalloc::LogMode -->
      <enum-decl name='LogMode' size-in-bits='32' alignment-in-bits='32' filepath='src/internal_logging.h' line='61' column='1' hash='ab60bd6a1ae73930' id='type-id-1212'>
        <underlying-type type-id='type-id-93'/>
        <enumerator name='kLog' value='0'/>
        <enumerator name='kCrash' value='1'/>
        <enumerator name='kCrashWithStats' value='2'/>
      </enum-decl>
    </namespace-decl>
    <!-- void (const char*, int) -->
    <function-type size-in-bits='64' hash='7cffa03161e7e042' id='type-id-1210'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/malloc_extension.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- class MallocExtension -->
    <class-decl name='MallocExtension' visibility='default' size-in-bits='64' filepath='src/gperftools/malloc_extension.h' line='90' column='1' hash='39d956fd1c90f113' id='type-id-1213'>
      <member-type access='private'>
        <!-- struct MallocExtension::FreeListInfo -->
        <class-decl name='FreeListInfo' is-struct='yes' visibility='default' size-in-bits='256' filepath='src/gperftools/malloc_extension.h' line='333' column='1' hash='52481bf028532a29' id='type-id-1214'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- size_t MallocExtension::FreeListInfo::min_object_size -->
            <var-decl name='min_object_size' type-id='type-id-61' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='334' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- size_t MallocExtension::FreeListInfo::max_object_size -->
            <var-decl name='max_object_size' type-id='type-id-61' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='335' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='128'>
            <!-- size_t MallocExtension::FreeListInfo::total_bytes_free -->
            <var-decl name='total_bytes_free' type-id='type-id-61' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='336' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='192'>
            <!-- const char* MallocExtension::FreeListInfo::type -->
            <var-decl name='type' type-id='type-id-60' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='337' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- typedef void (void*, const base::MallocRange*) MallocExtension::RangeFunction -->
        <typedef-decl name='RangeFunction' type-id='type-id-1216' size-in-bits='64' filepath='src/gperftools/malloc_extension.h' line='143' column='1' id='type-id-1215'/>
      </member-type>
      <member-function access='private' static='yes'>
        <!-- MallocExtension* MallocExtension::instance() -->
        <function-decl name='instance' mangled-name='_ZN15MallocExtension8instanceEv' filepath='src/malloc_extension.cc' line='212' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension8instanceEv' hash='9345d4b3a5a2dc43'>
          <!-- MallocExtension* -->
          <return type-id='type-id-1217'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocExtension::Register() -->
        <function-decl name='Register' mangled-name='_ZN15MallocExtension8RegisterEPS_' filepath='src/malloc_extension.cc' line='217' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension8RegisterEPS_' hash='9345d4b3a5a2dc43'>
          <!-- parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocExtension::Initialize() -->
        <function-decl name='Initialize' mangled-name='_ZN15MallocExtension10InitializeEv' filepath='src/malloc_extension.cc' line='79' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension10InitializeEv' hash='7f32ffea222edbe7'>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes' vtable-offset='-1'>
        <!-- MallocExtension::~MallocExtension(int) -->
        <function-decl name='~MallocExtension' filepath='src/malloc_extension.cc' line='111' column='1' visibility='default' binding='global' size-in-bits='64' hash='388da3fa973fde78'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes' vtable-offset='-1'>
        <!-- MallocExtension::~MallocExtension() -->
        <function-decl name='~MallocExtension' mangled-name='_ZN15MallocExtensionD0Ev' filepath='src/malloc_extension.cc' line='111' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtensionD0Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes' vtable-offset='-1'>
        <!-- MallocExtension::~MallocExtension() -->
        <function-decl name='~MallocExtension' mangled-name='_ZN15MallocExtensionD1Ev' filepath='src/malloc_extension.cc' line='111' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtensionD1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='2'>
        <!-- bool MallocExtension::VerifyAllMemory() -->
        <function-decl name='VerifyAllMemory' mangled-name='_ZN15MallocExtension15VerifyAllMemoryEv' filepath='src/malloc_extension.cc' line='112' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension15VerifyAllMemoryEv' hash='c7c710e908194b91'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='3'>
        <!-- bool MallocExtension::VerifyNewMemory(void*) -->
        <function-decl name='VerifyNewMemory' mangled-name='_ZN15MallocExtension15VerifyNewMemoryEPKv' filepath='src/malloc_extension.cc' line='113' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension15VerifyNewMemoryEPKv' hash='c7c710e908194b91'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='4'>
        <!-- bool MallocExtension::VerifyArrayNewMemory(void*) -->
        <function-decl name='VerifyArrayNewMemory' mangled-name='_ZN15MallocExtension20VerifyArrayNewMemoryEPKv' filepath='src/malloc_extension.cc' line='114' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension20VerifyArrayNewMemoryEPKv' hash='c7c710e908194b91'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='5'>
        <!-- bool MallocExtension::VerifyMallocMemory(void*) -->
        <function-decl name='VerifyMallocMemory' mangled-name='_ZN15MallocExtension18VerifyMallocMemoryEPKv' filepath='src/malloc_extension.cc' line='115' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension18VerifyMallocMemoryEPKv' hash='c7c710e908194b91'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='6'>
        <!-- bool MallocExtension::MallocMemoryStats(int*, size_t*, int*) -->
        <function-decl name='MallocMemoryStats' mangled-name='_ZN15MallocExtension17MallocMemoryStatsEPiPmS0_' filepath='src/malloc_extension.cc' line='130' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension17MallocMemoryStatsEPiPmS0_' hash='c61585c77603b8aa'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'int*' -->
          <parameter type-id='type-id-1218'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-319'/>
          <!-- parameter of type 'int*' -->
          <parameter type-id='type-id-1218'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='7'>
        <!-- void MallocExtension::GetStats(char*, int) -->
        <function-decl name='GetStats' mangled-name='_ZN15MallocExtension8GetStatsEPci' filepath='src/malloc_extension.cc' line='125' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension8GetStatsEPci' hash='64137bddd2d8bd37'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'char*' -->
          <parameter type-id='type-id-130'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='8'>
        <!-- void MallocExtension::GetHeapSample(MallocExtensionWriter*) -->
        <function-decl name='GetHeapSample' mangled-name='_ZN15MallocExtension13GetHeapSampleEPSs' filepath='src/malloc_extension.cc' line='292' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension13GetHeapSampleEPSs' hash='d54783c3b9c5113e'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'MallocExtensionWriter*' -->
          <parameter type-id='type-id-1219'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='9'>
        <!-- void MallocExtension::GetHeapGrowthStacks(MallocExtensionWriter*) -->
        <function-decl name='GetHeapGrowthStacks' mangled-name='_ZN15MallocExtension19GetHeapGrowthStacksEPSs' filepath='src/malloc_extension.cc' line='316' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension19GetHeapGrowthStacksEPSs' hash='d54783c3b9c5113e'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'MallocExtensionWriter*' -->
          <parameter type-id='type-id-1219'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='10'>
        <!-- void MallocExtension::Ranges(void*, MallocExtension::RangeFunction*) -->
        <function-decl name='Ranges' mangled-name='_ZN15MallocExtension6RangesEPvPFvS0_PKN4base11MallocRangeEE' filepath='src/malloc_extension.cc' line='340' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension6RangesEPvPFvS0_PKN4base11MallocRangeEE' hash='5c5906b7a5222b20'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'MallocExtension::RangeFunction*' -->
          <parameter type-id='type-id-1220'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='11'>
        <!-- bool MallocExtension::GetNumericProperty(const char*, size_t*) -->
        <function-decl name='GetNumericProperty' mangled-name='_ZN15MallocExtension18GetNumericPropertyEPKcPm' filepath='src/malloc_extension.cc' line='117' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension18GetNumericPropertyEPKcPm' hash='288882c7124c4c14'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-319'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='12'>
        <!-- bool MallocExtension::SetNumericProperty(const char*, size_t) -->
        <function-decl name='SetNumericProperty' mangled-name='_ZN15MallocExtension18SetNumericPropertyEPKcm' filepath='src/malloc_extension.cc' line='121' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension18SetNumericPropertyEPKcm' hash='8c4988b107419e4d'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='13'>
        <!-- void MallocExtension::MarkThreadIdle() -->
        <function-decl name='MarkThreadIdle' mangled-name='_ZN15MallocExtension14MarkThreadIdleEv' filepath='src/malloc_extension.cc' line='146' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension14MarkThreadIdleEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='14'>
        <!-- void MallocExtension::MarkThreadBusy() -->
        <function-decl name='MarkThreadBusy' mangled-name='_ZN15MallocExtension14MarkThreadBusyEv' filepath='src/malloc_extension.cc' line='150' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension14MarkThreadBusyEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='15'>
        <!-- SysAllocator* MallocExtension::GetSystemAllocator() -->
        <function-decl name='GetSystemAllocator' mangled-name='_ZN15MallocExtension18GetSystemAllocatorEv' filepath='src/malloc_extension.cc' line='154' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension18GetSystemAllocatorEv' hash='727f10b9ad2848d9'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- SysAllocator* -->
          <return type-id='type-id-1221'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='16'>
        <!-- void MallocExtension::SetSystemAllocator(SysAllocator*) -->
        <function-decl name='SetSystemAllocator' mangled-name='_ZN15MallocExtension18SetSystemAllocatorEP12SysAllocator' filepath='src/malloc_extension.cc' line='158' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension18SetSystemAllocatorEP12SysAllocator' hash='727f10b9ad2848d9'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-1221'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='17'>
        <!-- void MallocExtension::ReleaseToSystem(size_t) -->
        <function-decl name='ReleaseToSystem' mangled-name='_ZN15MallocExtension15ReleaseToSystemEm' filepath='src/malloc_extension.cc' line='162' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension15ReleaseToSystemEm' hash='e0055d99adb0e173'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='18'>
        <!-- void MallocExtension::ReleaseFreeMemory() -->
        <function-decl name='ReleaseFreeMemory' mangled-name='_ZN15MallocExtension17ReleaseFreeMemoryEv' filepath='src/malloc_extension.cc' line='166' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension17ReleaseFreeMemoryEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='19'>
        <!-- void MallocExtension::SetMemoryReleaseRate(double) -->
        <function-decl name='SetMemoryReleaseRate' mangled-name='_ZN15MallocExtension20SetMemoryReleaseRateEd' filepath='src/malloc_extension.cc' line='170' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension20SetMemoryReleaseRateEd' hash='14e245f4052d89de'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'double' -->
          <parameter type-id='type-id-2'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='20'>
        <!-- double MallocExtension::GetMemoryReleaseRate() -->
        <function-decl name='GetMemoryReleaseRate' mangled-name='_ZN15MallocExtension20GetMemoryReleaseRateEv' filepath='src/malloc_extension.cc' line='174' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension20GetMemoryReleaseRateEv' hash='14e245f4052d89de'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- double -->
          <return type-id='type-id-2'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='21'>
        <!-- size_t MallocExtension::GetEstimatedAllocatedSize(size_t) -->
        <function-decl name='GetEstimatedAllocatedSize' mangled-name='_ZN15MallocExtension25GetEstimatedAllocatedSizeEm' filepath='src/malloc_extension.cc' line='178' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension25GetEstimatedAllocatedSizeEm' hash='91495cdf6321a116'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- typedef size_t -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='22'>
        <!-- size_t MallocExtension::GetAllocatedSize(void*) -->
        <function-decl name='GetAllocatedSize' mangled-name='_ZN15MallocExtension16GetAllocatedSizeEPKv' filepath='src/malloc_extension.cc' line='182' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension16GetAllocatedSizeEPKv' hash='e0055d99adb0e173'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- typedef size_t -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='23'>
        <!-- MallocExtension::Ownership MallocExtension::GetOwnership(void*) -->
        <function-decl name='GetOwnership' mangled-name='_ZN15MallocExtension12GetOwnershipEPKv' filepath='src/malloc_extension.cc' line='187' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension12GetOwnershipEPKv' hash='dcd29204c78d6e46'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- enum MallocExtension::Ownership -->
          <return type-id='type-id-1222'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='24'>
        <!-- void MallocExtension::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*) -->
        <function-decl name='GetFreeListSizes' mangled-name='_ZN15MallocExtension16GetFreeListSizesEPSt6vectorINS_12FreeListInfoESaIS1_EE' filepath='src/malloc_extension.cc' line='191' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension16GetFreeListSizesEPSt6vectorINS_12FreeListInfoESaIS1_EE' hash='1b5bd2975dcbb509'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
          <parameter type-id='type-id-1223'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='25'>
        <!-- void** MallocExtension::ReadStackTraces(int*) -->
        <function-decl name='ReadStackTraces' mangled-name='_ZN15MallocExtension15ReadStackTracesEPi' filepath='src/malloc_extension.cc' line='138' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension15ReadStackTracesEPi' hash='e3255c578f5fdd8b'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- parameter of type 'int*' -->
          <parameter type-id='type-id-1218'/>
          <!-- void** -->
          <return type-id='type-id-184'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='26'>
        <!-- void** MallocExtension::ReadHeapGrowthStackTraces() -->
        <function-decl name='ReadHeapGrowthStackTraces' mangled-name='_ZN15MallocExtension25ReadHeapGrowthStackTracesEv' filepath='src/malloc_extension.cc' line='142' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension25ReadHeapGrowthStackTracesEv' hash='33cabb503c62c709'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-1217' is-artificial='yes'/>
          <!-- void** -->
          <return type-id='type-id-184'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class SysAllocator -->
    <class-decl name='SysAllocator' visibility='default' size-in-bits='64' filepath='src/gperftools/malloc_extension.h' line='75' column='1' hash='ab9779cb633bb77f' id='type-id-1224'>
      <member-function access='private' destructor='yes' vtable-offset='-1'>
        <!-- SysAllocator::~SysAllocator(int) -->
        <function-decl name='~SysAllocator' filepath='src/malloc_extension.cc' line='108' column='1' visibility='default' binding='global' size-in-bits='64' hash='388da3fa973fde78'>
          <!-- implicit parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-1221' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes' vtable-offset='-1'>
        <!-- SysAllocator::~SysAllocator() -->
        <function-decl name='~SysAllocator' mangled-name='_ZN12SysAllocatorD0Ev' filepath='src/malloc_extension.cc' line='108' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN12SysAllocatorD0Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-1221' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes' vtable-offset='-1'>
        <!-- SysAllocator::~SysAllocator() -->
        <function-decl name='~SysAllocator' mangled-name='_ZN12SysAllocatorD1Ev' filepath='src/malloc_extension.cc' line='108' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN12SysAllocatorD1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-1221' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='2'>
        <!-- void* SysAllocator::Alloc(size_t, size_t*, size_t) -->
        <function-decl name='Alloc' mangled-name='_ZN12SysAllocator5AllocEmPmm' filepath='src/gperftools/malloc_extension.h' line='84' column='1' visibility='default' binding='global' size-in-bits='64' hash='dbc951d0957cd899'>
          <!-- implicit parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-1221' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-319'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void* -->
          <return type-id='type-id-56'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- enum MallocExtension_Ownership -->
    <enum-decl name='MallocExtension_Ownership' size-in-bits='32' alignment-in-bits='32' filepath='src/gperftools/malloc_extension_c.h' line='87' column='1' hash='a3fc401e36ea10ed' id='type-id-1225'>
      <underlying-type type-id='type-id-93'/>
      <enumerator name='MallocExtension_kUnknownOwnership' value='0'/>
      <enumerator name='MallocExtension_kOwned' value='1'/>
      <enumerator name='MallocExtension_kNotOwned' value='2'/>
    </enum-decl>
    <!-- MallocExtension* -->
    <pointer-type-def type-id='type-id-1213' size-in-bits='64' hash='7c4d26ffb05e5836' id='type-id-1217'/>
    <!-- MallocExtension* const -->
    <qualified-type-def type-id='type-id-1217' const='yes' hash='1ef8104fac46480b' id='type-id-1226'/>
    <!-- MallocExtension::RangeFunction* -->
    <pointer-type-def type-id='type-id-1215' size-in-bits='64' hash='042084ae234fbe8b' id='type-id-1220'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep* const -->
    <qualified-type-def type-id='type-id-681' const='yes' hash='e3a9df79e286d8c0' id='type-id-1227'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- class std::allocator<MallocExtension::FreeListInfo> -->
      <class-decl name='allocator&lt;MallocExtension::FreeListInfo&gt;' visibility='default' hash='bb8758906c5903e6' id='type-id-1228'/>
      <!-- class std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
      <class-decl name='vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt;' visibility='default' hash='6f9e798cee3c7d25' id='type-id-1229'>
        <member-function access='protected'>
          <!-- void std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_M_insert_aux(__gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >, const MallocExtension::FreeListInfo&) -->
          <function-decl name='_M_insert_aux' mangled-name='_ZNSt6vectorIN15MallocExtension12FreeListInfoESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='295' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt6vectorIN15MallocExtension12FreeListInfoESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_' hash='a2e220d37fc5ad6f'>
            <!-- implicit parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-1223' is-artificial='yes'/>
            <!-- parameter of type 'class __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >' -->
            <parameter type-id='type-id-1230' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
            <!-- parameter of type 'const MallocExtension::FreeListInfo&' -->
            <parameter type-id='type-id-1231' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
      <class-decl name='_Vector_base&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt;' is-struct='yes' visibility='default' hash='4f34fad3a8df4609' id='type-id-1232'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;MallocExtension::FreeListInfo*, std::vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1233'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1234'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<const MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;const MallocExtension::FreeListInfo*, std::vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1235'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1236'/>
    </namespace-decl>
    <!-- namespace __gnu_cxx -->
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > > -->
      <class-decl name='__normal_iterator&lt;MallocExtension::FreeListInfo*, std::vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt; &gt;' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='669' column='1' hash='68dfb99441b63349' id='type-id-1230'>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- MallocExtension::FreeListInfo* __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >::_M_current -->
          <var-decl name='_M_current' type-id='type-id-1237' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='671' column='1'/>
        </data-member>
      </class-decl>
      <!-- class __gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > -->
      <class-decl name='__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1238'/>
      <!-- class __gnu_cxx::__normal_iterator<const MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > > -->
      <class-decl name='__normal_iterator&lt;const MallocExtension::FreeListInfo*, std::vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1239'/>
      <!-- class __gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > -->
      <class-decl name='__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1240'/>
    </namespace-decl>
    <!-- int MallocExtension_VerifyAllMemory() -->
    <function-decl name='MallocExtension_VerifyAllMemory' mangled-name='MallocExtension_VerifyAllMemory' filepath='src/malloc_extension.cc' line='351' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_VerifyAllMemory' hash='388da3fa973fde78'>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocExtension_VerifyNewMemory(void*) -->
    <function-decl name='MallocExtension_VerifyNewMemory' mangled-name='MallocExtension_VerifyNewMemory' filepath='src/malloc_extension.cc' line='352' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_VerifyNewMemory' hash='388da3fa973fde78'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/malloc_extension.cc' line='354' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocExtension_VerifyArrayNewMemory(void*) -->
    <function-decl name='MallocExtension_VerifyArrayNewMemory' mangled-name='MallocExtension_VerifyArrayNewMemory' filepath='src/malloc_extension.cc' line='353' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_VerifyArrayNewMemory' hash='388da3fa973fde78'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/malloc_extension.cc' line='354' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocExtension_VerifyMallocMemory(void*) -->
    <function-decl name='MallocExtension_VerifyMallocMemory' mangled-name='MallocExtension_VerifyMallocMemory' filepath='src/malloc_extension.cc' line='354' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_VerifyMallocMemory' hash='388da3fa973fde78'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/malloc_extension.cc' line='354' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocExtension_MallocMemoryStats(int*, size_t*, int*) -->
    <function-decl name='MallocExtension_MallocMemoryStats' mangled-name='MallocExtension_MallocMemoryStats' filepath='src/malloc_extension.cc' line='357' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_MallocMemoryStats' hash='f95eedce63bc5a62'>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-1218' filepath='src/malloc_extension.cc' line='355' column='1'/>
      <!-- parameter of type 'size_t*' -->
      <parameter type-id='type-id-319' filepath='src/malloc_extension.cc' line='355' column='1'/>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-1218' filepath='src/malloc_extension.cc' line='355' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void MallocExtension_GetStats(char*, int) -->
    <function-decl name='MallocExtension_GetStats' mangled-name='MallocExtension_GetStats' filepath='src/malloc_extension.cc' line='360' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_GetStats' hash='64137bddd2d8bd37'>
      <!-- parameter of type 'char*' -->
      <parameter type-id='type-id-130' filepath='src/malloc_extension.cc' line='359' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/malloc_extension.cc' line='359' column='1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- int MallocExtension_GetNumericProperty(const char*, size_t*) -->
    <function-decl name='MallocExtension_GetNumericProperty' mangled-name='MallocExtension_GetNumericProperty' filepath='src/malloc_extension.cc' line='362' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_GetNumericProperty' hash='71a86865f38f69c6'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60' filepath='src/malloc_extension.cc' line='361' column='1'/>
      <!-- parameter of type 'size_t*' -->
      <parameter type-id='type-id-319' filepath='src/malloc_extension.cc' line='361' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocExtension_SetNumericProperty(const char*, size_t) -->
    <function-decl name='MallocExtension_SetNumericProperty' mangled-name='MallocExtension_SetNumericProperty' filepath='src/malloc_extension.cc' line='364' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_SetNumericProperty' hash='e1f9b6b88b6e9119'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void MallocExtension_MarkThreadIdle() -->
    <function-decl name='MallocExtension_MarkThreadIdle' mangled-name='MallocExtension_MarkThreadIdle' filepath='src/malloc_extension.cc' line='366' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_MarkThreadIdle' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void MallocExtension_MarkThreadBusy() -->
    <function-decl name='MallocExtension_MarkThreadBusy' mangled-name='MallocExtension_MarkThreadBusy' filepath='src/malloc_extension.cc' line='367' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_MarkThreadBusy' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void MallocExtension_ReleaseFreeMemory() -->
    <function-decl name='MallocExtension_ReleaseFreeMemory' mangled-name='MallocExtension_ReleaseFreeMemory' filepath='src/malloc_extension.cc' line='368' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_ReleaseFreeMemory' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void MallocExtension_ReleaseToSystem(size_t) -->
    <function-decl name='MallocExtension_ReleaseToSystem' mangled-name='MallocExtension_ReleaseToSystem' filepath='src/malloc_extension.cc' line='369' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_ReleaseToSystem' hash='e0055d99adb0e173'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/malloc_extension.cc' line='369' column='1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- size_t MallocExtension_GetEstimatedAllocatedSize(size_t) -->
    <function-decl name='MallocExtension_GetEstimatedAllocatedSize' mangled-name='MallocExtension_GetEstimatedAllocatedSize' filepath='src/malloc_extension.cc' line='370' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_GetEstimatedAllocatedSize' hash='91495cdf6321a116'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/malloc_extension.cc' line='370' column='1'/>
      <!-- typedef size_t -->
      <return type-id='type-id-61'/>
    </function-decl>
    <!-- size_t MallocExtension_GetAllocatedSize(void*) -->
    <function-decl name='MallocExtension_GetAllocatedSize' mangled-name='MallocExtension_GetAllocatedSize' filepath='src/malloc_extension.cc' line='371' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_GetAllocatedSize' hash='e0055d99adb0e173'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/malloc_extension.cc' line='371' column='1'/>
      <!-- typedef size_t -->
      <return type-id='type-id-61'/>
    </function-decl>
    <!-- MallocExtension_Ownership MallocExtension_GetOwnership(void*) -->
    <function-decl name='MallocExtension_GetOwnership' mangled-name='MallocExtension_GetOwnership' filepath='src/malloc_extension.cc' line='375' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_GetOwnership' hash='abfe7e84843276a5'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/malloc_extension.cc' line='375' column='1'/>
      <!-- enum MallocExtension_Ownership -->
      <return type-id='type-id-1225'/>
    </function-decl>
    <!-- int (void*) -->
    <function-type size-in-bits='64' hash='388da3fa973fde78' id='type-id-1241'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/malloc_extension.cc' line='354' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- MallocExtension* (MallocExtension::*) (void) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='9345d4b3a5a2dc43' id='type-id-1242'>
      <!-- MallocExtension* -->
      <return type-id='type-id-1217'/>
    </function-type>
    <!-- MallocExtension::Ownership (MallocExtension::*) (void*) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='dcd29204c78d6e46' id='type-id-1243'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- enum MallocExtension::Ownership -->
      <return type-id='type-id-1222'/>
    </function-type>
    <!-- SysAllocator* (MallocExtension::*) () -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='727f10b9ad2848d9' id='type-id-1244'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- SysAllocator* -->
      <return type-id='type-id-1221'/>
    </function-type>
    <!-- bool (MallocExtension::*) () -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='c7c710e908194b91' id='type-id-1245'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- bool (MallocExtension::*) (const char*, size_t) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='8c4988b107419e4d' id='type-id-1246'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- bool (MallocExtension::*) (const char*, size_t*) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='288882c7124c4c14' id='type-id-1247'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- parameter of type 'size_t*' -->
      <parameter type-id='type-id-319'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- bool (MallocExtension::*) (int*, size_t*, int*) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='c61585c77603b8aa' id='type-id-1248'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-1218'/>
      <!-- parameter of type 'size_t*' -->
      <parameter type-id='type-id-319'/>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-1218'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- bool (MallocExtension::*) (void*) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='c7c710e908194b91' id='type-id-1249'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-type>
    <!-- double (MallocExtension::*) () -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='14e245f4052d89de' id='type-id-1250'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- double -->
      <return type-id='type-id-2'/>
    </function-type>
    <!-- size_t (MallocExtension::*) (size_t) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='91495cdf6321a116' id='type-id-1251'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- typedef size_t -->
      <return type-id='type-id-61'/>
    </function-type>
    <!-- size_t (MallocExtension::*) (void*) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='e0055d99adb0e173' id='type-id-1252'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- typedef size_t -->
      <return type-id='type-id-61'/>
    </function-type>
    <!-- void (MallocExtension::*) () -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-1253'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (MallocExtension::*) (MallocExtension*) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='9345d4b3a5a2dc43' id='type-id-1254'>
      <!-- parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (MallocExtension::*) (MallocExtensionWriter*) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='d54783c3b9c5113e' id='type-id-1255'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- parameter of type 'MallocExtensionWriter*' -->
      <parameter type-id='type-id-1219'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (MallocExtension::*) (SysAllocator*) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='727f10b9ad2848d9' id='type-id-1256'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- parameter of type 'SysAllocator*' -->
      <parameter type-id='type-id-1221'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (MallocExtension::*) (char*, int) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='64137bddd2d8bd37' id='type-id-1257'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- parameter of type 'char*' -->
      <parameter type-id='type-id-130'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (MallocExtension::*) (double) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='14e245f4052d89de' id='type-id-1258'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- parameter of type 'double' -->
      <parameter type-id='type-id-2'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (MallocExtension::*) (size_t) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='e0055d99adb0e173' id='type-id-1259'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (MallocExtension::*) (std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='1b5bd2975dcbb509' id='type-id-1260'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
      <parameter type-id='type-id-1223'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (MallocExtension::*) (void) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-1261'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (MallocExtension::*) (void*, MallocExtension::RangeFunction*) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='5c5906b7a5222b20' id='type-id-1262'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'MallocExtension::RangeFunction*' -->
      <parameter type-id='type-id-1220'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (SysAllocator::*) () -->
    <function-type method-class-id='type-id-1224' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-1263'>
      <!-- implicit parameter of type 'SysAllocator*' -->
      <parameter type-id='type-id-1221' is-artificial='yes'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::*) (__gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >, const MallocExtension::FreeListInfo&) -->
    <function-type method-class-id='type-id-1229' size-in-bits='64' hash='a2e220d37fc5ad6f' id='type-id-1264'>
      <!-- implicit parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
      <parameter type-id='type-id-1223' is-artificial='yes'/>
      <!-- parameter of type 'class __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >' -->
      <parameter type-id='type-id-1230' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
      <!-- parameter of type 'const MallocExtension::FreeListInfo&' -->
      <parameter type-id='type-id-1231' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void* (SysAllocator::*) (size_t, size_t*, size_t) -->
    <function-type method-class-id='type-id-1224' size-in-bits='64' hash='dbc951d0957cd899' id='type-id-1265'>
      <!-- implicit parameter of type 'SysAllocator*' -->
      <parameter type-id='type-id-1221' is-artificial='yes'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- parameter of type 'size_t*' -->
      <parameter type-id='type-id-319'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-type>
    <!-- void** (MallocExtension::*) () -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='33cabb503c62c709' id='type-id-1266'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- void** -->
      <return type-id='type-id-184'/>
    </function-type>
    <!-- void** (MallocExtension::*) (int*) -->
    <function-type method-class-id='type-id-1213' size-in-bits='64' hash='e3255c578f5fdd8b' id='type-id-1267'>
      <!-- implicit parameter of type 'MallocExtension*' -->
      <parameter type-id='type-id-1217' is-artificial='yes'/>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-1218'/>
      <!-- void** -->
      <return type-id='type-id-184'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/malloc_hook.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- typedef int (*)(void*, size_t, int, int, int, off_t, void**) MallocHook_MmapReplacement -->
    <typedef-decl name='MallocHook_MmapReplacement' type-id='type-id-1268' size-in-bits='64' filepath='./src/gperftools/malloc_hook_c.h' line='111' column='1' hash='fd7a63c0c6c822c4' id='type-id-1269'/>
    <!-- typedef void (*)(void*, void*, size_t, size_t, int, void*) MallocHook_MremapHook -->
    <typedef-decl name='MallocHook_MremapHook' type-id='type-id-1270' size-in-bits='64' filepath='./src/gperftools/malloc_hook_c.h' line='132' column='1' hash='fd7a63c0c6c822c4' id='type-id-1271'/>
    <!-- typedef void (*)(void*, size_t) MallocHook_MunmapHook -->
    <typedef-decl name='MallocHook_MunmapHook' type-id='type-id-97' size-in-bits='64' filepath='./src/gperftools/malloc_hook_c.h' line='115' column='1' hash='fd7a63c0c6c822c4' id='type-id-1272'/>
    <!-- typedef int (*)(void*, size_t, int*) MallocHook_MunmapReplacement -->
    <typedef-decl name='MallocHook_MunmapReplacement' type-id='type-id-1273' size-in-bits='64' filepath='./src/gperftools/malloc_hook_c.h' line='123' column='1' hash='fd7a63c0c6c822c4' id='type-id-1274'/>
    <!-- typedef void (*)(void*, size_t, int, int, int, off_t) MallocHook_PreMmapHook -->
    <typedef-decl name='MallocHook_PreMmapHook' type-id='type-id-1275' size-in-bits='64' filepath='./src/gperftools/malloc_hook_c.h' line='87' column='1' hash='fd7a63c0c6c822c4' id='type-id-1276'/>
    <!-- typedef void (*)(ptrdiff_t) MallocHook_PreSbrkHook -->
    <typedef-decl name='MallocHook_PreSbrkHook' type-id='type-id-1277' size-in-bits='64' filepath='./src/gperftools/malloc_hook_c.h' line='138' column='1' hash='fd7a63c0c6c822c4' id='type-id-1278'/>
    <!-- base::internal::HookList<int (*)(const void*, size_t, int*)>* -->
    <pointer-type-def type-id='type-id-1279' size-in-bits='64' hash='f0233ef2e91f1666' id='type-id-1280'/>
    <!-- base::internal::HookList<int (*)(const void*, size_t, int*)>* const -->
    <qualified-type-def type-id='type-id-1280' const='yes' hash='b6f27d4d3274a5d0' id='type-id-1281'/>
    <!-- base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)>* -->
    <pointer-type-def type-id='type-id-1282' size-in-bits='64' hash='7d62d4c1ea9ca814' id='type-id-1283'/>
    <!-- base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)>* const -->
    <qualified-type-def type-id='type-id-1283' const='yes' hash='69a2795929cead8a' id='type-id-1284'/>
    <!-- base::internal::HookList<void (*)(const void*)>* const -->
    <qualified-type-def type-id='type-id-1285' const='yes' hash='30404a5d4eefa259' id='type-id-1286'/>
    <!-- base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)>* const -->
    <qualified-type-def type-id='type-id-456' const='yes' hash='246e325bcd60b6c4' id='type-id-1287'/>
    <!-- base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)>* -->
    <pointer-type-def type-id='type-id-1288' size-in-bits='64' hash='b5419e71ed3e3bdf' id='type-id-1289'/>
    <!-- base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)>* const -->
    <qualified-type-def type-id='type-id-1289' const='yes' hash='a87f17ea8a82fcbd' id='type-id-1290'/>
    <!-- base::internal::HookList<void (*)(const void*, ptrdiff_t)>* const -->
    <qualified-type-def type-id='type-id-458' const='yes' hash='b3418d4cc66d486a' id='type-id-1291'/>
    <!-- base::internal::HookList<void (*)(const void*, size_t)>* const -->
    <qualified-type-def type-id='type-id-98' const='yes' hash='b3c61f03ab2008a4' id='type-id-1292'/>
    <!-- base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)>* -->
    <pointer-type-def type-id='type-id-1293' size-in-bits='64' hash='2321cc1f4a11441c' id='type-id-1294'/>
    <!-- base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)>* const -->
    <qualified-type-def type-id='type-id-1294' const='yes' hash='a9828eea3d46512b' id='type-id-1295'/>
    <!-- base::internal::HookList<void (*)(ptrdiff_t)>* -->
    <pointer-type-def type-id='type-id-1296' size-in-bits='64' hash='23d1929df13df4b2' id='type-id-1297'/>
    <!-- base::internal::HookList<void (*)(ptrdiff_t)>* const -->
    <qualified-type-def type-id='type-id-1297' const='yes' hash='4f3beb5c2eca7cfe' id='type-id-1298'/>
    <!-- const base::internal::HookList<int (*)(const void*, size_t, int*)> -->
    <qualified-type-def type-id='type-id-1279' const='yes' hash='1ab332433ffa3b99' id='type-id-1299'/>
    <!-- const base::internal::HookList<int (*)(const void*, size_t, int*)>* -->
    <pointer-type-def type-id='type-id-1299' size-in-bits='64' hash='d2d8a8388e86e4eb' id='type-id-1300'/>
    <!-- const base::internal::HookList<int (*)(const void*, size_t, int*)>* const -->
    <qualified-type-def type-id='type-id-1300' const='yes' hash='c683fde30b96b31f' id='type-id-1301'/>
    <!-- const base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)> -->
    <qualified-type-def type-id='type-id-1282' const='yes' hash='17323c3b80d5b37e' id='type-id-1302'/>
    <!-- const base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)>* -->
    <pointer-type-def type-id='type-id-1302' size-in-bits='64' hash='9db33b3f75d3ebc1' id='type-id-1303'/>
    <!-- const base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)>* const -->
    <qualified-type-def type-id='type-id-1303' const='yes' hash='6fbfbcb2d00aad56' id='type-id-1304'/>
    <!-- const base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)> -->
    <qualified-type-def type-id='type-id-1288' const='yes' hash='fa6dd3cc409c3c50' id='type-id-1305'/>
    <!-- const base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)>* -->
    <pointer-type-def type-id='type-id-1305' size-in-bits='64' hash='6a9e904720700cb6' id='type-id-1306'/>
    <!-- const base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)>* const -->
    <qualified-type-def type-id='type-id-1306' const='yes' hash='855565bdae8209e5' id='type-id-1307'/>
    <!-- const base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)> -->
    <qualified-type-def type-id='type-id-1293' const='yes' hash='43571f9057d185d7' id='type-id-1308'/>
    <!-- const base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)>* -->
    <pointer-type-def type-id='type-id-1308' size-in-bits='64' hash='eeef308df96b3878' id='type-id-1309'/>
    <!-- const base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)>* const -->
    <qualified-type-def type-id='type-id-1309' const='yes' hash='fe50b0dd55f5949d' id='type-id-1310'/>
    <!-- const base::internal::HookList<void (*)(ptrdiff_t)> -->
    <qualified-type-def type-id='type-id-1296' const='yes' hash='fecb1a984d4960f3' id='type-id-1311'/>
    <!-- const base::internal::HookList<void (*)(ptrdiff_t)>* -->
    <pointer-type-def type-id='type-id-1311' size-in-bits='64' hash='0765bae97d04d9b8' id='type-id-1312'/>
    <!-- const base::internal::HookList<void (*)(ptrdiff_t)>* const -->
    <qualified-type-def type-id='type-id-1312' const='yes' hash='2107379efe6bf77c' id='type-id-1313'/>
    <!-- int (*)(void*, size_t, int*) -->
    <pointer-type-def type-id='type-id-1314' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1273'/>
    <!-- int (*)(void*, size_t, int*)* -->
    <pointer-type-def type-id='type-id-1273' size-in-bits='64' hash='551ba7e18ed5752b' id='type-id-1315'/>
    <!-- int (*)(void*, size_t, int, int, int, off_t, void**) -->
    <pointer-type-def type-id='type-id-1316' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1268'/>
    <!-- int (*)(void*, size_t, int, int, int, off_t, void**)* -->
    <pointer-type-def type-id='type-id-1268' size-in-bits='64' hash='551ba7e18ed5752b' id='type-id-1317'/>
    <!-- void (*)(ptrdiff_t) -->
    <pointer-type-def type-id='type-id-1318' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1277'/>
    <!-- void (*)(ptrdiff_t)* -->
    <pointer-type-def type-id='type-id-1277' size-in-bits='64' hash='551ba7e18ed5752b' id='type-id-1319'/>
    <!-- void (*)(void*, size_t, int, int, int, off_t) -->
    <pointer-type-def type-id='type-id-1320' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1275'/>
    <!-- void (*)(void*, size_t, int, int, int, off_t)* -->
    <pointer-type-def type-id='type-id-1275' size-in-bits='64' hash='551ba7e18ed5752b' id='type-id-1321'/>
    <!-- void (*)(void*, void*, size_t, size_t, int, void*) -->
    <pointer-type-def type-id='type-id-1322' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1270'/>
    <!-- void (*)(void*, void*, size_t, size_t, int, void*)* -->
    <pointer-type-def type-id='type-id-1270' size-in-bits='64' hash='551ba7e18ed5752b' id='type-id-1323'/>
    <!-- volatile base::subtle::Atomic64* -->
    <pointer-type-def type-id='type-id-1324' size-in-bits='64' hash='819c7265fc0d470f' id='type-id-1325'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- struct std::__miter_base<void**, false> -->
      <class-decl name='__miter_base&lt;void**, false&gt;' is-struct='yes' visibility='default' hash='b4f82f9b977b31f0' id='type-id-1326'/>
      <!-- struct std::__niter_base<void**, false> -->
      <class-decl name='__niter_base&lt;void**, false&gt;' is-struct='yes' visibility='default' hash='fc8de7b39a2acfd6' id='type-id-1327'/>
    </namespace-decl>
    <!-- void* const -->
    <qualified-type-def type-id='type-id-56' const='yes' id='type-id-1328'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- namespace base::subtle -->
      <namespace-decl name='subtle'>
      </namespace-decl>
      <!-- namespace base::internal -->
      <namespace-decl name='internal'>
        <!-- struct base::internal::HookList<int (*)(const void*, size_t, int*)> -->
        <class-decl name='HookList&lt;int (*)(const void*, size_t, int*)&gt;' is-struct='yes' visibility='default' size-in-bits='576' filepath='src/malloc_hook-inl.h' line='59' column='1' hash='fd0dafb4cda878fc' id='type-id-1279'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<int (*)(const void*, size_t, int*)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-1329' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<int (*)(const void*, size_t, int*)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-1330' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
        <!-- struct base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)> -->
        <class-decl name='HookList&lt;int (*)(const void*, size_t, int, int, int, off_t, void**)&gt;' is-struct='yes' visibility='default' size-in-bits='576' filepath='src/malloc_hook-inl.h' line='59' column='1' hash='4accc53dac1784cd' id='type-id-1282'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-1329' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-1330' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
        <!-- struct base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)> -->
        <class-decl name='HookList&lt;void (*)(const void*, const void*, size_t, int, int, int, off_t)&gt;' is-struct='yes' visibility='default' hash='c0d54fbf77a4b8df' id='type-id-1331'/>
        <!-- struct base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)> -->
        <class-decl name='HookList&lt;void (*)(const void*, const void*, size_t, size_t, int, const void*)&gt;' is-struct='yes' visibility='default' size-in-bits='576' filepath='src/malloc_hook-inl.h' line='59' column='1' hash='12283c705af7146b' id='type-id-1288'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-1329' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-1330' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
        <!-- struct base::internal::HookList<void (*)(const void*, ptrdiff_t)> -->
        <class-decl name='HookList&lt;void (*)(const void*, ptrdiff_t)&gt;' is-struct='yes' visibility='default' hash='6c9b4ffb1bae0231' id='type-id-1332'/>
        <!-- struct base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)> -->
        <class-decl name='HookList&lt;void (*)(const void*, size_t, int, int, int, off_t)&gt;' is-struct='yes' visibility='default' size-in-bits='576' filepath='src/malloc_hook-inl.h' line='59' column='1' hash='5891cbb178255f3d' id='type-id-1293'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-1329' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-1330' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
        <!-- struct base::internal::HookList<void (*)(ptrdiff_t)> -->
        <class-decl name='HookList&lt;void (*)(ptrdiff_t)&gt;' is-struct='yes' visibility='default' size-in-bits='576' filepath='src/malloc_hook-inl.h' line='59' column='1' hash='ef40381ae02bf18e' id='type-id-1296'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(ptrdiff_t)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-1329' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(ptrdiff_t)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-1330' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- int MallocHook_AddNewHook(MallocHook_NewHook) -->
    <function-decl name='MallocHook_AddNewHook' mangled-name='MallocHook_AddNewHook' filepath='src/malloc_hook.cc' line='296' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddNewHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_NewHook' -->
      <parameter type-id='type-id-374' filepath='src/malloc_hook.cc' line='302' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemoveNewHook(MallocHook_NewHook) -->
    <function-decl name='MallocHook_RemoveNewHook' mangled-name='MallocHook_RemoveNewHook' filepath='src/malloc_hook.cc' line='302' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveNewHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_NewHook' -->
      <parameter type-id='type-id-374' filepath='src/malloc_hook.cc' line='302' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_AddDeleteHook(MallocHook_DeleteHook) -->
    <function-decl name='MallocHook_AddDeleteHook' mangled-name='MallocHook_AddDeleteHook' filepath='src/malloc_hook.cc' line='308' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddDeleteHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_DeleteHook' -->
      <parameter type-id='type-id-371' filepath='src/malloc_hook.cc' line='314' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemoveDeleteHook(MallocHook_DeleteHook) -->
    <function-decl name='MallocHook_RemoveDeleteHook' mangled-name='MallocHook_RemoveDeleteHook' filepath='src/malloc_hook.cc' line='314' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveDeleteHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_DeleteHook' -->
      <parameter type-id='type-id-371' filepath='src/malloc_hook.cc' line='314' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_AddPreMmapHook(MallocHook_PreMmapHook) -->
    <function-decl name='MallocHook_AddPreMmapHook' mangled-name='MallocHook_AddPreMmapHook' filepath='src/malloc_hook.cc' line='320' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddPreMmapHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_PreMmapHook' -->
      <parameter type-id='type-id-1276' filepath='src/malloc_hook.cc' line='326' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemovePreMmapHook(MallocHook_PreMmapHook) -->
    <function-decl name='MallocHook_RemovePreMmapHook' mangled-name='MallocHook_RemovePreMmapHook' filepath='src/malloc_hook.cc' line='326' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemovePreMmapHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_PreMmapHook' -->
      <parameter type-id='type-id-1276' filepath='src/malloc_hook.cc' line='326' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_SetMmapReplacement(MallocHook_MmapReplacement) -->
    <function-decl name='MallocHook_SetMmapReplacement' mangled-name='MallocHook_SetMmapReplacement' filepath='src/malloc_hook.cc' line='332' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetMmapReplacement' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_MmapReplacement' -->
      <parameter type-id='type-id-1269' filepath='src/malloc_hook.cc' line='341' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemoveMmapReplacement(MallocHook_MmapReplacement) -->
    <function-decl name='MallocHook_RemoveMmapReplacement' mangled-name='MallocHook_RemoveMmapReplacement' filepath='src/malloc_hook.cc' line='341' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveMmapReplacement' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_MmapReplacement' -->
      <parameter type-id='type-id-1269' filepath='src/malloc_hook.cc' line='341' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_AddMmapHook(MallocHook_MmapHook) -->
    <function-decl name='MallocHook_AddMmapHook' mangled-name='MallocHook_AddMmapHook' filepath='src/malloc_hook.cc' line='347' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddMmapHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_MmapHook' -->
      <parameter type-id='type-id-373' filepath='src/malloc_hook.cc' line='353' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemoveMmapHook(MallocHook_MmapHook) -->
    <function-decl name='MallocHook_RemoveMmapHook' mangled-name='MallocHook_RemoveMmapHook' filepath='src/malloc_hook.cc' line='353' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveMmapHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_MmapHook' -->
      <parameter type-id='type-id-373' filepath='src/malloc_hook.cc' line='353' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_AddMunmapHook(MallocHook_MunmapHook) -->
    <function-decl name='MallocHook_AddMunmapHook' mangled-name='MallocHook_AddMunmapHook' filepath='src/malloc_hook.cc' line='359' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddMunmapHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_MunmapHook' -->
      <parameter type-id='type-id-1272' filepath='src/malloc_hook.cc' line='365' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemoveMunmapHook(MallocHook_MunmapHook) -->
    <function-decl name='MallocHook_RemoveMunmapHook' mangled-name='MallocHook_RemoveMunmapHook' filepath='src/malloc_hook.cc' line='365' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveMunmapHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_MunmapHook' -->
      <parameter type-id='type-id-1272' filepath='src/malloc_hook.cc' line='365' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_SetMunmapReplacement(MallocHook_MunmapReplacement) -->
    <function-decl name='MallocHook_SetMunmapReplacement' mangled-name='MallocHook_SetMunmapReplacement' filepath='src/malloc_hook.cc' line='371' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetMunmapReplacement' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_MunmapReplacement' -->
      <parameter type-id='type-id-1274' filepath='src/malloc_hook.cc' line='381' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemoveMunmapReplacement(MallocHook_MunmapReplacement) -->
    <function-decl name='MallocHook_RemoveMunmapReplacement' mangled-name='MallocHook_RemoveMunmapReplacement' filepath='src/malloc_hook.cc' line='381' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveMunmapReplacement' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_MunmapReplacement' -->
      <parameter type-id='type-id-1274' filepath='src/malloc_hook.cc' line='381' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_AddMremapHook(MallocHook_MremapHook) -->
    <function-decl name='MallocHook_AddMremapHook' mangled-name='MallocHook_AddMremapHook' filepath='src/malloc_hook.cc' line='387' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddMremapHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_MremapHook' -->
      <parameter type-id='type-id-1271' filepath='src/malloc_hook.cc' line='393' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemoveMremapHook(MallocHook_MremapHook) -->
    <function-decl name='MallocHook_RemoveMremapHook' mangled-name='MallocHook_RemoveMremapHook' filepath='src/malloc_hook.cc' line='393' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveMremapHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_MremapHook' -->
      <parameter type-id='type-id-1271' filepath='src/malloc_hook.cc' line='393' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_AddPreSbrkHook(MallocHook_PreSbrkHook) -->
    <function-decl name='MallocHook_AddPreSbrkHook' mangled-name='MallocHook_AddPreSbrkHook' filepath='src/malloc_hook.cc' line='399' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddPreSbrkHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_PreSbrkHook' -->
      <parameter type-id='type-id-1278' filepath='src/malloc_hook.cc' line='399' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemovePreSbrkHook(MallocHook_PreSbrkHook) -->
    <function-decl name='MallocHook_RemovePreSbrkHook' mangled-name='MallocHook_RemovePreSbrkHook' filepath='src/malloc_hook.cc' line='405' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemovePreSbrkHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_PreSbrkHook' -->
      <parameter type-id='type-id-1278' filepath='src/malloc_hook.cc' line='399' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_AddSbrkHook(MallocHook_SbrkHook) -->
    <function-decl name='MallocHook_AddSbrkHook' mangled-name='MallocHook_AddSbrkHook' filepath='src/malloc_hook.cc' line='411' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddSbrkHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_SbrkHook' -->
      <parameter type-id='type-id-376' filepath='src/malloc_hook.cc' line='417' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemoveSbrkHook(MallocHook_SbrkHook) -->
    <function-decl name='MallocHook_RemoveSbrkHook' mangled-name='MallocHook_RemoveSbrkHook' filepath='src/malloc_hook.cc' line='417' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveSbrkHook' hash='a7f99494147764a8'>
      <!-- parameter of type 'typedef MallocHook_SbrkHook' -->
      <parameter type-id='type-id-376' filepath='src/malloc_hook.cc' line='417' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- MallocHook_NewHook MallocHook_SetNewHook(MallocHook_NewHook) -->
    <function-decl name='MallocHook_SetNewHook' mangled-name='MallocHook_SetNewHook' filepath='src/malloc_hook.cc' line='424' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetNewHook' hash='e7946129631a25a2'>
      <!-- parameter of type 'typedef MallocHook_NewHook' -->
      <parameter type-id='type-id-374' filepath='src/malloc_hook.cc' line='424' column='1'/>
      <!-- typedef MallocHook_NewHook -->
      <return type-id='type-id-374'/>
    </function-decl>
    <!-- MallocHook_DeleteHook MallocHook_SetDeleteHook(MallocHook_DeleteHook) -->
    <function-decl name='MallocHook_SetDeleteHook' mangled-name='MallocHook_SetDeleteHook' filepath='src/malloc_hook.cc' line='430' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetDeleteHook' hash='e7946129631a25a2'>
      <!-- parameter of type 'typedef MallocHook_DeleteHook' -->
      <parameter type-id='type-id-371' filepath='src/malloc_hook.cc' line='430' column='1'/>
      <!-- typedef MallocHook_DeleteHook -->
      <return type-id='type-id-371'/>
    </function-decl>
    <!-- MallocHook_PreMmapHook MallocHook_SetPreMmapHook(MallocHook_PreMmapHook) -->
    <function-decl name='MallocHook_SetPreMmapHook' mangled-name='MallocHook_SetPreMmapHook' filepath='src/malloc_hook.cc' line='436' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetPreMmapHook' hash='e7946129631a25a2'>
      <!-- parameter of type 'typedef MallocHook_PreMmapHook' -->
      <parameter type-id='type-id-1276' filepath='src/malloc_hook.cc' line='436' column='1'/>
      <!-- typedef MallocHook_PreMmapHook -->
      <return type-id='type-id-1276'/>
    </function-decl>
    <!-- MallocHook_MmapHook MallocHook_SetMmapHook(MallocHook_MmapHook) -->
    <function-decl name='MallocHook_SetMmapHook' mangled-name='MallocHook_SetMmapHook' filepath='src/malloc_hook.cc' line='442' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetMmapHook' hash='e7946129631a25a2'>
      <!-- parameter of type 'typedef MallocHook_MmapHook' -->
      <parameter type-id='type-id-373' filepath='src/malloc_hook.cc' line='442' column='1'/>
      <!-- typedef MallocHook_MmapHook -->
      <return type-id='type-id-373'/>
    </function-decl>
    <!-- MallocHook_MunmapHook MallocHook_SetMunmapHook(MallocHook_MunmapHook) -->
    <function-decl name='MallocHook_SetMunmapHook' mangled-name='MallocHook_SetMunmapHook' filepath='src/malloc_hook.cc' line='448' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetMunmapHook' hash='e7946129631a25a2'>
      <!-- parameter of type 'typedef MallocHook_MunmapHook' -->
      <parameter type-id='type-id-1272' filepath='src/malloc_hook.cc' line='448' column='1'/>
      <!-- typedef MallocHook_MunmapHook -->
      <return type-id='type-id-1272'/>
    </function-decl>
    <!-- MallocHook_MremapHook MallocHook_SetMremapHook(MallocHook_MremapHook) -->
    <function-decl name='MallocHook_SetMremapHook' mangled-name='MallocHook_SetMremapHook' filepath='src/malloc_hook.cc' line='454' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetMremapHook' hash='e7946129631a25a2'>
      <!-- parameter of type 'typedef MallocHook_MremapHook' -->
      <parameter type-id='type-id-1271' filepath='src/malloc_hook.cc' line='454' column='1'/>
      <!-- typedef MallocHook_MremapHook -->
      <return type-id='type-id-1271'/>
    </function-decl>
    <!-- MallocHook_PreSbrkHook MallocHook_SetPreSbrkHook(MallocHook_PreSbrkHook) -->
    <function-decl name='MallocHook_SetPreSbrkHook' mangled-name='MallocHook_SetPreSbrkHook' filepath='src/malloc_hook.cc' line='460' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetPreSbrkHook' hash='e7946129631a25a2'>
      <!-- parameter of type 'typedef MallocHook_PreSbrkHook' -->
      <parameter type-id='type-id-1278' filepath='src/malloc_hook.cc' line='460' column='1'/>
      <!-- typedef MallocHook_PreSbrkHook -->
      <return type-id='type-id-1278'/>
    </function-decl>
    <!-- MallocHook_SbrkHook MallocHook_SetSbrkHook(MallocHook_SbrkHook) -->
    <function-decl name='MallocHook_SetSbrkHook' mangled-name='MallocHook_SetSbrkHook' filepath='src/malloc_hook.cc' line='466' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetSbrkHook' hash='e7946129631a25a2'>
      <!-- parameter of type 'typedef MallocHook_SbrkHook' -->
      <parameter type-id='type-id-376' filepath='src/malloc_hook.cc' line='466' column='1'/>
      <!-- typedef MallocHook_SbrkHook -->
      <return type-id='type-id-376'/>
    </function-decl>
    <!-- int MallocHook_GetCallerStackTrace(void**, int, int) -->
    <function-decl name='MallocHook_GetCallerStackTrace' mangled-name='MallocHook_GetCallerStackTrace' filepath='src/malloc_hook.cc' line='611' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_GetCallerStackTrace' hash='38e34a6ded264d64'>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-184' filepath='src/malloc_hook.cc' line='611' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/malloc_hook.cc' line='611' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/malloc_hook.cc' line='612' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void* mmap64(void*, size_t, int, int, int, __off64_t) -->
    <function-decl name='mmap64' mangled-name='mmap64' filepath='src/malloc_hook_mmap_linux.h' line='155' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='mmap64' hash='d89e6f5baae5273c'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/malloc_hook_mmap_linux.h' line='155' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/malloc_hook_mmap_linux.h' line='155' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/malloc_hook_mmap_linux.h' line='155' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/malloc_hook_mmap_linux.h' line='155' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/malloc_hook_mmap_linux.h' line='156' column='1'/>
      <!-- parameter of type 'typedef __off64_t' -->
      <parameter type-id='type-id-176' filepath='src/malloc_hook_mmap_linux.h' line='156' column='1'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- void* mmap(void*, size_t, int, int, int, off_t) -->
    <function-decl name='mmap' mangled-name='mmap' filepath='src/malloc_hook_mmap_linux.h' line='169' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='mmap' hash='d89e6f5baae5273c'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/malloc_hook_mmap_linux.h' line='169' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/malloc_hook_mmap_linux.h' line='169' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/malloc_hook_mmap_linux.h' line='169' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/malloc_hook_mmap_linux.h' line='169' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/malloc_hook_mmap_linux.h' line='170' column='1'/>
      <!-- parameter of type 'typedef off_t' -->
      <parameter type-id='type-id-345' filepath='src/malloc_hook_mmap_linux.h' line='170' column='1'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- int munmap(void*, size_t) -->
    <function-decl name='munmap' mangled-name='munmap' filepath='src/malloc_hook_mmap_linux.h' line='184' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='munmap' hash='b6a97d07f8261bc0'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/malloc_hook_mmap_linux.h' line='184' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/malloc_hook_mmap_linux.h' line='184' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void* mremap(void*, size_t, size_t, int, ...) -->
    <function-decl name='mremap' mangled-name='mremap' filepath='src/malloc_hook_mmap_linux.h' line='193' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='mremap' hash='d8f551d99ba6f26a'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/malloc_hook_mmap_linux.h' line='193' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/malloc_hook_mmap_linux.h' line='193' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/malloc_hook_mmap_linux.h' line='193' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/malloc_hook_mmap_linux.h' line='194' column='1'/>
      <parameter is-variadic='yes'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- void* sbrk(ptrdiff_t) -->
    <function-decl name='sbrk' mangled-name='sbrk' filepath='src/malloc_hook_mmap_linux.h' line='209' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='sbrk' hash='52c0efb08d2aa513'>
      <!-- parameter of type 'typedef ptrdiff_t' -->
      <parameter type-id='type-id-346' filepath='src/malloc_hook_mmap_linux.h' line='209' column='1'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- int (void*, size_t, int*) -->
    <function-type size-in-bits='64' hash='d921141d86be74b0' id='type-id-1314'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-1218'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- int (void*, size_t, int, int, int, off_t, void**) -->
    <function-type size-in-bits='64' hash='fab9155d77c31fb5' id='type-id-1316'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'typedef off_t' -->
      <parameter type-id='type-id-345'/>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-184'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- void (ptrdiff_t) -->
    <function-type size-in-bits='64' hash='52c0efb08d2aa513' id='type-id-1318'>
      <!-- parameter of type 'typedef ptrdiff_t' -->
      <parameter type-id='type-id-346'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (void*, size_t, int, int, int, off_t) -->
    <function-type size-in-bits='64' hash='d89e6f5baae5273c' id='type-id-1320'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'typedef off_t' -->
      <parameter type-id='type-id-345'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (void*, void*, size_t, size_t, int, void*) -->
    <function-type size-in-bits='64' hash='d8f551d99ba6f26a' id='type-id-1322'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/maybe_threads.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- pthread_key_t* -->
    <pointer-type-def type-id='type-id-1333' size-in-bits='64' hash='4a0ba5adb9c3ac10' id='type-id-1334'/>
    <!-- pthread_once_t* -->
    <pointer-type-def type-id='type-id-1335' size-in-bits='64' hash='a9d5a79abcefcfe6' id='type-id-1336'/>
    <!-- int perftools_pthread_key_create(pthread_key_t*, void (*)(void*)) -->
    <function-decl name='perftools_pthread_key_create' mangled-name='_Z28perftools_pthread_key_createPjPFvPvE' filepath='src/maybe_threads.cc' line='90' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z28perftools_pthread_key_createPjPFvPvE' hash='8d98229b80136b23'>
      <!-- parameter of type 'pthread_key_t*' -->
      <parameter type-id='type-id-1334' filepath='src/maybe_threads.cc' line='90' column='1'/>
      <!-- parameter of type 'void (*)(void*)' -->
      <parameter type-id='type-id-255' filepath='src/maybe_threads.cc' line='91' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int perftools_pthread_key_delete(pthread_key_t) -->
    <function-decl name='perftools_pthread_key_delete' mangled-name='_Z28perftools_pthread_key_deletej' filepath='src/maybe_threads.cc' line='101' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z28perftools_pthread_key_deletej' hash='6668baab5275d4c5'>
      <!-- parameter of type 'typedef pthread_key_t' -->
      <parameter type-id='type-id-1333' filepath='src/maybe_threads.cc' line='101' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void* perftools_pthread_getspecific(pthread_key_t) -->
    <function-decl name='perftools_pthread_getspecific' mangled-name='_Z29perftools_pthread_getspecificj' filepath='src/maybe_threads.cc' line='109' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z29perftools_pthread_getspecificj' hash='2bb88322482ae81c'>
      <!-- parameter of type 'typedef pthread_key_t' -->
      <parameter type-id='type-id-1333' filepath='src/maybe_threads.cc' line='109' column='1'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- int perftools_pthread_setspecific(pthread_key_t, void*) -->
    <function-decl name='perftools_pthread_setspecific' mangled-name='_Z29perftools_pthread_setspecificjPv' filepath='src/maybe_threads.cc' line='117' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z29perftools_pthread_setspecificjPv' hash='6668baab5275d4c5'>
      <!-- parameter of type 'typedef pthread_key_t' -->
      <parameter type-id='type-id-1333' filepath='src/maybe_threads.cc' line='117' column='1'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/maybe_threads.cc' line='117' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int perftools_pthread_once(pthread_once_t*, void (*)(void)) -->
    <function-decl name='perftools_pthread_once' mangled-name='_Z22perftools_pthread_oncePiPFvvE' filepath='src/maybe_threads.cc' line='128' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z22perftools_pthread_oncePiPFvvE' hash='022106852535817c'>
      <!-- parameter of type 'pthread_once_t*' -->
      <parameter type-id='type-id-1336' filepath='src/maybe_threads.cc' line='128' column='1'/>
      <!-- parameter of type 'void (*)(void)' -->
      <parameter type-id='type-id-261' filepath='src/maybe_threads.cc' line='129' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/memfs_malloc.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- class HugetlbSysAllocator -->
    <class-decl name='HugetlbSysAllocator' visibility='default' size-in-bits='384' filepath='src/memfs_malloc.cc' line='90' column='1' hash='2555e3fe72b73c20' id='type-id-1337'>
      <!-- class SysAllocator -->
      <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1224'/>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- bool HugetlbSysAllocator::failed_ -->
        <var-decl name='failed_' type-id='type-id-59' visibility='default' filepath='src/memfs_malloc.cc' line='103' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- int64 HugetlbSysAllocator::big_page_size_ -->
        <var-decl name='big_page_size_' type-id='type-id-105' visibility='default' filepath='src/memfs_malloc.cc' line='108' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='192'>
        <!-- int HugetlbSysAllocator::hugetlb_fd_ -->
        <var-decl name='hugetlb_fd_' type-id='type-id-1' visibility='default' filepath='src/memfs_malloc.cc' line='109' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='256'>
        <!-- off_t HugetlbSysAllocator::hugetlb_base_ -->
        <var-decl name='hugetlb_base_' type-id='type-id-345' visibility='default' filepath='src/memfs_malloc.cc' line='110' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='320'>
        <!-- SysAllocator* HugetlbSysAllocator::fallback_ -->
        <var-decl name='fallback_' type-id='type-id-1221' visibility='default' filepath='src/memfs_malloc.cc' line='112' column='1'/>
      </data-member>
      <member-function access='private'>
        <!-- bool HugetlbSysAllocator::Initialize() -->
        <function-decl name='Initialize' mangled-name='_ZN19HugetlbSysAllocator10InitializeEv' filepath='src/memfs_malloc.cc' line='218' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN19HugetlbSysAllocator10InitializeEv' hash='c7c710e908194b91'>
          <!-- implicit parameter of type 'HugetlbSysAllocator*' -->
          <parameter type-id='type-id-1338' is-artificial='yes'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void* HugetlbSysAllocator::AllocInternal(size_t, size_t*, size_t) -->
        <function-decl name='AllocInternal' mangled-name='_ZN19HugetlbSysAllocator13AllocInternalEmPmm' filepath='src/memfs_malloc.cc' line='152' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN19HugetlbSysAllocator13AllocInternalEmPmm' hash='dbc951d0957cd899'>
          <!-- implicit parameter of type 'HugetlbSysAllocator*' -->
          <parameter type-id='type-id-1338' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-319'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void* -->
          <return type-id='type-id-56'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='2'>
        <!-- void* HugetlbSysAllocator::Alloc(size_t, size_t*, size_t) -->
        <function-decl name='Alloc' mangled-name='_ZN19HugetlbSysAllocator5AllocEmPmm' filepath='src/memfs_malloc.cc' line='118' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN19HugetlbSysAllocator5AllocEmPmm' hash='dbc951d0957cd899'>
          <!-- implicit parameter of type 'HugetlbSysAllocator*' -->
          <parameter type-id='type-id-1338' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-319'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void* -->
          <return type-id='type-id-56'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef __off_t off_t -->
    <typedef-decl name='off_t' type-id='type-id-172' size-in-bits='64' filepath='/usr/include/stdio.h' line='91' column='1' hash='b119fe0931d2ee10' id='type-id-345'/>
    <!-- HugetlbSysAllocator* -->
    <pointer-type-def type-id='type-id-1337' size-in-bits='64' hash='d6b9f52b90cdaa1e' id='type-id-1338'/>
    <!-- HugetlbSysAllocator* const -->
    <qualified-type-def type-id='type-id-1338' const='yes' hash='684ab8856b023469' id='type-id-1339'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1340'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1341'/>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
    </namespace-decl>
    <!-- namespace __gnu_cxx -->
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > -->
      <class-decl name='__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1342'/>
      <!-- class __gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > -->
      <class-decl name='__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1343'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead'>
      <!-- std::string FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_memfs_malloc_path -->
      <var-decl name='FLAGS_memfs_malloc_path' type-id='type-id-999' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead23FLAGS_memfs_malloc_pathE' visibility='default' filepath='src/memfs_malloc.cc' line='70' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead23FLAGS_memfs_malloc_pathE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_nomemfs_malloc_path -->
      <var-decl name='FLAGS_nomemfs_malloc_path' type-id='type-id-82' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead25FLAGS_nomemfs_malloc_pathE' visibility='default' filepath='src/memfs_malloc.cc' line='73' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead25FLAGS_nomemfs_malloc_pathE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead'>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_memfs_malloc_limit_mb -->
      <var-decl name='FLAGS_memfs_malloc_limit_mb' type-id='type-id-105' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead27FLAGS_memfs_malloc_limit_mbE' visibility='default' filepath='src/memfs_malloc.cc' line='74' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead27FLAGS_memfs_malloc_limit_mbE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_nomemfs_malloc_limit_mb -->
      <var-decl name='FLAGS_nomemfs_malloc_limit_mb' type-id='type-id-82' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead29FLAGS_nomemfs_malloc_limit_mbE' visibility='default' filepath='src/memfs_malloc.cc' line='77' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead29FLAGS_nomemfs_malloc_limit_mbE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead'>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_memfs_malloc_abort_on_fail -->
      <var-decl name='FLAGS_memfs_malloc_abort_on_fail' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_memfs_malloc_abort_on_failE' visibility='default' filepath='src/memfs_malloc.cc' line='78' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_memfs_malloc_abort_on_failE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomemfs_malloc_abort_on_fail -->
      <var-decl name='FLAGS_nomemfs_malloc_abort_on_fail' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead34FLAGS_nomemfs_malloc_abort_on_failE' visibility='default' filepath='src/memfs_malloc.cc' line='81' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead34FLAGS_nomemfs_malloc_abort_on_failE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_memfs_malloc_ignore_mmap_fail -->
      <var-decl name='FLAGS_memfs_malloc_ignore_mmap_fail' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_memfs_malloc_ignore_mmap_failE' visibility='default' filepath='src/memfs_malloc.cc' line='82' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_memfs_malloc_ignore_mmap_failE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomemfs_malloc_ignore_mmap_fail -->
      <var-decl name='FLAGS_nomemfs_malloc_ignore_mmap_fail' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_nomemfs_malloc_ignore_mmap_failE' visibility='default' filepath='src/memfs_malloc.cc' line='84' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_nomemfs_malloc_ignore_mmap_failE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_memfs_malloc_map_private -->
      <var-decl name='FLAGS_memfs_malloc_map_private' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead30FLAGS_memfs_malloc_map_privateE' visibility='default' filepath='src/memfs_malloc.cc' line='85' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead30FLAGS_memfs_malloc_map_privateE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomemfs_malloc_map_private -->
      <var-decl name='FLAGS_nomemfs_malloc_map_private' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_nomemfs_malloc_map_privateE' visibility='default' filepath='src/memfs_malloc.cc' line='87' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_nomemfs_malloc_map_privateE'/>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/memory_region_map.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- HeapProfileBucket[20] -->
    <array-type-def dimensions='1' type-id='type-id-289' size-in-bits='8960' hash='dcf143e678dd421e' id='type-id-338'>
      <!-- <anonymous range>[20] -->
      <subrange length='20' lower-bound='0' upper-bound='19' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='1ca9e41140ea49be' id='type-id-1344'/>
    </array-type-def>
    <!-- class STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> -->
    <class-decl name='STL_Allocator&lt;MemoryRegionMap::Region, MemoryRegionMap::MyAllocator&gt;' visibility='default' size-in-bits='8' filepath='src/base/stl_allocator.h' line='60' column='1' hash='5ebc0ad32982d1ae' id='type-id-1345'/>
    <!-- class STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator> -->
    <class-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;MemoryRegionMap::Region&gt;, MemoryRegionMap::MyAllocator&gt;' visibility='default' size-in-bits='8' filepath='src/base/stl_allocator.h' line='60' column='1' hash='df58e8bbaff981b3' id='type-id-1346'/>
    <!-- void*[20][32] -->
    <array-type-def dimensions='2' type-id='type-id-56' hash='e99292a5e306aaf3' id='type-id-339'>
      <!-- <anonymous range>[20] -->
      <subrange length='20' lower-bound='0' upper-bound='19' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='1ca9e41140ea49be' id='type-id-1344'/>
      <!-- <anonymous range>[32] -->
      <subrange length='32' lower-bound='0' upper-bound='31' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='99f823ef025a9d75' id='type-id-381'/>
    </array-type-def>
    <!-- HeapProfileBucket** -->
    <pointer-type-def type-id='type-id-344' size-in-bits='64' hash='bd574bedefebaca8' id='type-id-337'/>
    <!-- MemoryRegionMap::Region& -->
    <reference-type-def kind='lvalue' type-id='type-id-327' size-in-bits='64' hash='75636873e4e4577c' id='type-id-1347'/>
    <!-- MemoryRegionMap::Region* const -->
    <qualified-type-def type-id='type-id-343' const='yes' hash='0fd2ac0b30cb5da2' id='type-id-1348'/>
    <!-- MemoryRegionMap::RegionSet* -->
    <pointer-type-def type-id='type-id-332' size-in-bits='64' hash='42e1e499ccbbea9a' id='type-id-335'/>
    <!-- STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>* -->
    <pointer-type-def type-id='type-id-1345' size-in-bits='64' hash='8f3f3d5d775bb136' id='type-id-1349'/>
    <!-- STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>* const -->
    <qualified-type-def type-id='type-id-1349' const='yes' hash='bd5057cbe3597488' id='type-id-1350'/>
    <!-- STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1346' size-in-bits='64' hash='5a6a3e9d31d951e9' id='type-id-1351'/>
    <!-- STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>* -->
    <pointer-type-def type-id='type-id-1346' size-in-bits='64' hash='6614ca74653cb8bd' id='type-id-1352'/>
    <!-- STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>* const -->
    <qualified-type-def type-id='type-id-1352' const='yes' hash='087af6fe77c34675' id='type-id-1353'/>
    <!-- const MemoryRegionMap::RegionCmp -->
    <qualified-type-def type-id='type-id-329' const='yes' hash='0af6e26c83e18b24' id='type-id-1354'/>
    <!-- const MemoryRegionMap::RegionCmp& -->
    <reference-type-def kind='lvalue' type-id='type-id-1354' size-in-bits='64' hash='982f7a038d144fdc' id='type-id-1355'/>
    <!-- const MemoryRegionMap::RegionCmp* -->
    <pointer-type-def type-id='type-id-1354' size-in-bits='64' hash='076918f9d855740a' id='type-id-1356'/>
    <!-- const MemoryRegionMap::RegionCmp* const -->
    <qualified-type-def type-id='type-id-1356' const='yes' hash='c1b0a88efbd503f6' id='type-id-1357'/>
    <!-- const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> -->
    <qualified-type-def type-id='type-id-1345' const='yes' hash='cb97b9014d0ab52e' id='type-id-1358'/>
    <!-- const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1358' size-in-bits='64' hash='d81d79c380ec8b90' id='type-id-1359'/>
    <!-- const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>* -->
    <pointer-type-def type-id='type-id-1358' size-in-bits='64' hash='6d1df531cdc45ddf' id='type-id-1360'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator> -->
    <qualified-type-def type-id='type-id-1346' const='yes' hash='8405af3d0055fad3' id='type-id-1361'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1361' size-in-bits='64' hash='88b6da356a52e59d' id='type-id-1362'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>* -->
    <pointer-type-def type-id='type-id-1361' size-in-bits='64' hash='7ff3976d8a764783' id='type-id-1363'/>
    <!-- const SpinLock* const -->
    <qualified-type-def type-id='type-id-1364' const='yes' hash='d2af974d90d602c5' id='type-id-1365'/>
    <!-- const std::_Identity<MemoryRegionMap::Region> -->
    <qualified-type-def type-id='type-id-1366' const='yes' hash='8a4996fc5662a2a0' id='type-id-1367'/>
    <!-- const std::_Identity<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-1367' size-in-bits='64' hash='33a511236264d18a' id='type-id-1368'/>
    <!-- const std::_Identity<MemoryRegionMap::Region>* const -->
    <qualified-type-def type-id='type-id-1368' const='yes' hash='aa6ca1fe4a6a5192' id='type-id-1369'/>
    <!-- const std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > -->
    <qualified-type-def type-id='type-id-1370' const='yes' hash='f710b043e13c7c9e' id='type-id-1371'/>
    <!-- const std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1371' size-in-bits='64' hash='a74aa54579c39cd8' id='type-id-1372'/>
    <!-- const std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* -->
    <pointer-type-def type-id='type-id-1371' size-in-bits='64' hash='5e74c96f81590b7b' id='type-id-1373'/>
    <!-- const std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* const -->
    <qualified-type-def type-id='type-id-1373' const='yes' hash='d9524337a9a8e252' id='type-id-1374'/>
    <!-- const std::_Rb_tree_iterator<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-616' size-in-bits='64' hash='ca22c106a184a516' id='type-id-1375'/>
    <!-- const std::_Rb_tree_iterator<MemoryRegionMap::Region>* const -->
    <qualified-type-def type-id='type-id-1375' const='yes' hash='e6a92b8f9aefab64' id='type-id-1376'/>
    <!-- const std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > -->
    <qualified-type-def type-id='type-id-333' const='yes' hash='5117ad253bdab3d1' id='type-id-1377'/>
    <!-- const std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1377' size-in-bits='64' hash='1343277e7ed78deb' id='type-id-1378'/>
    <!-- const std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* -->
    <pointer-type-def type-id='type-id-1377' size-in-bits='64' hash='12c1ca3cca27368b' id='type-id-1379'/>
    <!-- const std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* const -->
    <qualified-type-def type-id='type-id-1379' const='yes' hash='97a37a9d2510a853' id='type-id-1380'/>
    <!-- const volatile Atomic32 -->
    <qualified-type-def type-id='type-id-1381' const='yes' hash='0d8d5c2c11eb6a8d' id='type-id-1382'/>
    <!-- const volatile Atomic32* -->
    <pointer-type-def type-id='type-id-1382' size-in-bits='64' hash='94c85b2f76ff32c4' id='type-id-1383'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1370' size-in-bits='64' hash='0679ddf276aa2537' id='type-id-1384'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* -->
    <pointer-type-def type-id='type-id-1370' size-in-bits='64' hash='b61d01dba8b66f5d' id='type-id-1385'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* const -->
    <qualified-type-def type-id='type-id-1385' const='yes' hash='7da96d015b7df141' id='type-id-1386'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>* -->
    <pointer-type-def type-id='type-id-1387' size-in-bits='64' hash='b999209e339799ca' id='type-id-1388'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>* const -->
    <qualified-type-def type-id='type-id-1388' const='yes' hash='d577234bff86e606' id='type-id-1389'/>
    <!-- std::_Rb_tree_iterator<MemoryRegionMap::Region>& -->
    <reference-type-def kind='lvalue' type-id='type-id-615' size-in-bits='64' hash='ecc2e6f218a7f5b4' id='type-id-1390'/>
    <!-- std::_Rb_tree_iterator<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-615' size-in-bits='64' hash='23af71f96defcaf3' id='type-id-1391'/>
    <!-- std::_Rb_tree_iterator<MemoryRegionMap::Region>* const -->
    <qualified-type-def type-id='type-id-1391' const='yes' hash='b7040064a50be1a4' id='type-id-1392'/>
    <!-- std::pair<std::_Rb_tree_const_iterator<MemoryRegionMap::Region>, bool>* -->
    <pointer-type-def type-id='type-id-1393' size-in-bits='64' hash='14bcefd9e7c022ee' id='type-id-1394'/>
    <!-- std::pair<std::_Rb_tree_const_iterator<MemoryRegionMap::Region>, bool>* const -->
    <qualified-type-def type-id='type-id-1394' const='yes' hash='28df9f716c92635c' id='type-id-1395'/>
    <!-- std::pair<std::_Rb_tree_iterator<MemoryRegionMap::Region>, bool>* -->
    <pointer-type-def type-id='type-id-1396' size-in-bits='64' hash='c4cabafb4a4ad3e3' id='type-id-1397'/>
    <!-- std::pair<std::_Rb_tree_iterator<MemoryRegionMap::Region>, bool>* const -->
    <qualified-type-def type-id='type-id-1397' const='yes' hash='b50020eb9cd5484b' id='type-id-1398'/>
    <!-- std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-333' size-in-bits='64' hash='2ced2a15d32ee2ef' id='type-id-1399'/>
    <!-- std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* -->
    <pointer-type-def type-id='type-id-333' size-in-bits='64' hash='cab2086ff2b9cbae' id='type-id-1400'/>
    <!-- std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* const -->
    <qualified-type-def type-id='type-id-1400' const='yes' hash='38b0e991ac2275bf' id='type-id-1401'/>
    <!-- void (*)(const MemoryRegionMap::Region&) -->
    <pointer-type-def type-id='type-id-1402' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-340'/>
    <!-- const std::_Rb_tree_node<MemoryRegionMap::Region> -->
    <qualified-type-def type-id='type-id-1403' const='yes' id='type-id-1404'/>
    <reference-type-def kind='lvalue' type-id='type-id-1404' size-in-bits='64' id='type-id-1405'/>
    <!-- const std::_Rb_tree_node<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-1404' size-in-bits='64' id='type-id-1406'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- class std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > -->
      <class-decl name='_Rb_tree&lt;MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity&lt;MemoryRegionMap::Region&gt;, MemoryRegionMap::RegionCmp, STL_Allocator&lt;MemoryRegionMap::Region, MemoryRegionMap::MyAllocator&gt; &gt;' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' hash='7df48195cd14abe4' id='type-id-1370'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true> -->
          <class-decl name='_Rb_tree_impl&lt;MemoryRegionMap::RegionCmp, true&gt;' is-struct='yes' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' hash='3bfc0ba8e6884180' id='type-id-1387'>
            <!-- class STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1346'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- MemoryRegionMap::RegionCmp std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-329' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-638' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true> std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-1387' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_erase(std::_Rb_tree_node<MemoryRegionMap::Region>*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS1_E' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS1_E' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-1385' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<MemoryRegionMap::Region>*' -->
            <parameter type-id='type-id-1407'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<MemoryRegionMap::Region> std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const MemoryRegionMap::Region&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSB_RKS1_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSB_RKS1_' hash='f05a42d78d581a10'>
            <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-1385' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-640'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-640'/>
            <!-- parameter of type 'const MemoryRegionMap::Region&' -->
            <parameter type-id='type-id-341'/>
            <!-- struct std::_Rb_tree_iterator<MemoryRegionMap::Region> -->
            <return type-id='type-id-615'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > -->
      <class-decl name='set&lt;MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator&lt;MemoryRegionMap::Region, MemoryRegionMap::MyAllocator&gt; &gt;' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='88' column='1' hash='a6bc1240044865a0' id='type-id-333'>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-1370' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='112' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Identity<MemoryRegionMap::Region> -->
      <class-decl name='_Identity&lt;MemoryRegionMap::Region&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='469' column='1' hash='b4b07f87d472ca07' id='type-id-1366'>
        <!-- struct std::unary_function<MemoryRegionMap::Region, MemoryRegionMap::Region> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1408'/>
      </class-decl>
      <!-- struct std::__equal<false> -->
      <class-decl name='__equal&lt;false&gt;' is-struct='yes' visibility='default' hash='2bdeb6e406568b51' id='type-id-1409'/>
      <!-- struct std::__miter_base<const void* const*, false> -->
      <class-decl name='__miter_base&lt;const void* const*, false&gt;' is-struct='yes' visibility='default' hash='b2188938a28302bd' id='type-id-1410'/>
      <!-- struct std::__miter_base<const void**, false> -->
      <class-decl name='__miter_base&lt;const void**, false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' hash='7be328b7d3924b32' id='type-id-1411'/>
      <!-- struct std::__niter_base<const void* const*, false> -->
      <class-decl name='__niter_base&lt;const void* const*, false&gt;' is-struct='yes' visibility='default' hash='11b97743dcc00603' id='type-id-1412'/>
      <!-- struct std::__niter_base<const void**, false> -->
      <class-decl name='__niter_base&lt;const void**, false&gt;' is-struct='yes' visibility='default' hash='63d0705903ada212' id='type-id-1413'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<MemoryRegionMap::Region>, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;MemoryRegionMap::Region&gt;, bool&gt;' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='c67b7599812895f4' id='type-id-1393'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_const_iterator<MemoryRegionMap::Region> std::pair<std::_Rb_tree_const_iterator<MemoryRegionMap::Region>, bool>::first -->
          <var-decl name='first' type-id='type-id-331' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_const_iterator<MemoryRegionMap::Region>, bool>::second -->
          <var-decl name='second' type-id='type-id-59' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::pair<std::_Rb_tree_iterator<MemoryRegionMap::Region>, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;MemoryRegionMap::Region&gt;, bool&gt;' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='165e92a9c9f73e76' id='type-id-1396'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_iterator<MemoryRegionMap::Region> std::pair<std::_Rb_tree_iterator<MemoryRegionMap::Region>, bool>::first -->
          <var-decl name='first' type-id='type-id-615' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_iterator<MemoryRegionMap::Region>, bool>::second -->
          <var-decl name='second' type-id='type-id-59' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::unary_function<MemoryRegionMap::Region, MemoryRegionMap::Region> -->
      <class-decl name='unary_function&lt;MemoryRegionMap::Region, MemoryRegionMap::Region&gt;' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='101' column='1' hash='399c865f3261b7e2' id='type-id-1408'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_const_iterator<MemoryRegionMap::Region> > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_const_iterator&lt;MemoryRegionMap::Region&gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1414'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_iterator<MemoryRegionMap::Region> > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_iterator&lt;MemoryRegionMap::Region&gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1415'/>
      <!-- struct std::_Rb_tree_node<MemoryRegionMap::Region> -->
      <class-decl name='_Rb_tree_node&lt;MemoryRegionMap::Region&gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1403'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<MemoryRegionMap::Region>, std::_Rb_tree_const_iterator<MemoryRegionMap::Region> > -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;MemoryRegionMap::Region&gt;, std::_Rb_tree_const_iterator&lt;MemoryRegionMap::Region&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1416'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<MemoryRegionMap::Region>, std::_Rb_tree_iterator<MemoryRegionMap::Region> > -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;MemoryRegionMap::Region&gt;, std::_Rb_tree_iterator&lt;MemoryRegionMap::Region&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1417'/>
    </namespace-decl>
    <reference-type-def kind='lvalue' type-id='type-id-1403' size-in-bits='64' id='type-id-1418'/>
    <!-- std::_Rb_tree_node<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-1403' size-in-bits='64' id='type-id-1407'/>
    <!-- void* const -->
    <qualified-type-def type-id='type-id-56' const='yes' id='type-id-1419'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
    </namespace-decl>
    <!-- void (const MemoryRegionMap::Region&) -->
    <function-type size-in-bits='64' hash='d2a180ed49dda32d' id='type-id-1402'>
      <!-- parameter of type 'const MemoryRegionMap::Region&' -->
      <parameter type-id='type-id-341'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/page_heap.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- TCMalloc_PageMap3<35>* const -->
    <qualified-type-def type-id='type-id-1420' const='yes' hash='6026f59aac196b8e' id='type-id-1421'/>
    <!-- TCMalloc_PageMap3<35>::Node* -->
    <pointer-type-def type-id='type-id-167' size-in-bits='64' id='type-id-1422'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead'>
      <!-- double FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead::FLAGS_tcmalloc_release_rate -->
      <var-decl name='FLAGS_tcmalloc_release_rate' type-id='type-id-2' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead27FLAGS_tcmalloc_release_rateE' visibility='default' filepath='src/page_heap.cc' line='46' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead27FLAGS_tcmalloc_release_rateE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead::FLAGS_notcmalloc_release_rate -->
      <var-decl name='FLAGS_notcmalloc_release_rate' type-id='type-id-82' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead29FLAGS_notcmalloc_release_rateE' visibility='default' filepath='src/page_heap.cc' line='52' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead29FLAGS_notcmalloc_release_rateE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead'>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_tcmalloc_heap_limit_mb -->
      <var-decl name='FLAGS_tcmalloc_heap_limit_mb' type-id='type-id-105' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead28FLAGS_tcmalloc_heap_limit_mbE' visibility='default' filepath='src/page_heap.cc' line='54' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead28FLAGS_tcmalloc_heap_limit_mbE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_notcmalloc_heap_limit_mb -->
      <var-decl name='FLAGS_notcmalloc_heap_limit_mb' type-id='type-id-82' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead30FLAGS_notcmalloc_heap_limit_mbE' visibility='default' filepath='src/page_heap.cc' line='60' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead30FLAGS_notcmalloc_heap_limit_mbE'/>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/profile-handler.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- class ProfileHandler -->
    <class-decl name='ProfileHandler' visibility='default' size-in-bits='448' filepath='src/profile-handler.cc' line='84' column='1' hash='7d0db28e0399b03d' id='type-id-1423'>
      <member-type access='private'>
        <!-- enum {TIMERS_ONE_SET=1, TIMERS_SEPARATE=3, TIMERS_SHARED=2, TIMERS_UNTOUCHED=0, } -->
        <enum-decl name='__anonymous_enum__' size-in-bits='32' alignment-in-bits='32' is-anonymous='yes' filepath='src/profile-handler.cc' line='166' column='1' hash='40be12e0014557a4#2' id='type-id-1424'>
          <underlying-type type-id='type-id-93'/>
          <enumerator name='TIMERS_UNTOUCHED' value='0'/>
          <enumerator name='TIMERS_ONE_SET' value='1'/>
          <enumerator name='TIMERS_SHARED' value='2'/>
          <enumerator name='TIMERS_SEPARATE' value='3'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- typedef std::_List_iterator<ProfileHandlerToken*> ProfileHandler::CallbackIterator -->
        <typedef-decl name='CallbackIterator' type-id='type-id-1426' size-in-bits='64' filepath='src/profile-handler.cc' line='200' column='1' id='type-id-1425'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> > ProfileHandler::CallbackList -->
        <typedef-decl name='CallbackList' type-id='type-id-1428' size-in-bits='128' filepath='src/profile-handler.cc' line='199' column='1' id='type-id-1427'/>
      </member-type>
      <data-member access='public' static='yes'>
        <!-- static const int32 ProfileHandler::kMaxFrequency -->
        <var-decl name='kMaxFrequency' type-id='type-id-1429' mangled-name='_ZN14ProfileHandler13kMaxFrequencyE' visibility='default' filepath='src/profile-handler.cc' line='128' column='1' elf-symbol-id='_ZN14ProfileHandler13kMaxFrequencyE'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static const int32 ProfileHandler::kDefaultFrequency -->
        <var-decl name='kDefaultFrequency' type-id='type-id-1429' mangled-name='_ZN14ProfileHandler17kDefaultFrequencyE' visibility='default' filepath='src/profile-handler.cc' line='130' column='1' elf-symbol-id='_ZN14ProfileHandler17kDefaultFrequencyE'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static ProfileHandler* ProfileHandler::instance_ -->
        <var-decl name='instance_' type-id='type-id-1430' mangled-name='_ZN14ProfileHandler9instance_E' visibility='default' filepath='src/profile-handler.cc' line='234' column='1' elf-symbol-id='_ZN14ProfileHandler9instance_E'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static pthread_once_t ProfileHandler::once_ -->
        <var-decl name='once_' type-id='type-id-1335' mangled-name='_ZN14ProfileHandler5once_E' visibility='default' filepath='src/profile-handler.cc' line='235' column='1' elf-symbol-id='_ZN14ProfileHandler5once_E'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- int64 ProfileHandler::interrupts_ -->
        <var-decl name='interrupts_' type-id='type-id-105' visibility='default' filepath='src/profile-handler.cc' line='142' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- int32 ProfileHandler::frequency_ -->
        <var-decl name='frequency_' type-id='type-id-81' visibility='default' filepath='src/profile-handler.cc' line='145' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='96'>
        <!-- int ProfileHandler::timer_type_ -->
        <var-decl name='timer_type_' type-id='type-id-1' visibility='default' filepath='src/profile-handler.cc' line='148' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- int32 ProfileHandler::callback_count_ -->
        <var-decl name='callback_count_' type-id='type-id-81' visibility='default' filepath='src/profile-handler.cc' line='151' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='160'>
        <!-- bool ProfileHandler::allowed_ -->
        <var-decl name='allowed_' type-id='type-id-59' visibility='default' filepath='src/profile-handler.cc' line='154' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='168'>
        <!-- bool ProfileHandler::per_thread_timer_enabled_ -->
        <var-decl name='per_thread_timer_enabled_' type-id='type-id-59' visibility='default' filepath='src/profile-handler.cc' line='156' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='192'>
        <!-- pthread_key_t ProfileHandler::thread_timer_key -->
        <var-decl name='thread_timer_key' type-id='type-id-1333' visibility='default' filepath='src/profile-handler.cc' line='161' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='224'>
        <!-- ProfileHandler::__anonymous_enum__ ProfileHandler::timer_sharing_ -->
        <var-decl name='timer_sharing_' type-id='type-id-1424' visibility='default' filepath='src/profile-handler.cc' line='175' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='256'>
        <!-- SpinLock ProfileHandler::control_lock_ -->
        <var-decl name='control_lock_' type-id='type-id-102' visibility='default' filepath='src/profile-handler.cc' line='183' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='288'>
        <!-- SpinLock ProfileHandler::signal_lock_ -->
        <var-decl name='signal_lock_' type-id='type-id-102' visibility='default' filepath='src/profile-handler.cc' line='184' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='320'>
        <!-- ProfileHandler::CallbackList ProfileHandler::callbacks_ -->
        <var-decl name='callbacks_' type-id='type-id-1427' visibility='default' filepath='src/profile-handler.cc' line='201' column='1'/>
      </data-member>
      <member-function access='private'>
        <!-- bool ProfileHandler::IsSignalHandlerAvailable() -->
        <function-decl name='IsSignalHandlerAvailable' mangled-name='_ZN14ProfileHandler24IsSignalHandlerAvailableEv' filepath='src/profile-handler.cc' line='603' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler24IsSignalHandlerAvailableEv' hash='c7c710e908194b91'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1430' is-artificial='yes'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::DisableHandler() -->
        <function-decl name='DisableHandler' mangled-name='_ZN14ProfileHandler14DisableHandlerEv' filepath='src/profile-handler.cc' line='591' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler14DisableHandlerEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1430' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::EnableHandler() -->
        <function-decl name='EnableHandler' mangled-name='_ZN14ProfileHandler13EnableHandlerEv' filepath='src/profile-handler.cc' line='579' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler13EnableHandlerEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1430' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool ProfileHandler::IsTimerRunning() -->
        <function-decl name='IsTimerRunning' mangled-name='_ZN14ProfileHandler14IsTimerRunningEv' filepath='src/profile-handler.cc' line='566' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler14IsTimerRunningEv' hash='c7c710e908194b91'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1430' is-artificial='yes'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::StopTimer() -->
        <function-decl name='StopTimer' mangled-name='_ZN14ProfileHandler9StopTimerEv' filepath='src/profile-handler.cc' line='553' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler9StopTimerEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1430' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::StartTimer() -->
        <function-decl name='StartTimer' mangled-name='_ZN14ProfileHandler10StartTimerEv' filepath='src/profile-handler.cc' line='534' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler10StartTimerEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1430' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void ProfileHandler::SignalHandler(siginfo_t*, void*) -->
        <function-decl name='SignalHandler' mangled-name='_ZN14ProfileHandler13SignalHandlerEiP7siginfoPv' filepath='src/profile-handler.cc' line='618' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler13SignalHandlerEiP7siginfoPv' hash='81bacbf669d99154'>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'siginfo_t*' -->
          <parameter type-id='type-id-1431'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::GetState(ProfileHandlerState*) -->
        <function-decl name='GetState' mangled-name='_ZN14ProfileHandler8GetStateEP19ProfileHandlerState' filepath='src/profile-handler.cc' line='519' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler8GetStateEP19ProfileHandlerState' hash='becba3e9eb884c74'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1430' is-artificial='yes'/>
          <!-- parameter of type 'ProfileHandlerState*' -->
          <parameter type-id='type-id-1432'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::Reset() -->
        <function-decl name='Reset' mangled-name='_ZN14ProfileHandler5ResetEv' filepath='src/profile-handler.cc' line='499' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler5ResetEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1430' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- ProfileHandler::~ProfileHandler() -->
        <function-decl name='~ProfileHandler' mangled-name='_ZN14ProfileHandlerD1Ev' filepath='src/profile-handler.cc' line='395' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandlerD1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1430' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- ProfileHandlerToken* ProfileHandler::RegisterCallback(ProfileHandlerCallback, void*) -->
        <function-decl name='RegisterCallback' mangled-name='_ZN14ProfileHandler16RegisterCallbackEPFviP7siginfoPvS2_ES2_' filepath='src/profile-handler.cc' line='454' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler16RegisterCallbackEPFviP7siginfoPvS2_ES2_' hash='c3253fbacedb4273'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1430' is-artificial='yes'/>
          <!-- parameter of type 'typedef ProfileHandlerCallback' -->
          <parameter type-id='type-id-1433'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- ProfileHandlerToken* -->
          <return type-id='type-id-1434'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::UnregisterCallback(ProfileHandlerToken*) -->
        <function-decl name='UnregisterCallback' mangled-name='_ZN14ProfileHandler18UnregisterCallbackEP19ProfileHandlerToken' filepath='src/profile-handler.cc' line='474' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler18UnregisterCallbackEP19ProfileHandlerToken' hash='3f961d87608e6efc'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1430' is-artificial='yes'/>
          <!-- parameter of type 'ProfileHandlerToken*' -->
          <parameter type-id='type-id-1434'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::RegisterThread() -->
        <function-decl name='RegisterThread' mangled-name='_ZN14ProfileHandler14RegisterThreadEv' filepath='src/profile-handler.cc' line='404' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler14RegisterThreadEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1430' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- ProfileHandler::ProfileHandler() -->
        <function-decl name='ProfileHandler' mangled-name='_ZN14ProfileHandlerC1Ev' filepath='src/profile-handler.cc' line='342' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandlerC1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1430' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void ProfileHandler::Init() -->
        <function-decl name='Init' mangled-name='_ZN14ProfileHandler4InitEv' filepath='src/profile-handler.cc' line='324' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler4InitEv' hash='7f32ffea222edbe7'>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- ProfileHandler* ProfileHandler::Instance() -->
        <function-decl name='Instance' mangled-name='_ZN14ProfileHandler8InstanceEv' filepath='src/profile-handler.cc' line='328' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler8InstanceEv' hash='55f140a6dd7ee422'>
          <!-- ProfileHandler* -->
          <return type-id='type-id-1430'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- struct ProfileHandlerState -->
    <class-decl name='ProfileHandlerState' is-struct='yes' visibility='default' size-in-bits='192' filepath='src/profile-handler.h' line='137' column='1' hash='89d3ec2452b7b7fd' id='type-id-1435'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int32 ProfileHandlerState::frequency -->
        <var-decl name='frequency' type-id='type-id-81' visibility='default' filepath='src/profile-handler.h' line='138' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- int32 ProfileHandlerState::callback_count -->
        <var-decl name='callback_count' type-id='type-id-81' visibility='default' filepath='src/profile-handler.h' line='139' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- int64 ProfileHandlerState::interrupts -->
        <var-decl name='interrupts' type-id='type-id-105' visibility='default' filepath='src/profile-handler.h' line='140' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- bool ProfileHandlerState::allowed -->
        <var-decl name='allowed' type-id='type-id-59' visibility='default' filepath='src/profile-handler.h' line='141' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct ProfileHandlerToken -->
    <class-decl name='ProfileHandlerToken' is-struct='yes' visibility='default' size-in-bits='128' filepath='src/profile-handler.cc' line='69' column='1' hash='63dae45df1da8e05' id='type-id-1436'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- ProfileHandlerCallback ProfileHandlerToken::callback -->
        <var-decl name='callback' type-id='type-id-1433' visibility='default' filepath='src/profile-handler.cc' line='77' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- void* ProfileHandlerToken::callback_arg -->
        <var-decl name='callback_arg' type-id='type-id-56' visibility='default' filepath='src/profile-handler.cc' line='79' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct timer_id_holder -->
    <class-decl name='timer_id_holder' is-struct='yes' visibility='default' size-in-bits='64' filepath='src/profile-handler.cc' line='266' column='1' hash='b7c2f43384a9f018' id='type-id-1437'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- timer_t timer_id_holder::timerid -->
        <var-decl name='timerid' type-id='type-id-1438' visibility='default' filepath='src/profile-handler.cc' line='267' column='1'/>
      </data-member>
    </class-decl>
    <!-- typedef void (*)(int, siginfo_t*, void*, void*) ProfileHandlerCallback -->
    <typedef-decl name='ProfileHandlerCallback' type-id='type-id-1439' size-in-bits='64' filepath='src/profile-handler.h' line='95' column='1' hash='fd7a63c0c6c822c4' id='type-id-1433'/>
    <!-- typedef unsigned int pthread_key_t -->
    <typedef-decl name='pthread_key_t' type-id='type-id-1440' size-in-bits='32' filepath='/usr/include/bits/pthreadtypes.h' line='140' column='1' hash='e66b43f97c38e87a' id='type-id-1333'/>
    <!-- typedef int pthread_once_t -->
    <typedef-decl name='pthread_once_t' type-id='type-id-1' size-in-bits='32' filepath='/usr/include/bits/pthreadtypes.h' line='144' column='1' hash='09d17c08f594edc7' id='type-id-1335'/>
    <!-- ProfileHandler* -->
    <pointer-type-def type-id='type-id-1423' size-in-bits='64' hash='8d3d2ee6f003efbe' id='type-id-1430'/>
    <!-- ProfileHandler* const -->
    <qualified-type-def type-id='type-id-1430' const='yes' hash='7d932b6c9aad972d' id='type-id-1441'/>
    <!-- ProfileHandlerState* -->
    <pointer-type-def type-id='type-id-1435' size-in-bits='64' hash='a24feb55e1225999' id='type-id-1432'/>
    <!-- ProfileHandlerToken* const -->
    <qualified-type-def type-id='type-id-1434' const='yes' hash='e8306ba3b97d675e' id='type-id-1442'/>
    <!-- ProfileHandlerToken* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-1442' size-in-bits='64' hash='d05e7bd96302996e' id='type-id-1443'/>
    <!-- ProfileHandlerToken* const* -->
    <pointer-type-def type-id='type-id-1442' size-in-bits='64' hash='8f034b2d89ef6193' id='type-id-1444'/>
    <!-- ProfileHandlerToken*& -->
    <reference-type-def kind='lvalue' type-id='type-id-1434' size-in-bits='64' hash='4a539b5d54ddbb6a' id='type-id-1445'/>
    <!-- ProfileHandlerToken** -->
    <pointer-type-def type-id='type-id-1434' size-in-bits='64' hash='f03b804a56c60ac3' id='type-id-1446'/>
    <!-- __gnu_cxx::new_allocator<ProfileHandlerToken*>* -->
    <pointer-type-def type-id='type-id-1447' size-in-bits='64' hash='fe114c256a47f767' id='type-id-1448'/>
    <!-- __gnu_cxx::new_allocator<ProfileHandlerToken*>* const -->
    <qualified-type-def type-id='type-id-1448' const='yes' hash='ff98c84d68928c3f' id='type-id-1449'/>
    <!-- __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >* -->
    <pointer-type-def type-id='type-id-1450' size-in-bits='64' hash='257927f73f2ecf39' id='type-id-1451'/>
    <!-- __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >* const -->
    <qualified-type-def type-id='type-id-1451' const='yes' hash='6cee73c00fb4260e' id='type-id-1452'/>
    <!-- const ProfileHandler -->
    <qualified-type-def type-id='type-id-1423' const='yes' hash='4d22f60e9278c67e' id='type-id-1453'/>
    <!-- const ProfileHandler& -->
    <reference-type-def kind='lvalue' type-id='type-id-1453' size-in-bits='64' hash='e75b07181d805aa4' id='type-id-1454'/>
    <!-- const __gnu_cxx::new_allocator<ProfileHandlerToken*> -->
    <qualified-type-def type-id='type-id-1447' const='yes' hash='237513408364127d' id='type-id-1455'/>
    <!-- const __gnu_cxx::new_allocator<ProfileHandlerToken*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1455' size-in-bits='64' hash='1795157e306e1542' id='type-id-1456'/>
    <!-- const __gnu_cxx::new_allocator<ProfileHandlerToken*>* -->
    <pointer-type-def type-id='type-id-1455' size-in-bits='64' hash='627fafd319807e33' id='type-id-1457'/>
    <!-- const __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> > -->
    <qualified-type-def type-id='type-id-1450' const='yes' hash='27f7082b9bab6076' id='type-id-1458'/>
    <!-- const __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1458' size-in-bits='64' hash='ea2b9ed2bc74c78d' id='type-id-1459'/>
    <!-- const __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >* -->
    <pointer-type-def type-id='type-id-1458' size-in-bits='64' hash='6a762242c34321fb' id='type-id-1460'/>
    <!-- const __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >* const -->
    <qualified-type-def type-id='type-id-1460' const='yes' hash='17bce01bfde15d21' id='type-id-1461'/>
    <!-- const int32 -->
    <qualified-type-def type-id='type-id-81' const='yes' hash='f5d5e715f6cef6f7' id='type-id-1429'/>
    <!-- const std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> > -->
    <qualified-type-def type-id='type-id-1462' const='yes' hash='7d9a09f4d7163aab' id='type-id-1463'/>
    <!-- const std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >* -->
    <pointer-type-def type-id='type-id-1463' size-in-bits='64' hash='ac044e2d6d6a542f' id='type-id-1464'/>
    <!-- const std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >* const -->
    <qualified-type-def type-id='type-id-1464' const='yes' hash='60b88defd8ca7cc8' id='type-id-1465'/>
    <!-- const std::_List_iterator<ProfileHandlerToken*> -->
    <qualified-type-def type-id='type-id-1426' const='yes' hash='a5cc29ff1acec205' id='type-id-1466'/>
    <!-- const std::_List_iterator<ProfileHandlerToken*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1466' size-in-bits='64' hash='365af67869c06c5d' id='type-id-1467'/>
    <!-- const std::_List_iterator<ProfileHandlerToken*>* -->
    <pointer-type-def type-id='type-id-1466' size-in-bits='64' hash='117d282d6f703e4c' id='type-id-1468'/>
    <!-- const std::_List_iterator<ProfileHandlerToken*>* const -->
    <qualified-type-def type-id='type-id-1468' const='yes' hash='a5155209c759cd21' id='type-id-1469'/>
    <!-- const std::allocator<ProfileHandlerToken*> -->
    <qualified-type-def type-id='type-id-1470' const='yes' hash='6fe97f67af666555' id='type-id-1471'/>
    <!-- const std::allocator<ProfileHandlerToken*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1471' size-in-bits='64' hash='0183a330e8f9acdc' id='type-id-1472'/>
    <!-- const std::allocator<std::_List_node<ProfileHandlerToken*> > -->
    <qualified-type-def type-id='type-id-1473' const='yes' hash='2742d96e356fbd80' id='type-id-1474'/>
    <!-- const std::allocator<std::_List_node<ProfileHandlerToken*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1474' size-in-bits='64' hash='520ed59a9744279c' id='type-id-1475'/>
    <!-- const std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> > -->
    <qualified-type-def type-id='type-id-1428' const='yes' hash='1865ea6d164ecacb' id='type-id-1476'/>
    <!-- const std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1476' size-in-bits='64' hash='e12304dd97be0d6c' id='type-id-1477'/>
    <!-- const std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >* -->
    <pointer-type-def type-id='type-id-1476' size-in-bits='64' hash='8046a583eb0cd70c' id='type-id-1478'/>
    <!-- std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >* -->
    <pointer-type-def type-id='type-id-1462' size-in-bits='64' hash='0fd91c61a6c33011' id='type-id-1479'/>
    <!-- std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >* const -->
    <qualified-type-def type-id='type-id-1479' const='yes' hash='ec714b7e125eb294' id='type-id-1480'/>
    <!-- std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_List_impl* -->
    <pointer-type-def type-id='type-id-1481' size-in-bits='64' hash='ddb3f2dd69f18f24' id='type-id-1482'/>
    <!-- std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_List_impl* const -->
    <qualified-type-def type-id='type-id-1482' const='yes' hash='944cbc532cbc0624' id='type-id-1483'/>
    <!-- std::_List_iterator<ProfileHandlerToken*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1426' size-in-bits='64' hash='27e29b146088c7f2' id='type-id-1484'/>
    <!-- std::_List_iterator<ProfileHandlerToken*>* -->
    <pointer-type-def type-id='type-id-1426' size-in-bits='64' hash='668412bdf161deb7' id='type-id-1485'/>
    <!-- std::_List_iterator<ProfileHandlerToken*>* const -->
    <qualified-type-def type-id='type-id-1485' const='yes' hash='9b11cb3764c8a9cd' id='type-id-1486'/>
    <!-- std::_List_node_base& -->
    <reference-type-def kind='lvalue' type-id='type-id-1487' size-in-bits='64' hash='a0d647de99441adf' id='type-id-1488'/>
    <!-- std::_List_node_base* -->
    <pointer-type-def type-id='type-id-1487' size-in-bits='64' hash='9195502ca8d3e525' id='type-id-1489'/>
    <!-- std::allocator<ProfileHandlerToken*>* -->
    <pointer-type-def type-id='type-id-1470' size-in-bits='64' hash='c4ecf10be87c1960' id='type-id-1490'/>
    <!-- std::allocator<ProfileHandlerToken*>* const -->
    <qualified-type-def type-id='type-id-1490' const='yes' hash='f3db9f00fc43af8f' id='type-id-1491'/>
    <!-- std::allocator<std::_List_node<ProfileHandlerToken*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1473' size-in-bits='64' hash='a3d458e27653033f' id='type-id-1492'/>
    <!-- std::allocator<std::_List_node<ProfileHandlerToken*> >* -->
    <pointer-type-def type-id='type-id-1473' size-in-bits='64' hash='e0c7efe264f6f7fb' id='type-id-1493'/>
    <!-- std::allocator<std::_List_node<ProfileHandlerToken*> >* const -->
    <qualified-type-def type-id='type-id-1493' const='yes' hash='51f88f95dc15eee2' id='type-id-1494'/>
    <!-- std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1428' size-in-bits='64' hash='f513835defbb8252' id='type-id-1495'/>
    <!-- std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >* -->
    <pointer-type-def type-id='type-id-1428' size-in-bits='64' hash='16d395ff82d7463c' id='type-id-1496'/>
    <!-- std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >* const -->
    <qualified-type-def type-id='type-id-1496' const='yes' hash='3877f1c223df738d' id='type-id-1497'/>
    <!-- timer_id_holder* -->
    <pointer-type-def type-id='type-id-1437' size-in-bits='64' hash='808aefdb9b7dd417' id='type-id-1498'/>
    <!-- timer_id_holder* const -->
    <qualified-type-def type-id='type-id-1498' const='yes' hash='4f58d7ed7a6811eb' id='type-id-1499'/>
    <!-- void (*)(int, siginfo_t*, void*, void*) -->
    <pointer-type-def type-id='type-id-1500' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1439'/>
    <!-- const std::_List_node<ProfileHandlerToken*> -->
    <qualified-type-def type-id='type-id-1501' const='yes' id='type-id-1502'/>
    <reference-type-def kind='lvalue' type-id='type-id-1502' size-in-bits='64' id='type-id-1503'/>
    <!-- const std::_List_node<ProfileHandlerToken*>* -->
    <pointer-type-def type-id='type-id-1502' size-in-bits='64' id='type-id-1504'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- class std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> > -->
      <class-decl name='_List_base&lt;ProfileHandlerToken*, std::allocator&lt;ProfileHandlerToken*&gt; &gt;' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='278' column='1' hash='eea3ff99018a936f' id='type-id-1462'>
        <member-type access='protected'>
          <!-- struct std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_List_impl -->
          <class-decl name='_List_impl' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='300' column='1' hash='f920cbf0f61781ea' id='type-id-1481'>
            <!-- class std::allocator<std::_List_node<ProfileHandlerToken*> > -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1473'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::_List_node_base std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_List_impl::_M_node -->
              <var-decl name='_M_node' type-id='type-id-1487' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='301' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_List_impl std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-1481' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='312' column='1'/>
        </data-member>
      </class-decl>
      <!-- class std::allocator<ProfileHandlerToken*> -->
      <class-decl name='allocator&lt;ProfileHandlerToken*&gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' hash='31d144caf9b03d22' id='type-id-1470'>
        <!-- class __gnu_cxx::new_allocator<ProfileHandlerToken*> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1447'/>
      </class-decl>
      <!-- class std::allocator<std::_List_node<ProfileHandlerToken*> > -->
      <class-decl name='allocator&lt;std::_List_node&lt;ProfileHandlerToken*&gt; &gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' hash='440c7f626d8fb8a3' id='type-id-1473'>
        <!-- class __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> > -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1450'/>
      </class-decl>
      <!-- class std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> > -->
      <class-decl name='list&lt;ProfileHandlerToken*, std::allocator&lt;ProfileHandlerToken*&gt; &gt;' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='418' column='1' hash='932e7558a18b09c5' id='type-id-1428'>
        <!-- class std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> > -->
        <base-class access='protected' layout-offset-in-bits='0' type-id='type-id-1462'/>
      </class-decl>
      <!-- struct std::_List_iterator<ProfileHandlerToken*> -->
      <class-decl name='_List_iterator&lt;ProfileHandlerToken*&gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='114' column='1' hash='6c930d2c57d4feb7' id='type-id-1426'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_List_node_base* std::_List_iterator<ProfileHandlerToken*>::_M_node -->
          <var-decl name='_M_node' type-id='type-id-1489' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='179' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_List_node_base -->
      <class-decl name='_List_node_base' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='72' column='1' hash='5670e4adac509d61' id='type-id-1487'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_List_node_base* std::_List_node_base::_M_next -->
          <var-decl name='_M_next' type-id='type-id-1489' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='73' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- std::_List_node_base* std::_List_node_base::_M_prev -->
          <var-decl name='_M_prev' type-id='type-id-1489' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='74' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_List_node_base::hook(std::_List_node_base*) -->
          <function-decl name='hook' mangled-name='_ZNSt15_List_node_base4hookEPS_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='87' column='1' visibility='default' binding='global' size-in-bits='64' hash='4eac6b36a16b3f26'>
            <!-- implicit parameter of type 'std::_List_node_base*' -->
            <parameter type-id='type-id-1489' is-artificial='yes'/>
            <!-- parameter of type 'std::_List_node_base*' -->
            <parameter type-id='type-id-1489'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_List_node_base::unhook() -->
          <function-decl name='unhook' mangled-name='_ZNSt15_List_node_base6unhookEv' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='90' column='1' visibility='default' binding='global' size-in-bits='64' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'std::_List_node_base*' -->
            <parameter type-id='type-id-1489' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::reverse_iterator<std::_List_const_iterator<ProfileHandlerToken*> > -->
      <class-decl name='reverse_iterator&lt;std::_List_const_iterator&lt;ProfileHandlerToken*&gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1505'/>
      <!-- class std::reverse_iterator<std::_List_iterator<ProfileHandlerToken*> > -->
      <class-decl name='reverse_iterator&lt;std::_List_iterator&lt;ProfileHandlerToken*&gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1506'/>
      <!-- struct std::_List_const_iterator<ProfileHandlerToken*> -->
      <class-decl name='_List_const_iterator&lt;ProfileHandlerToken*&gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1507'/>
      <!-- struct std::_List_node<ProfileHandlerToken*> -->
      <class-decl name='_List_node&lt;ProfileHandlerToken*&gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1501'/>
    </namespace-decl>
    <reference-type-def kind='lvalue' type-id='type-id-1501' size-in-bits='64' id='type-id-1508'/>
    <!-- std::_List_node<ProfileHandlerToken*>* -->
    <pointer-type-def type-id='type-id-1501' size-in-bits='64' id='type-id-1509'/>
    <!-- typedef void* __timer_t -->
    <typedef-decl name='__timer_t' type-id='type-id-56' filepath='/usr/include/bits/types.h' line='161' column='1' id='type-id-1510'/>
    <!-- typedef __timer_t timer_t -->
    <typedef-decl name='timer_t' type-id='type-id-1510' filepath='/usr/include/time.h' line='104' column='1' id='type-id-1438'/>
    <!-- namespace __gnu_cxx -->
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::new_allocator<ProfileHandlerToken*> -->
      <class-decl name='new_allocator&lt;ProfileHandlerToken*&gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' hash='3abe91e9fa6c8854' id='type-id-1447'/>
      <!-- class __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> > -->
      <class-decl name='new_allocator&lt;std::_List_node&lt;ProfileHandlerToken*&gt; &gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' hash='852a55235d2d88fd' id='type-id-1450'/>
    </namespace-decl>
    <!-- namespace base -->
    <namespace-decl name='base'>
    </namespace-decl>
    <!-- void ProfileHandlerRegisterThread() -->
    <function-decl name='ProfileHandlerRegisterThread' mangled-name='ProfileHandlerRegisterThread' filepath='src/profile-handler.cc' line='641' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfileHandlerRegisterThread' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- ProfileHandlerToken* ProfileHandlerRegisterCallback(ProfileHandlerCallback, void*) -->
    <function-decl name='ProfileHandlerRegisterCallback' mangled-name='ProfileHandlerRegisterCallback' filepath='src/profile-handler.cc' line='645' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfileHandlerRegisterCallback' hash='c3253fbacedb4273'>
      <!-- parameter of type 'typedef ProfileHandlerCallback' -->
      <parameter type-id='type-id-1433' filepath='src/profile-handler.cc' line='646' column='1'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/profile-handler.cc' line='646' column='1'/>
      <!-- ProfileHandlerToken* -->
      <return type-id='type-id-1434'/>
    </function-decl>
    <!-- void ProfileHandlerUnregisterCallback(ProfileHandlerToken*) -->
    <function-decl name='ProfileHandlerUnregisterCallback' mangled-name='ProfileHandlerUnregisterCallback' filepath='src/profile-handler.cc' line='650' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfileHandlerUnregisterCallback' hash='3f961d87608e6efc'>
      <!-- parameter of type 'ProfileHandlerToken*' -->
      <parameter type-id='type-id-1434' filepath='src/profile-handler.cc' line='650' column='1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void ProfileHandlerReset() -->
    <function-decl name='ProfileHandlerReset' mangled-name='ProfileHandlerReset' filepath='src/profile-handler.cc' line='654' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfileHandlerReset' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void ProfileHandlerGetState(ProfileHandlerState*) -->
    <function-decl name='ProfileHandlerGetState' mangled-name='ProfileHandlerGetState' filepath='src/profile-handler.cc' line='658' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfileHandlerGetState' hash='becba3e9eb884c74'>
      <!-- parameter of type 'ProfileHandlerState*' -->
      <parameter type-id='type-id-1432' filepath='src/profile-handler.cc' line='658' column='1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void (int, siginfo_t*, void*, void*) -->
    <function-type size-in-bits='64' hash='81bacbf669d99154' id='type-id-1500'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'siginfo_t*' -->
      <parameter type-id='type-id-1431'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/profiledata.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- ProfileData* const -->
    <qualified-type-def type-id='type-id-1511' const='yes' hash='f48f93b71457bbbc' id='type-id-1512'/>
    <!-- const ProfileData::Options* const -->
    <qualified-type-def type-id='type-id-1513' const='yes' hash='9f401c95f526831d' id='type-id-1514'/>
    <!-- void* const -->
    <qualified-type-def type-id='type-id-56' const='yes' id='type-id-1515'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/profiler.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- ProfileData::Entry::Slot[64] -->
    <array-type-def dimensions='1' type-id='type-id-1516' size-in-bits='4096' hash='0b266d4a51504ce9' id='type-id-1517'>
      <!-- <anonymous range>[64] -->
      <subrange length='64' lower-bound='0' upper-bound='63' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='6066f2053fe47763' id='type-id-1518'/>
    </array-type-def>
    <!-- ProfileData::Entry[4] -->
    <array-type-def dimensions='1' type-id='type-id-1519' size-in-bits='16896' hash='4fc507d3032b5f9b' id='type-id-1520'>
      <!-- <anonymous range>[4] -->
      <subrange length='4' lower-bound='0' upper-bound='3' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='cee611f4a73e486c' id='type-id-360'/>
    </array-type-def>
    <!-- char[1024] -->
    <array-type-def dimensions='1' type-id='type-id-82' size-in-bits='8192' hash='228e81584cfb686d' id='type-id-1521'>
      <!-- <anonymous range>[1024] -->
      <subrange length='1024' lower-bound='0' upper-bound='1023' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='3d55c71eae25bbb8' id='type-id-1522'/>
    </array-type-def>
    <!-- class CpuProfiler -->
    <class-decl name='CpuProfiler' visibility='default' size-in-bits='704' filepath='src/profiler.cc' line='89' column='1' hash='be2323fabc918fa3' id='type-id-1523'>
      <data-member access='public' static='yes'>
        <!-- static CpuProfiler CpuProfiler::instance_ -->
        <var-decl name='instance_' type-id='type-id-1523' mangled-name='_ZN11CpuProfiler9instance_E' visibility='default' filepath='src/profiler.cc' line='180' column='1' elf-symbol-id='_ZN11CpuProfiler9instance_E'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- SpinLock CpuProfiler::lock_ -->
        <var-decl name='lock_' type-id='type-id-102' visibility='default' filepath='src/profiler.cc' line='119' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- ProfileData CpuProfiler::collector_ -->
        <var-decl name='collector_' type-id='type-id-1524' visibility='default' filepath='src/profiler.cc' line='120' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='512'>
        <!-- int (* CpuProfiler::filter_)(void*) -->
        <var-decl name='filter_' type-id='type-id-1525' visibility='default' filepath='src/profiler.cc' line='125' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='576'>
        <!-- void* CpuProfiler::filter_arg_ -->
        <var-decl name='filter_arg_' type-id='type-id-56' visibility='default' filepath='src/profiler.cc' line='126' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='640'>
        <!-- ProfileHandlerToken* CpuProfiler::prof_handler_token_ -->
        <var-decl name='prof_handler_token_' type-id='type-id-1434' visibility='default' filepath='src/profiler.cc' line='130' column='1'/>
      </data-member>
      <member-function access='private' static='yes'>
        <!-- void CpuProfiler::prof_handler(siginfo_t*, void*, void*) -->
        <function-decl name='prof_handler' mangled-name='_ZN11CpuProfiler12prof_handlerEiP7siginfoPvS2_' filepath='src/profiler.cc' line='339' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler12prof_handlerEiP7siginfoPvS2_' hash='81bacbf669d99154'>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'siginfo_t*' -->
          <parameter type-id='type-id-1431'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void CpuProfiler::DisableHandler() -->
        <function-decl name='DisableHandler' mangled-name='_ZN11CpuProfiler14DisableHandlerEv' filepath='src/profiler.cc' line='327' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler14DisableHandlerEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'CpuProfiler*' -->
          <parameter type-id='type-id-1526' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void CpuProfiler::EnableHandler() -->
        <function-decl name='EnableHandler' mangled-name='_ZN11CpuProfiler13EnableHandlerEv' filepath='src/profiler.cc' line='321' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler13EnableHandlerEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'CpuProfiler*' -->
          <parameter type-id='type-id-1526' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool CpuProfiler::Enabled() -->
        <function-decl name='Enabled' mangled-name='_ZN11CpuProfiler7EnabledEv' filepath='src/profiler.cc' line='301' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler7EnabledEv' hash='c7c710e908194b91'>
          <!-- implicit parameter of type 'CpuProfiler*' -->
          <parameter type-id='type-id-1526' is-artificial='yes'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void CpuProfiler::Stop() -->
        <function-decl name='Stop' mangled-name='_ZN11CpuProfiler4StopEv' filepath='src/profiler.cc' line='267' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler4StopEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'CpuProfiler*' -->
          <parameter type-id='type-id-1526' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- CpuProfiler::~CpuProfiler() -->
        <function-decl name='~CpuProfiler' mangled-name='_ZN11CpuProfilerD1Ev' filepath='src/profiler.cc' line='262' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfilerD1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'CpuProfiler*' -->
          <parameter type-id='type-id-1526' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void CpuProfiler::FlushTable() -->
        <function-decl name='FlushTable' mangled-name='_ZN11CpuProfiler10FlushTableEv' filepath='src/profiler.cc' line='283' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler10FlushTableEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'CpuProfiler*' -->
          <parameter type-id='type-id-1526' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void CpuProfiler::GetCurrentState(ProfilerState*) -->
        <function-decl name='GetCurrentState' mangled-name='_ZN11CpuProfiler15GetCurrentStateEP13ProfilerState' filepath='src/profiler.cc' line='306' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler15GetCurrentStateEP13ProfilerState' hash='e9f4ed9fc159782e'>
          <!-- implicit parameter of type 'CpuProfiler*' -->
          <parameter type-id='type-id-1526' is-artificial='yes'/>
          <!-- parameter of type 'ProfilerState*' -->
          <parameter type-id='type-id-1527'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool CpuProfiler::Start(const char*, const ProfilerOptions*) -->
        <function-decl name='Start' mangled-name='_ZN11CpuProfiler5StartEPKcPK15ProfilerOptions' filepath='src/profiler.cc' line='234' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler5StartEPKcPK15ProfilerOptions' hash='aa1429cf917c5edf'>
          <!-- implicit parameter of type 'CpuProfiler*' -->
          <parameter type-id='type-id-1526' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- parameter of type 'const ProfilerOptions*' -->
          <parameter type-id='type-id-1528'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- CpuProfiler::CpuProfiler() -->
        <function-decl name='CpuProfiler' mangled-name='_ZN11CpuProfilerC1Ev' filepath='src/profiler.cc' line='183' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfilerC1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'CpuProfiler*' -->
          <parameter type-id='type-id-1526' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class ProfileData -->
    <class-decl name='ProfileData' visibility='default' size-in-bits='448' filepath='src/profiledata.h' line='79' column='1' hash='a6f2941e3268c1b3' id='type-id-1524'>
      <member-type access='private'>
        <!-- class ProfileData::Options -->
        <class-decl name='Options' visibility='default' size-in-bits='32' filepath='src/profiledata.h' line='88' column='1' hash='e4281d9afb801394' id='type-id-1529'>
          <data-member access='private' layout-offset-in-bits='0'>
            <!-- int ProfileData::Options::frequency_ -->
            <var-decl name='frequency_' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='101' column='1'/>
          </data-member>
          <member-function access='private' constructor='yes'>
            <!-- ProfileData::Options::Options() -->
            <function-decl name='Options' mangled-name='_ZN11ProfileData7OptionsC1Ev' filepath='src/profiledata.cc' line='60' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData7OptionsC1Ev' hash='7f32ffea222edbe7'>
              <!-- implicit parameter of type 'ProfileData::Options*' -->
              <parameter type-id='type-id-1530' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-58'/>
            </function-decl>
          </member-function>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct ProfileData::Bucket -->
        <class-decl name='Bucket' is-struct='yes' visibility='default' size-in-bits='16896' filepath='src/profiledata.h' line='161' column='1' hash='8867be40f1c043ac' id='type-id-1531'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- ProfileData::Entry ProfileData::Bucket::entry[4] -->
            <var-decl name='entry' type-id='type-id-1520' visibility='default' filepath='src/profiledata.h' line='162' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct ProfileData::Entry -->
        <class-decl name='Entry' is-struct='yes' visibility='default' size-in-bits='4224' filepath='src/profiledata.h' line='154' column='1' hash='a18ca77ec2e89ebe' id='type-id-1519'>
          <member-type access='private'>
            <!-- typedef uintptr_t ProfileData::Entry::Slot -->
            <typedef-decl name='Slot' type-id='type-id-277' size-in-bits='64' filepath='src/profiledata.h' line='151' column='1' hash='8fdc5eea2983a729' id='type-id-1516'/>
          </member-type>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- ProfileData::Entry::Slot ProfileData::Entry::count -->
            <var-decl name='count' type-id='type-id-1516' visibility='default' filepath='src/profiledata.h' line='155' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- ProfileData::Entry::Slot ProfileData::Entry::depth -->
            <var-decl name='depth' type-id='type-id-1516' visibility='default' filepath='src/profiledata.h' line='156' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='128'>
            <!-- ProfileData::Entry::Slot ProfileData::Entry::stack[64] -->
            <var-decl name='stack' type-id='type-id-1517' visibility='default' filepath='src/profiledata.h' line='157' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct ProfileData::State -->
        <class-decl name='State' is-struct='yes' visibility='default' size-in-bits='8384' filepath='src/profiledata.h' line='81' column='1' hash='d9a89abb12cf1bee' id='type-id-1532'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- bool ProfileData::State::enabled -->
            <var-decl name='enabled' type-id='type-id-59' visibility='default' filepath='src/profiledata.h' line='82' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- time_t ProfileData::State::start_time -->
            <var-decl name='start_time' type-id='type-id-1533' visibility='default' filepath='src/profiledata.h' line='83' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='128'>
            <!-- char ProfileData::State::profile_name[1024] -->
            <var-decl name='profile_name' type-id='type-id-1521' visibility='default' filepath='src/profiledata.h' line='84' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='8320'>
            <!-- int ProfileData::State::samples_gathered -->
            <var-decl name='samples_gathered' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='85' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <data-member access='public' static='yes'>
        <!-- static const int ProfileData::kMaxStackDepth -->
        <var-decl name='kMaxStackDepth' type-id='type-id-159' mangled-name='_ZN11ProfileData14kMaxStackDepthE' visibility='default' filepath='src/profiledata.h' line='104' column='1' elf-symbol-id='_ZN11ProfileData14kMaxStackDepthE'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static const int ProfileData::kAssociativity -->
        <var-decl name='kAssociativity' type-id='type-id-159' mangled-name='_ZN11ProfileData14kAssociativityE' visibility='default' filepath='src/profiledata.h' line='146' column='1' elf-symbol-id='_ZN11ProfileData14kAssociativityE'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static const int ProfileData::kBuckets -->
        <var-decl name='kBuckets' type-id='type-id-159' mangled-name='_ZN11ProfileData8kBucketsE' visibility='default' filepath='src/profiledata.h' line='147' column='1' elf-symbol-id='_ZN11ProfileData8kBucketsE'/>
      </data-member>
      <data-member access='public' static='yes'>
        <!-- static const int ProfileData::kBufferLength -->
        <var-decl name='kBufferLength' type-id='type-id-159' mangled-name='_ZN11ProfileData13kBufferLengthE' visibility='default' filepath='src/profiledata.h' line='148' column='1' elf-symbol-id='_ZN11ProfileData13kBufferLengthE'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- ProfileData::Bucket* ProfileData::hash_ -->
        <var-decl name='hash_' type-id='type-id-1534' visibility='default' filepath='src/profiledata.h' line='165' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- ProfileData::Entry::Slot* ProfileData::evict_ -->
        <var-decl name='evict_' type-id='type-id-1535' visibility='default' filepath='src/profiledata.h' line='166' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- int ProfileData::num_evicted_ -->
        <var-decl name='num_evicted_' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='167' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='160'>
        <!-- int ProfileData::out_ -->
        <var-decl name='out_' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='168' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='192'>
        <!-- int ProfileData::count_ -->
        <var-decl name='count_' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='169' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='224'>
        <!-- int ProfileData::evictions_ -->
        <var-decl name='evictions_' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='170' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='256'>
        <!-- size_t ProfileData::total_bytes_ -->
        <var-decl name='total_bytes_' type-id='type-id-61' visibility='default' filepath='src/profiledata.h' line='171' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='320'>
        <!-- char* ProfileData::fname_ -->
        <var-decl name='fname_' type-id='type-id-130' visibility='default' filepath='src/profiledata.h' line='172' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='384'>
        <!-- time_t ProfileData::start_time_ -->
        <var-decl name='start_time_' type-id='type-id-1533' visibility='default' filepath='src/profiledata.h' line='173' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- ProfileData::ProfileData() -->
        <function-decl name='ProfileData' mangled-name='_ZN11ProfileDataC1Ev' filepath='src/profiledata.cc' line='80' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileDataC1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1511' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::FlushEvicted() -->
        <function-decl name='FlushEvicted' mangled-name='_ZN11ProfileData12FlushEvictedEv' filepath='src/profiledata.cc' line='324' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData12FlushEvictedEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1511' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::GetCurrentState(ProfileData::State*) -->
        <function-decl name='GetCurrentState' mangled-name='_ZNK11ProfileData15GetCurrentStateEPNS_5StateE' filepath='src/profiledata.cc' line='222' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK11ProfileData15GetCurrentStateEPNS_5StateE' hash='70ab0f22790aa321'>
          <!-- implicit parameter of type 'const ProfileData*' -->
          <parameter type-id='type-id-1536' is-artificial='yes'/>
          <!-- parameter of type 'ProfileData::State*' -->
          <parameter type-id='type-id-1537'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::Reset() -->
        <function-decl name='Reset' mangled-name='_ZN11ProfileData5ResetEv' filepath='src/profiledata.cc' line='199' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData5ResetEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1511' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool ProfileData::Start(const char*, const ProfileData::Options&) -->
        <function-decl name='Start' mangled-name='_ZN11ProfileData5StartEPKcRKNS_7OptionsE' filepath='src/profiledata.cc' line='92' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData5StartEPKcRKNS_7OptionsE' hash='d5123e4cd0ced909'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1511' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- parameter of type 'const ProfileData::Options&' -->
          <parameter type-id='type-id-1538'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::Evict(const ProfileData::Entry&) -->
        <function-decl name='Evict' mangled-name='_ZN11ProfileData5EvictERKNS_5EntryE' filepath='src/profiledata.cc' line='66' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData5EvictERKNS_5EntryE' hash='5a60c3f29e125b6f'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1511' is-artificial='yes'/>
          <!-- parameter of type 'const ProfileData::Entry&' -->
          <parameter type-id='type-id-1539'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::Add(int, void* const*) -->
        <function-decl name='Add' mangled-name='_ZN11ProfileData3AddEiPKPKv' filepath='src/profiledata.cc' line='261' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData3AddEiPKPKv' hash='0430a9a6bf5825a5'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1511' is-artificial='yes'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'void* const*' -->
          <parameter type-id='type-id-286'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::FlushTable() -->
        <function-decl name='FlushTable' mangled-name='_ZN11ProfileData10FlushTableEv' filepath='src/profiledata.cc' line='240' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData10FlushTableEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1511' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::Stop() -->
        <function-decl name='Stop' mangled-name='_ZN11ProfileData4StopEv' filepath='src/profiledata.cc' line='165' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData4StopEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1511' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- ProfileData::~ProfileData() -->
        <function-decl name='~ProfileData' mangled-name='_ZN11ProfileDataD1Ev' filepath='src/profiledata.cc' line='132' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileDataD1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1511' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- int[28] -->
    <array-type-def dimensions='1' type-id='type-id-1' size-in-bits='896' hash='3c777fbaec833786' id='type-id-1540'>
      <!-- <anonymous range>[28] -->
      <subrange length='28' lower-bound='0' upper-bound='27' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='050c3236984f813b' id='type-id-1541'/>
    </array-type-def>
    <!-- struct ProfilerOptions -->
    <class-decl name='ProfilerOptions' is-struct='yes' visibility='default' size-in-bits='128' filepath='./src/gperftools/profiler.h' line='89' column='1' hash='c1fcc488ea53137a' id='type-id-1542'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int (* ProfilerOptions::filter_in_thread)(void*) -->
        <var-decl name='filter_in_thread' type-id='type-id-1525' visibility='default' filepath='./src/gperftools/profiler.h' line='108' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- void* ProfilerOptions::filter_in_thread_arg -->
        <var-decl name='filter_in_thread_arg' type-id='type-id-56' visibility='default' filepath='./src/gperftools/profiler.h' line='109' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct ProfilerState -->
    <class-decl name='ProfilerState' is-struct='yes' visibility='default' size-in-bits='8384' filepath='./src/gperftools/profiler.h' line='157' column='1' hash='b9203ab770fd3bef' id='type-id-1543'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int ProfilerState::enabled -->
        <var-decl name='enabled' type-id='type-id-1' visibility='default' filepath='./src/gperftools/profiler.h' line='158' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- time_t ProfilerState::start_time -->
        <var-decl name='start_time' type-id='type-id-1533' visibility='default' filepath='./src/gperftools/profiler.h' line='159' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- char ProfilerState::profile_name[1024] -->
        <var-decl name='profile_name' type-id='type-id-1521' visibility='default' filepath='./src/gperftools/profiler.h' line='160' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='8320'>
        <!-- int ProfilerState::samples_gathered -->
        <var-decl name='samples_gathered' type-id='type-id-1' visibility='default' filepath='./src/gperftools/profiler.h' line='161' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct siginfo -->
    <class-decl name='siginfo' is-struct='yes' visibility='default' size-in-bits='1024' filepath='/usr/include/bits/siginfo.h' line='52' column='1' hash='30156472d0e12e48' id='type-id-1544'>
      <member-type access='public'>
        <!-- union {int _pad[28]; struct {__pid_t si_pid; __uid_t si_uid;} _kill; struct {int si_tid; int si_overrun; sigval_t si_sigval;} _timer; struct {__pid_t si_pid; __uid_t si_uid; sigval_t si_sigval;} _rt; struct {__pid_t si_pid; __uid_t si_uid; int si_status; __clock_t si_utime; __clock_t si_stime;} _sigchld; struct {void* si_addr;} _sigfault; struct {long int si_band; int si_fd;} _sigpoll;} -->
        <union-decl name='__anonymous_union__' visibility='default' size-in-bits='896' is-anonymous='yes' filepath='/usr/include/bits/siginfo.h' line='59' column='1' hash='5723587cc8f620d7#2' id='type-id-1545'>
          <member-type access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid; int si_status; __clock_t si_utime; __clock_t si_stime;} -->
            <class-decl name='__anonymous_struct__3' is-struct='yes' visibility='default' size-in-bits='256' is-anonymous='yes' filepath='/usr/include/bits/siginfo.h' line='87' column='1' hash='a022846dc31c79a9' id='type-id-1546'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- __pid_t si_pid -->
                <var-decl name='si_pid' type-id='type-id-76' visibility='default' filepath='/usr/include/bits/siginfo.h' line='88' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='32'>
                <!-- __uid_t si_uid -->
                <var-decl name='si_uid' type-id='type-id-1547' visibility='default' filepath='/usr/include/bits/siginfo.h' line='89' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='64'>
                <!-- int si_status -->
                <var-decl name='si_status' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='90' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='128'>
                <!-- __clock_t si_utime -->
                <var-decl name='si_utime' type-id='type-id-1548' visibility='default' filepath='/usr/include/bits/siginfo.h' line='91' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='192'>
                <!-- __clock_t si_stime -->
                <var-decl name='si_stime' type-id='type-id-1548' visibility='default' filepath='/usr/include/bits/siginfo.h' line='92' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid; sigval_t si_sigval;} -->
            <class-decl name='__anonymous_struct__2' is-struct='yes' visibility='default' size-in-bits='128' is-anonymous='yes' filepath='/usr/include/bits/siginfo.h' line='79' column='1' hash='41e477edc4099d87#2' id='type-id-1549'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- __pid_t si_pid -->
                <var-decl name='si_pid' type-id='type-id-76' visibility='default' filepath='/usr/include/bits/siginfo.h' line='80' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='32'>
                <!-- __uid_t si_uid -->
                <var-decl name='si_uid' type-id='type-id-1547' visibility='default' filepath='/usr/include/bits/siginfo.h' line='81' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='64'>
                <!-- sigval_t si_sigval -->
                <var-decl name='si_sigval' type-id='type-id-1550' visibility='default' filepath='/usr/include/bits/siginfo.h' line='82' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid;} -->
            <class-decl name='__anonymous_struct__' is-struct='yes' visibility='default' size-in-bits='64' is-anonymous='yes' filepath='/usr/include/bits/siginfo.h' line='64' column='1' hash='c76c580f5c12a59f#3' id='type-id-1551'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- __pid_t si_pid -->
                <var-decl name='si_pid' type-id='type-id-76' visibility='default' filepath='/usr/include/bits/siginfo.h' line='65' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='32'>
                <!-- __uid_t si_uid -->
                <var-decl name='si_uid' type-id='type-id-1547' visibility='default' filepath='/usr/include/bits/siginfo.h' line='66' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='public'>
            <!-- struct {int si_tid; int si_overrun; sigval_t si_sigval;} -->
            <class-decl name='__anonymous_struct__1' is-struct='yes' visibility='default' size-in-bits='128' is-anonymous='yes' filepath='/usr/include/bits/siginfo.h' line='71' column='1' hash='2833a925ec6e4437#4' id='type-id-1552'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- int si_tid -->
                <var-decl name='si_tid' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='72' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='32'>
                <!-- int si_overrun -->
                <var-decl name='si_overrun' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='73' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='64'>
                <!-- sigval_t si_sigval -->
                <var-decl name='si_sigval' type-id='type-id-1550' visibility='default' filepath='/usr/include/bits/siginfo.h' line='74' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='public'>
            <!-- struct {long int si_band; int si_fd;} -->
            <class-decl name='__anonymous_struct__5' is-struct='yes' visibility='default' size-in-bits='128' is-anonymous='yes' filepath='/usr/include/bits/siginfo.h' line='103' column='1' hash='a6534bec3664c5f1#5' id='type-id-1553'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- long int si_band -->
                <var-decl name='si_band' type-id='type-id-179' visibility='default' filepath='/usr/include/bits/siginfo.h' line='104' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='64'>
                <!-- int si_fd -->
                <var-decl name='si_fd' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='105' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='public'>
            <!-- struct {void* si_addr;} -->
            <class-decl name='__anonymous_struct__4' is-struct='yes' visibility='default' size-in-bits='64' is-anonymous='yes' filepath='/usr/include/bits/siginfo.h' line='97' column='1' hash='19972a648d22351e#6' id='type-id-1554'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- void* si_addr -->
                <var-decl name='si_addr' type-id='type-id-56' visibility='default' filepath='/usr/include/bits/siginfo.h' line='98' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <data-member access='public'>
            <!-- int _pad[28] -->
            <var-decl name='_pad' type-id='type-id-1540' visibility='default' filepath='/usr/include/bits/siginfo.h' line='60' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid;} _kill -->
            <var-decl name='_kill' type-id='type-id-1551' visibility='default' filepath='/usr/include/bits/siginfo.h' line='67' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {int si_tid; int si_overrun; sigval_t si_sigval;} _timer -->
            <var-decl name='_timer' type-id='type-id-1552' visibility='default' filepath='/usr/include/bits/siginfo.h' line='75' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid; sigval_t si_sigval;} _rt -->
            <var-decl name='_rt' type-id='type-id-1549' visibility='default' filepath='/usr/include/bits/siginfo.h' line='83' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid; int si_status; __clock_t si_utime; __clock_t si_stime;} _sigchld -->
            <var-decl name='_sigchld' type-id='type-id-1546' visibility='default' filepath='/usr/include/bits/siginfo.h' line='93' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {void* si_addr;} _sigfault -->
            <var-decl name='_sigfault' type-id='type-id-1554' visibility='default' filepath='/usr/include/bits/siginfo.h' line='99' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {long int si_band; int si_fd;} _sigpoll -->
            <var-decl name='_sigpoll' type-id='type-id-1553' visibility='default' filepath='/usr/include/bits/siginfo.h' line='106' column='1'/>
          </data-member>
        </union-decl>
      </member-type>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int siginfo::si_signo -->
        <var-decl name='si_signo' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='53' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- int siginfo::si_errno -->
        <var-decl name='si_errno' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='54' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- int siginfo::si_code -->
        <var-decl name='si_code' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='56' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- union {int _pad[28]; struct {__pid_t si_pid; __uid_t si_uid;} _kill; struct {int si_tid; int si_overrun; sigval_t si_sigval;} _timer; struct {__pid_t si_pid; __uid_t si_uid; sigval_t si_sigval;} _rt; struct {__pid_t si_pid; __uid_t si_uid; int si_status; __clock_t si_utime; __clock_t si_stime;} _sigchld; struct {void* si_addr;} _sigfault; struct {long int si_band; int si_fd;} _sigpoll;} siginfo::_sifields -->
        <var-decl name='_sifields' type-id='type-id-1545' visibility='default' filepath='/usr/include/bits/siginfo.h' line='107' column='1'/>
      </data-member>
    </class-decl>
    <!-- typedef long int __clock_t -->
    <typedef-decl name='__clock_t' type-id='type-id-179' size-in-bits='64' filepath='/usr/include/bits/types.h' line='145' column='1' hash='b119fe0931d2ee10' id='type-id-1548'/>
    <!-- typedef long int __time_t -->
    <typedef-decl name='__time_t' type-id='type-id-179' size-in-bits='64' filepath='/usr/include/bits/types.h' line='149' column='1' hash='b119fe0931d2ee10' id='type-id-1555'/>
    <!-- typedef unsigned int __uid_t -->
    <typedef-decl name='__uid_t' type-id='type-id-1440' size-in-bits='32' filepath='/usr/include/bits/types.h' line='135' column='1' hash='e66b43f97c38e87a' id='type-id-1547'/>
    <!-- typedef int32_t int32 -->
    <typedef-decl name='int32' type-id='type-id-161' size-in-bits='32' filepath='./src/base/basictypes.h' line='60' column='1' hash='09d17c08f594edc7' id='type-id-81'/>
    <!-- typedef int64_t int64 -->
    <typedef-decl name='int64' type-id='type-id-90' size-in-bits='64' filepath='./src/base/basictypes.h' line='61' column='1' hash='b119fe0931d2ee10' id='type-id-105'/>
    <!-- typedef siginfo siginfo_t -->
    <typedef-decl name='siginfo_t' type-id='type-id-1544' size-in-bits='1024' filepath='/usr/include/bits/siginfo.h' line='108' column='1' id='type-id-1556'/>
    <!-- typedef sigval sigval_t -->
    <typedef-decl name='sigval_t' type-id='type-id-1557' size-in-bits='64' filepath='/usr/include/bits/siginfo.h' line='37' column='1' id='type-id-1550'/>
    <!-- typedef __time_t time_t -->
    <typedef-decl name='time_t' type-id='type-id-1555' size-in-bits='64' filepath='/usr/include/time.h' line='76' column='1' hash='b119fe0931d2ee10' id='type-id-1533'/>
    <!-- typedef uint64_t uint64 -->
    <typedef-decl name='uint64' type-id='type-id-16' size-in-bits='64' filepath='./src/base/basictypes.h' line='72' column='1' hash='8fdc5eea2983a729' id='type-id-116'/>
    <!-- union sigval -->
    <union-decl name='sigval' visibility='default' size-in-bits='64' filepath='/usr/include/bits/siginfo.h' line='34' column='1' hash='aa83ddec5922f5f0' id='type-id-1557'>
      <data-member access='public'>
        <!-- int sigval::sival_int -->
        <var-decl name='sival_int' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='35' column='1'/>
      </data-member>
      <data-member access='public'>
        <!-- void* sigval::sival_ptr -->
        <var-decl name='sival_ptr' type-id='type-id-56' visibility='default' filepath='/usr/include/bits/siginfo.h' line='36' column='1'/>
      </data-member>
    </union-decl>
    <!-- CpuProfiler* -->
    <pointer-type-def type-id='type-id-1523' size-in-bits='64' hash='57cdb14f0da776b6' id='type-id-1526'/>
    <!-- CpuProfiler* const -->
    <qualified-type-def type-id='type-id-1526' const='yes' hash='46424dc639654f98' id='type-id-1558'/>
    <!-- ProfileData* -->
    <pointer-type-def type-id='type-id-1524' size-in-bits='64' hash='438c7370179d7429' id='type-id-1511'/>
    <!-- ProfileData::Bucket* -->
    <pointer-type-def type-id='type-id-1531' size-in-bits='64' hash='88df8b6683f98ed2' id='type-id-1534'/>
    <!-- ProfileData::Entry::Slot* -->
    <pointer-type-def type-id='type-id-1516' size-in-bits='64' hash='7b06f7825d51a320' id='type-id-1535'/>
    <!-- ProfileData::Options* -->
    <pointer-type-def type-id='type-id-1529' size-in-bits='64' hash='8539a5d5aeffb721' id='type-id-1530'/>
    <!-- ProfileData::Options* const -->
    <qualified-type-def type-id='type-id-1530' const='yes' hash='fb65a8ed309e7608' id='type-id-1559'/>
    <!-- ProfileData::State* -->
    <pointer-type-def type-id='type-id-1532' size-in-bits='64' hash='6de104ddf12dd8bd' id='type-id-1537'/>
    <!-- ProfileHandlerToken* -->
    <pointer-type-def type-id='type-id-1436' size-in-bits='64' hash='fe94ecd70abbe96e' id='type-id-1434'/>
    <!-- ProfilerState* -->
    <pointer-type-def type-id='type-id-1543' size-in-bits='64' hash='228795e91148a3a7' id='type-id-1527'/>
    <!-- const ProfileData -->
    <qualified-type-def type-id='type-id-1524' const='yes' hash='a69e61437e3bad2f' id='type-id-1560'/>
    <!-- const ProfileData& -->
    <reference-type-def kind='lvalue' type-id='type-id-1560' size-in-bits='64' hash='ed7c2e0f9163159f' id='type-id-1561'/>
    <!-- const ProfileData* -->
    <pointer-type-def type-id='type-id-1560' size-in-bits='64' hash='370fec5878a773d2' id='type-id-1536'/>
    <!-- const ProfileData* const -->
    <qualified-type-def type-id='type-id-1536' const='yes' hash='827de71b8617ffd4' id='type-id-1562'/>
    <!-- const ProfileData::Entry -->
    <qualified-type-def type-id='type-id-1519' const='yes' hash='154200fca8315db1' id='type-id-1563'/>
    <!-- const ProfileData::Entry& -->
    <reference-type-def kind='lvalue' type-id='type-id-1563' size-in-bits='64' hash='2f871afc44d75c37' id='type-id-1539'/>
    <!-- const ProfileData::Options -->
    <qualified-type-def type-id='type-id-1529' const='yes' hash='eac2f9a31c5b1fc2' id='type-id-1564'/>
    <!-- const ProfileData::Options& -->
    <reference-type-def kind='lvalue' type-id='type-id-1564' size-in-bits='64' hash='14fa7e7b12bc42df' id='type-id-1538'/>
    <!-- const ProfileData::Options* -->
    <pointer-type-def type-id='type-id-1564' size-in-bits='64' hash='7bd067525b44d947' id='type-id-1513'/>
    <!-- const ProfilerOptions -->
    <qualified-type-def type-id='type-id-1542' const='yes' hash='3e1ccebaae0a9aa2' id='type-id-1565'/>
    <!-- const ProfilerOptions* -->
    <pointer-type-def type-id='type-id-1565' size-in-bits='64' hash='8b009e14cfecddd5' id='type-id-1528'/>
    <!-- int (*)(void*) -->
    <pointer-type-def type-id='type-id-1241' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1525'/>
    <!-- siginfo_t* -->
    <pointer-type-def type-id='type-id-1556' size-in-bits='64' hash='1f34718e6d6fe97b' id='type-id-1431'/>
    <!-- void* const -->
    <qualified-type-def type-id='type-id-56' const='yes' id='type-id-1566'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead'>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_cpu_profiler_unittest -->
      <var-decl name='FLAGS_cpu_profiler_unittest' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead27FLAGS_cpu_profiler_unittestE' visibility='default' filepath='src/profiler.cc' line='74' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead27FLAGS_cpu_profiler_unittestE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nocpu_profiler_unittest -->
      <var-decl name='FLAGS_nocpu_profiler_unittest' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead29FLAGS_nocpu_profiler_unittestE' visibility='default' filepath='src/profiler.cc' line='78' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead29FLAGS_nocpu_profiler_unittestE'/>
    </namespace-decl>
    <!-- void ProfilerRegisterThread() -->
    <function-decl name='ProfilerRegisterThread' mangled-name='ProfilerRegisterThread' filepath='src/profiler.cc' line='378' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerRegisterThread' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void ProfilerFlush() -->
    <function-decl name='ProfilerFlush' mangled-name='ProfilerFlush' filepath='src/profiler.cc' line='382' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerFlush' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- int ProfilingIsEnabledForAllThreads() -->
    <function-decl name='ProfilingIsEnabledForAllThreads' mangled-name='ProfilingIsEnabledForAllThreads' filepath='src/profiler.cc' line='386' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilingIsEnabledForAllThreads' hash='388da3fa973fde78'>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int ProfilerStart(const char*) -->
    <function-decl name='ProfilerStart' mangled-name='ProfilerStart' filepath='src/profiler.cc' line='390' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerStart' hash='e9ea91a7eab8302c'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int ProfilerStartWithOptions(const char*, const ProfilerOptions*) -->
    <function-decl name='ProfilerStartWithOptions' mangled-name='ProfilerStartWithOptions' filepath='src/profiler.cc' line='394' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerStartWithOptions' hash='53daf693fca15aee'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-60' filepath='src/profiler.cc' line='395' column='1'/>
      <!-- parameter of type 'const ProfilerOptions*' -->
      <parameter type-id='type-id-1528' filepath='src/profiler.cc' line='395' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void ProfilerStop() -->
    <function-decl name='ProfilerStop' mangled-name='ProfilerStop' filepath='src/profiler.cc' line='399' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerStop' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void ProfilerGetCurrentState(ProfilerState*) -->
    <function-decl name='ProfilerGetCurrentState' mangled-name='ProfilerGetCurrentState' filepath='src/profiler.cc' line='403' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerGetCurrentState' hash='e9f4ed9fc159782e'>
      <!-- parameter of type 'ProfilerState*' -->
      <parameter type-id='type-id-1527' filepath='src/profiler.cc' line='404' column='1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void ProfilerEnable() -->
    <function-decl name='ProfilerEnable' mangled-name='ProfilerEnable' filepath='src/profiler.cc' line='430' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerEnable' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void ProfilerDisable() -->
    <function-decl name='ProfilerDisable' mangled-name='ProfilerDisable' filepath='src/profiler.cc' line='431' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerDisable' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/raw_printer.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- base::RawPrinter* -->
    <pointer-type-def type-id='type-id-1567' size-in-bits='64' hash='6f461155a3b54500' id='type-id-1568'/>
    <!-- base::RawPrinter* const -->
    <qualified-type-def type-id='type-id-1568' const='yes' hash='0ba0e69237c0ce2f' id='type-id-1569'/>
    <!-- const base::RawPrinter -->
    <qualified-type-def type-id='type-id-1567' const='yes' hash='a2de057e6c77acf9' id='type-id-1570'/>
    <!-- const base::RawPrinter& -->
    <reference-type-def kind='lvalue' type-id='type-id-1570' size-in-bits='64' hash='068b35726ba1ff38' id='type-id-1571'/>
    <!-- const base::RawPrinter* -->
    <pointer-type-def type-id='type-id-1570' size-in-bits='64' hash='65d69a608f217d79' id='type-id-1572'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- class base::RawPrinter -->
      <class-decl name='RawPrinter' visibility='default' size-in-bits='192' filepath='src/raw_printer.h' line='51' column='1' hash='e5da1583020c39ce' id='type-id-1567'>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- char* base::RawPrinter::base_ -->
          <var-decl name='base_' type-id='type-id-130' visibility='default' filepath='src/raw_printer.h' line='81' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- char* base::RawPrinter::ptr_ -->
          <var-decl name='ptr_' type-id='type-id-130' visibility='default' filepath='src/raw_printer.h' line='82' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- char* base::RawPrinter::limit_ -->
          <var-decl name='limit_' type-id='type-id-130' visibility='default' filepath='src/raw_printer.h' line='83' column='1'/>
        </data-member>
        <member-function access='private' constructor='yes'>
          <!-- base::RawPrinter::RawPrinter(char*, int) -->
          <function-decl name='RawPrinter' mangled-name='_ZN4base10RawPrinterC1EPci' filepath='src/raw_printer.cc' line='42' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base10RawPrinterC1EPci' hash='64137bddd2d8bd37'>
            <!-- implicit parameter of type 'base::RawPrinter*' -->
            <parameter type-id='type-id-1568' is-artificial='yes'/>
            <!-- parameter of type 'char*' -->
            <parameter type-id='type-id-130'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void base::RawPrinter::Printf(const char*, ...) -->
          <function-decl name='Printf' mangled-name='_ZN4base10RawPrinter6PrintfEPKcz' filepath='src/raw_printer.cc' line='51' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base10RawPrinter6PrintfEPKcz' hash='53885bde0aa65efe'>
            <!-- implicit parameter of type 'base::RawPrinter*' -->
            <parameter type-id='type-id-1568' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-60'/>
            <parameter is-variadic='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/sampler.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- double[1024] -->
    <array-type-def dimensions='1' type-id='type-id-2' size-in-bits='65536' hash='2c427e0822ca917a' id='type-id-1573'>
      <!-- <anonymous range>[1024] -->
      <subrange length='1024' lower-bound='0' upper-bound='1023' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='3d55c71eae25bbb8' id='type-id-1522'/>
    </array-type-def>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- class tcmalloc::Sampler -->
      <class-decl name='Sampler' visibility='default' hash='f28f8a31d40a0efa' id='type-id-1574'>
        <member-function access='private'>
          <!-- int tcmalloc::Sampler::GetSamplePeriod() -->
          <function-decl name='GetSamplePeriod' mangled-name='_ZN8tcmalloc7Sampler15GetSamplePeriodEv' filepath='src/sampler.cc' line='73' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7Sampler15GetSamplePeriodEv' hash='388da3fa973fde78'>
            <!-- implicit parameter of type 'tcmalloc::Sampler*' -->
            <parameter type-id='type-id-1575' is-artificial='yes'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- size_t tcmalloc::Sampler::PickNextSamplingPoint() -->
          <function-decl name='PickNextSamplingPoint' mangled-name='_ZN8tcmalloc7Sampler21PickNextSamplingPointEv' filepath='src/sampler.cc' line='112' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7Sampler21PickNextSamplingPointEv' hash='e0055d99adb0e173'>
            <!-- implicit parameter of type 'tcmalloc::Sampler*' -->
            <parameter type-id='type-id-1575' is-artificial='yes'/>
            <!-- typedef size_t -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::Sampler::Init(uint32_t) -->
          <function-decl name='Init' mangled-name='_ZN8tcmalloc7Sampler4InitEj' filepath='src/sampler.cc' line='78' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7Sampler4InitEj' hash='2bb88322482ae81c'>
            <!-- implicit parameter of type 'tcmalloc::Sampler*' -->
            <parameter type-id='type-id-1575' is-artificial='yes'/>
            <!-- parameter of type 'typedef uint32_t' -->
            <parameter type-id='type-id-19'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::Sampler::PopulateFastLog2Table() -->
          <function-decl name='PopulateFastLog2Table' mangled-name='_ZN8tcmalloc7Sampler21PopulateFastLog2TableEv' filepath='src/sampler.cc' line='66' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7Sampler21PopulateFastLog2TableEv' hash='7f32ffea222edbe7'>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::Sampler::InitStatics() -->
          <function-decl name='InitStatics' mangled-name='_ZN8tcmalloc7Sampler11InitStaticsEv' filepath='src/sampler.cc' line='97' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7Sampler11InitStaticsEv' hash='7f32ffea222edbe7'>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead'>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_tcmalloc_sample_parameter -->
      <var-decl name='FLAGS_tcmalloc_sample_parameter' type-id='type-id-105' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead31FLAGS_tcmalloc_sample_parameterE' visibility='default' filepath='src/sampler.cc' line='52' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead31FLAGS_tcmalloc_sample_parameterE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_notcmalloc_sample_parameter -->
      <var-decl name='FLAGS_notcmalloc_sample_parameter' type-id='type-id-82' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead33FLAGS_notcmalloc_sample_parameterE' visibility='default' filepath='src/sampler.cc' line='55' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead33FLAGS_notcmalloc_sample_parameterE'/>
    </namespace-decl>
    <!-- int (tcmalloc::Sampler::*) () -->
    <function-type method-class-id='type-id-1576' size-in-bits='64' hash='388da3fa973fde78' id='type-id-1577'>
      <!-- implicit parameter of type 'tcmalloc::Sampler*' -->
      <parameter type-id='type-id-1575' is-artificial='yes'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- size_t (tcmalloc::Sampler::*) () -->
    <function-type method-class-id='type-id-1576' size-in-bits='64' hash='e0055d99adb0e173' id='type-id-1578'>
      <!-- implicit parameter of type 'tcmalloc::Sampler*' -->
      <parameter type-id='type-id-1575' is-artificial='yes'/>
      <!-- typedef size_t -->
      <return type-id='type-id-61'/>
    </function-type>
    <!-- void (tcmalloc::Sampler::*) (uint32_t) -->
    <function-type method-class-id='type-id-1576' size-in-bits='64' hash='2bb88322482ae81c' id='type-id-1579'>
      <!-- implicit parameter of type 'tcmalloc::Sampler*' -->
      <parameter type-id='type-id-1575' is-artificial='yes'/>
      <!-- parameter of type 'typedef uint32_t' -->
      <parameter type-id='type-id-19'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::Sampler::*) (void) -->
    <function-type method-class-id='type-id-1576' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-1580'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/span.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::Span>* const -->
    <qualified-type-def type-id='type-id-1581' const='yes' hash='5d1a0bf34af52a26' id='type-id-1582'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- tcmalloc::Span* tcmalloc::NewSpan(PageID, Length) -->
      <function-decl name='NewSpan' mangled-name='_ZN8tcmalloc7NewSpanEmm' filepath='src/span.cc' line='54' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7NewSpanEmm' hash='e5129598d0bd0a46'>
        <!-- parameter of type 'typedef PageID' -->
        <parameter type-id='type-id-190'/>
        <!-- parameter of type 'typedef Length' -->
        <parameter type-id='type-id-192'/>
        <!-- tcmalloc::Span* -->
        <return type-id='type-id-188'/>
      </function-decl>
      <!-- void tcmalloc::DeleteSpan(tcmalloc::Span*) -->
      <function-decl name='DeleteSpan' mangled-name='_ZN8tcmalloc10DeleteSpanEPNS_4SpanE' filepath='src/span.cc' line='65' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc10DeleteSpanEPNS_4SpanE' hash='e089691e785388d9'>
        <!-- parameter of type 'tcmalloc::Span*' -->
        <parameter type-id='type-id-188'/>
        <!-- void -->
        <return type-id='type-id-58'/>
      </function-decl>
      <!-- void tcmalloc::DLL_Init(tcmalloc::Span*) -->
      <function-decl name='DLL_Init' mangled-name='_ZN8tcmalloc8DLL_InitEPNS_4SpanE' filepath='src/span.cc' line='73' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8DLL_InitEPNS_4SpanE' hash='e089691e785388d9'>
        <!-- parameter of type 'tcmalloc::Span*' -->
        <parameter type-id='type-id-188'/>
        <!-- void -->
        <return type-id='type-id-58'/>
      </function-decl>
      <!-- void tcmalloc::DLL_Remove(tcmalloc::Span*) -->
      <function-decl name='DLL_Remove' mangled-name='_ZN8tcmalloc10DLL_RemoveEPNS_4SpanE' filepath='src/span.cc' line='78' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc10DLL_RemoveEPNS_4SpanE' hash='e089691e785388d9'>
        <!-- parameter of type 'tcmalloc::Span*' -->
        <parameter type-id='type-id-188'/>
        <!-- void -->
        <return type-id='type-id-58'/>
      </function-decl>
      <!-- int tcmalloc::DLL_Length(const tcmalloc::Span*) -->
      <function-decl name='DLL_Length' mangled-name='_ZN8tcmalloc10DLL_LengthEPKNS_4SpanE' filepath='src/span.cc' line='85' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc10DLL_LengthEPKNS_4SpanE' hash='806cdbc6d04444b3'>
        <!-- parameter of type 'const tcmalloc::Span*' -->
        <parameter type-id='type-id-166'/>
        <!-- int -->
        <return type-id='type-id-1'/>
      </function-decl>
      <!-- void tcmalloc::DLL_Prepend(tcmalloc::Span*, tcmalloc::Span*) -->
      <function-decl name='DLL_Prepend' mangled-name='_ZN8tcmalloc11DLL_PrependEPNS_4SpanES1_' filepath='src/span.cc' line='93' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11DLL_PrependEPNS_4SpanES1_' hash='f16fc0363020557e'>
        <!-- parameter of type 'tcmalloc::Span*' -->
        <parameter type-id='type-id-188'/>
        <!-- parameter of type 'tcmalloc::Span*' -->
        <parameter type-id='type-id-188'/>
        <!-- void -->
        <return type-id='type-id-58'/>
      </function-decl>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/stack_trace_table.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket> -->
    <qualified-type-def type-id='type-id-201' const='yes' hash='e29fa8445e59b5c4' id='type-id-1583'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>* -->
    <pointer-type-def type-id='type-id-1583' size-in-bits='64' hash='351ef9222662c62a' id='type-id-1584'/>
    <!-- const tcmalloc::StackTrace -->
    <qualified-type-def type-id='type-id-1585' const='yes' hash='8e174489cc7a686d' id='type-id-1586'/>
    <!-- const tcmalloc::StackTrace& -->
    <reference-type-def kind='lvalue' type-id='type-id-1586' size-in-bits='64' hash='c809cf26fb551926' id='type-id-1587'/>
    <!-- const tcmalloc::StackTraceTable -->
    <qualified-type-def type-id='type-id-1588' const='yes' hash='a5150f6558f74677' id='type-id-1589'/>
    <!-- const tcmalloc::StackTraceTable* -->
    <pointer-type-def type-id='type-id-1589' size-in-bits='64' hash='330fc9a96b62c93e' id='type-id-1590'/>
    <!-- const tcmalloc::StackTraceTable::Bucket -->
    <qualified-type-def type-id='type-id-1591' const='yes' hash='47fc25d4a586def0' id='type-id-1592'/>
    <!-- const tcmalloc::StackTraceTable::Bucket* -->
    <pointer-type-def type-id='type-id-1592' size-in-bits='64' hash='f3f7198fab96de55' id='type-id-1593'/>
    <!-- const tcmalloc::StackTraceTable::Bucket* const -->
    <qualified-type-def type-id='type-id-1593' const='yes' hash='f8b4d36e0458f6cd' id='type-id-1594'/>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>* const -->
    <qualified-type-def type-id='type-id-1595' const='yes' hash='4533e9f9bddcbd49' id='type-id-1596'/>
    <!-- tcmalloc::StackTraceTable* -->
    <pointer-type-def type-id='type-id-1588' size-in-bits='64' hash='7bf68d8a98d78c89' id='type-id-1597'/>
    <!-- tcmalloc::StackTraceTable* const -->
    <qualified-type-def type-id='type-id-1597' const='yes' hash='6fcba598f112b548' id='type-id-1598'/>
    <!-- tcmalloc::StackTraceTable::Bucket* -->
    <pointer-type-def type-id='type-id-1591' size-in-bits='64' hash='88df8b6683f98ed2' id='type-id-1599'/>
    <!-- tcmalloc::StackTraceTable::Bucket** -->
    <pointer-type-def type-id='type-id-1599' size-in-bits='64' hash='4df5de4be2947731' id='type-id-1600'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- class tcmalloc::StackTraceTable -->
      <class-decl name='StackTraceTable' visibility='default' size-in-bits='192' filepath='src/stack_trace_table.h' line='47' column='1' hash='f0343e4235ffaafa' id='type-id-1588'>
        <member-type access='private'>
          <!-- struct tcmalloc::StackTraceTable::Bucket -->
          <class-decl name='Bucket' is-struct='yes' visibility='default' size-in-bits='2304' filepath='src/stack_trace_table.h' line='65' column='1' hash='b9e83db1e9b75b91' id='type-id-1591'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- uintptr_t tcmalloc::StackTraceTable::Bucket::hash -->
              <var-decl name='hash' type-id='type-id-277' visibility='default' filepath='src/stack_trace_table.h' line='67' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- tcmalloc::StackTrace tcmalloc::StackTraceTable::Bucket::trace -->
              <var-decl name='trace' type-id='type-id-1585' visibility='default' filepath='src/stack_trace_table.h' line='68' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='2176'>
              <!-- int tcmalloc::StackTraceTable::Bucket::count -->
              <var-decl name='count' type-id='type-id-1' visibility='default' filepath='src/stack_trace_table.h' line='71' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='2240'>
              <!-- tcmalloc::StackTraceTable::Bucket* tcmalloc::StackTraceTable::Bucket::next -->
              <var-decl name='next' type-id='type-id-1599' visibility='default' filepath='src/stack_trace_table.h' line='72' column='1'/>
            </data-member>
            <member-function access='public'>
              <!-- bool tcmalloc::StackTraceTable::Bucket::KeyEqual(uintptr_t, const tcmalloc::StackTrace&) -->
              <function-decl name='KeyEqual' mangled-name='_ZNK8tcmalloc15StackTraceTable6Bucket8KeyEqualEmRKNS_10StackTraceE' filepath='src/stack_trace_table.cc' line='45' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK8tcmalloc15StackTraceTable6Bucket8KeyEqualEmRKNS_10StackTraceE' hash='9c2ba6479339cb65'>
                <!-- implicit parameter of type 'const tcmalloc::StackTraceTable::Bucket*' -->
                <parameter type-id='type-id-1593' is-artificial='yes'/>
                <!-- parameter of type 'typedef uintptr_t' -->
                <parameter type-id='type-id-277'/>
                <!-- parameter of type 'const tcmalloc::StackTrace&' -->
                <parameter type-id='type-id-1587'/>
                <!-- bool -->
                <return type-id='type-id-59'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- bool tcmalloc::StackTraceTable::error_ -->
          <var-decl name='error_' type-id='type-id-59' visibility='default' filepath='src/stack_trace_table.h' line='84' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='32'>
          <!-- int tcmalloc::StackTraceTable::depth_total_ -->
          <var-decl name='depth_total_' type-id='type-id-1' visibility='default' filepath='src/stack_trace_table.h' line='85' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- int tcmalloc::StackTraceTable::bucket_total_ -->
          <var-decl name='bucket_total_' type-id='type-id-1' visibility='default' filepath='src/stack_trace_table.h' line='86' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- tcmalloc::StackTraceTable::Bucket** tcmalloc::StackTraceTable::table_ -->
          <var-decl name='table_' type-id='type-id-1600' visibility='default' filepath='src/stack_trace_table.h' line='87' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void** tcmalloc::StackTraceTable::ReadStackTracesAndClear() -->
          <function-decl name='ReadStackTracesAndClear' mangled-name='_ZN8tcmalloc15StackTraceTable23ReadStackTracesAndClearEv' filepath='src/stack_trace_table.cc' line='110' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15StackTraceTable23ReadStackTracesAndClearEv' hash='33cabb503c62c709'>
            <!-- implicit parameter of type 'tcmalloc::StackTraceTable*' -->
            <parameter type-id='type-id-1597' is-artificial='yes'/>
            <!-- void** -->
            <return type-id='type-id-184'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::StackTraceTable::AddTrace(const tcmalloc::StackTrace&) -->
          <function-decl name='AddTrace' mangled-name='_ZN8tcmalloc15StackTraceTable8AddTraceERKNS_10StackTraceE' filepath='src/stack_trace_table.cc' line='68' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15StackTraceTable8AddTraceERKNS_10StackTraceE' hash='9a1deafba9470a4d'>
            <!-- implicit parameter of type 'tcmalloc::StackTraceTable*' -->
            <parameter type-id='type-id-1597' is-artificial='yes'/>
            <!-- parameter of type 'const tcmalloc::StackTrace&' -->
            <parameter type-id='type-id-1587'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- tcmalloc::StackTraceTable::~StackTraceTable() -->
          <function-decl name='~StackTraceTable' mangled-name='_ZN8tcmalloc15StackTraceTableD2Ev' filepath='src/stack_trace_table.cc' line='64' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15StackTraceTableD2Ev' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::StackTraceTable*' -->
            <parameter type-id='type-id-1597' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::StackTraceTable::StackTraceTable() -->
          <function-decl name='StackTraceTable' mangled-name='_ZN8tcmalloc15StackTraceTableC2Ev' filepath='src/stack_trace_table.cc' line='56' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15StackTraceTableC2Ev' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::StackTraceTable*' -->
            <parameter type-id='type-id-1597' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- void (tcmalloc::StackTraceTable::*) () -->
    <function-type method-class-id='type-id-1588' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-1601'>
      <!-- implicit parameter of type 'tcmalloc::StackTraceTable*' -->
      <parameter type-id='type-id-1597' is-artificial='yes'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::StackTraceTable::*) (const tcmalloc::StackTrace&) -->
    <function-type method-class-id='type-id-1588' size-in-bits='64' hash='9a1deafba9470a4d' id='type-id-1602'>
      <!-- implicit parameter of type 'tcmalloc::StackTraceTable*' -->
      <parameter type-id='type-id-1597' is-artificial='yes'/>
      <!-- parameter of type 'const tcmalloc::StackTrace&' -->
      <parameter type-id='type-id-1587'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void** (tcmalloc::StackTraceTable::*) () -->
    <function-type method-class-id='type-id-1588' size-in-bits='64' hash='33cabb503c62c709' id='type-id-1603'>
      <!-- implicit parameter of type 'tcmalloc::StackTraceTable*' -->
      <parameter type-id='type-id-1597' is-artificial='yes'/>
      <!-- void** -->
      <return type-id='type-id-184'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/stacktrace.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- int GetStackFrames(void**, int*, int, int) -->
    <function-decl name='GetStackFrames' mangled-name='_Z14GetStackFramesPPvPiii' filepath='src/stacktrace.cc' line='220' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z14GetStackFramesPPvPiii' hash='124859fe624f147e'>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-184' filepath='src/stacktrace.cc' line='220' column='1'/>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-1218' filepath='src/stacktrace.cc' line='220' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/stacktrace.cc' line='220' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/stacktrace.cc' line='221' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int GetStackFramesWithContext(void**, int*, int, int, void*) -->
    <function-decl name='GetStackFramesWithContext' mangled-name='_Z25GetStackFramesWithContextPPvPiiiPKv' filepath='src/stacktrace.cc' line='225' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z25GetStackFramesWithContextPPvPiiiPKv' hash='124859fe624f147e'>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-184' filepath='src/stacktrace.cc' line='225' column='1'/>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-1218' filepath='src/stacktrace.cc' line='225' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/stacktrace.cc' line='225' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/stacktrace.cc' line='226' column='1'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/stacktrace.cc' line='226' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int GetStackTrace(void**, int, int) -->
    <function-decl name='GetStackTrace' mangled-name='_Z13GetStackTracePPvii' filepath='src/stacktrace.cc' line='232' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z13GetStackTracePPvii' hash='38e34a6ded264d64'>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-184' filepath='src/malloc_hook.cc' line='611' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/malloc_hook.cc' line='611' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/malloc_hook.cc' line='612' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int GetStackTraceWithContext(void**, int, int, void*) -->
    <function-decl name='GetStackTraceWithContext' mangled-name='_Z24GetStackTraceWithContextPPviiPKv' filepath='src/stacktrace.cc' line='237' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z24GetStackTraceWithContextPPviiPKv' hash='38e34a6ded264d64'>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-184' filepath='src/stacktrace.cc' line='237' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/stacktrace.cc' line='237' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/stacktrace.cc' line='238' column='1'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/stacktrace.cc' line='238' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/static_vars.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- tcmalloc::CentralFreeListPadded[88] -->
    <array-type-def dimensions='1' type-id='type-id-1604' size-in-bits='856064' hash='47e81c8df9049c22' id='type-id-1605'>
      <!-- <anonymous range>[88] -->
      <subrange length='88' lower-bound='0' upper-bound='87' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='6b4bb579b7303ac8' id='type-id-1606'/>
    </array-type-def>
    <!-- namespace base -->
    <namespace-decl name='base'>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- class tcmalloc::CentralFreeListPaddedTo<16> -->
      <class-decl name='CentralFreeListPaddedTo&lt;16&gt;' visibility='default' hash='0ee0d563d3a068d7' id='type-id-1607'/>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/symbolize.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- class SymbolTable -->
    <class-decl name='SymbolTable' visibility='default' size-in-bits='448' filepath='src/symbolize.h' line='50' column='1' hash='a01014eda297b1aa' id='type-id-1608'>
      <member-type access='private'>
        <!-- typedef std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > > SymbolTable::SymbolMap -->
        <typedef-decl name='SymbolMap' type-id='type-id-1610' size-in-bits='384' filepath='src/symbolize.h' line='72' column='1' id='type-id-1609'/>
      </member-type>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- SymbolTable::SymbolMap SymbolTable::symbolization_table_ -->
        <var-decl name='symbolization_table_' type-id='type-id-1609' visibility='default' filepath='src/symbolize.h' line='78' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='384'>
        <!-- char* SymbolTable::symbol_buffer_ -->
        <var-decl name='symbol_buffer_' type-id='type-id-130' visibility='default' filepath='src/symbolize.h' line='81' column='1'/>
      </data-member>
      <member-function access='private'>
        <!-- int SymbolTable::Symbolize() -->
        <function-decl name='Symbolize' mangled-name='_ZN11SymbolTable9SymbolizeEv' filepath='src/symbolize.cc' line='127' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11SymbolTable9SymbolizeEv' hash='388da3fa973fde78'>
          <!-- implicit parameter of type 'SymbolTable*' -->
          <parameter type-id='type-id-1611' is-artificial='yes'/>
          <!-- int -->
          <return type-id='type-id-1'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- const char* SymbolTable::GetSymbol(void*) -->
        <function-decl name='GetSymbol' mangled-name='_ZN11SymbolTable9GetSymbolEPKv' filepath='src/symbolize.cc' line='115' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11SymbolTable9GetSymbolEPKv' hash='53885bde0aa65efe'>
          <!-- implicit parameter of type 'SymbolTable*' -->
          <parameter type-id='type-id-1611' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- const char* -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void SymbolTable::Add(void*) -->
        <function-decl name='Add' mangled-name='_ZN11SymbolTable3AddEPKv' filepath='src/symbolize.cc' line='111' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11SymbolTable3AddEPKv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'SymbolTable*' -->
          <parameter type-id='type-id-1611' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- SymbolTable* -->
    <pointer-type-def type-id='type-id-1608' size-in-bits='64' hash='07a240829879b0f1' id='type-id-1611'/>
    <!-- SymbolTable* const -->
    <qualified-type-def type-id='type-id-1611' const='yes' hash='1dc05a1565621a70' id='type-id-1612'/>
    <!-- __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1613' size-in-bits='64' hash='bbd5ef0cacbc4429' id='type-id-1614'/>
    <!-- __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >* const -->
    <qualified-type-def type-id='type-id-1614' const='yes' hash='43e51d072a1fcc64' id='type-id-1615'/>
    <!-- __gnu_cxx::new_allocator<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1616' size-in-bits='64' hash='a47591ede8040ebd' id='type-id-1617'/>
    <!-- __gnu_cxx::new_allocator<std::pair<const void* const, const char*> >* const -->
    <qualified-type-def type-id='type-id-1617' const='yes' hash='c2ec82cb867e00d2' id='type-id-1618'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
    <qualified-type-def type-id='type-id-1613' const='yes' hash='eff18659c1a171a1' id='type-id-1619'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1619' size-in-bits='64' hash='08092f912fc7fe52' id='type-id-1620'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1619' size-in-bits='64' hash='a6459d401c622d0f' id='type-id-1621'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >* const -->
    <qualified-type-def type-id='type-id-1621' const='yes' hash='600c23e1b48b94c9' id='type-id-1622'/>
    <!-- const __gnu_cxx::new_allocator<std::pair<const void* const, const char*> > -->
    <qualified-type-def type-id='type-id-1616' const='yes' hash='714f29ec7d48c8d8' id='type-id-1623'/>
    <!-- const __gnu_cxx::new_allocator<std::pair<const void* const, const char*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1623' size-in-bits='64' hash='c84cd83afc9260ea' id='type-id-1624'/>
    <!-- const __gnu_cxx::new_allocator<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1623' size-in-bits='64' hash='9f297f4ec73c22b9' id='type-id-1625'/>
    <!-- const char*& -->
    <reference-type-def kind='lvalue' type-id='type-id-60' size-in-bits='64' hash='61b8d56ccba036f1' id='type-id-1626'/>
    <!-- const std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > > -->
    <qualified-type-def type-id='type-id-1166' const='yes' hash='c9fe5c4aead60430' id='type-id-1627'/>
    <!-- const std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1627' size-in-bits='64' hash='c919d81a0a1e2998' id='type-id-1628'/>
    <!-- const std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1627' size-in-bits='64' hash='803b54544259f6ff' id='type-id-1629'/>
    <!-- const std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* const -->
    <qualified-type-def type-id='type-id-1629' const='yes' hash='82857fbbe0db63de' id='type-id-1630'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> > -->
    <qualified-type-def type-id='type-id-1174' const='yes' hash='30f09cf2a6b95b78' id='type-id-1631'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1631' size-in-bits='64' hash='73d3f4a05c63a7aa' id='type-id-1632'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1631' size-in-bits='64' hash='2f94267dad6f7654' id='type-id-1633'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >* const -->
    <qualified-type-def type-id='type-id-1633' const='yes' hash='2fdbb943356d68c2' id='type-id-1634'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const void* const, const char*> > -->
    <qualified-type-def type-id='type-id-1172' const='yes' hash='885da53d2be0f795' id='type-id-1635'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const void* const, const char*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1635' size-in-bits='64' hash='4e250538113fc5c3' id='type-id-1636'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1635' size-in-bits='64' hash='a5d3d66d68a82ac5' id='type-id-1637'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const void* const, const char*> >* const -->
    <qualified-type-def type-id='type-id-1637' const='yes' hash='e39b01ae57bcf2bf' id='type-id-1638'/>
    <!-- const std::_Select1st<std::pair<const void* const, const char*> > -->
    <qualified-type-def type-id='type-id-1639' const='yes' hash='abc9f86f14af3618' id='type-id-1640'/>
    <!-- const std::_Select1st<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1640' size-in-bits='64' hash='848e48bd1382cb1a' id='type-id-1641'/>
    <!-- const std::_Select1st<std::pair<const void* const, const char*> >* const -->
    <qualified-type-def type-id='type-id-1641' const='yes' hash='c1d928ce725b28a6' id='type-id-1642'/>
    <!-- const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
    <qualified-type-def type-id='type-id-1168' const='yes' hash='14d062cf8b4cf3bf' id='type-id-1643'/>
    <!-- const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1643' size-in-bits='64' hash='e0ff976faeba81be' id='type-id-1644'/>
    <!-- const std::allocator<std::pair<const void* const, const char*> > -->
    <qualified-type-def type-id='type-id-1645' const='yes' hash='1547165ae30c4135' id='type-id-1646'/>
    <!-- const std::allocator<std::pair<const void* const, const char*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1646' size-in-bits='64' hash='28278ee5b365aae4' id='type-id-1647'/>
    <!-- const std::less<const void*> -->
    <qualified-type-def type-id='type-id-1169' const='yes' hash='16868b3bca070a78' id='type-id-1648'/>
    <!-- const std::less<const void*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1648' size-in-bits='64' hash='a554848bd2b7bd2b' id='type-id-1649'/>
    <!-- const std::less<const void*>* -->
    <pointer-type-def type-id='type-id-1648' size-in-bits='64' hash='14ec3ac46bd863d1' id='type-id-1650'/>
    <!-- const std::less<const void*>* const -->
    <qualified-type-def type-id='type-id-1650' const='yes' hash='22b1a071b5f88702' id='type-id-1651'/>
    <!-- const std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > > -->
    <qualified-type-def type-id='type-id-1610' const='yes' hash='5d456b7ce63eaded' id='type-id-1652'/>
    <!-- const std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1652' size-in-bits='64' hash='61d57838a892b7ae' id='type-id-1653'/>
    <!-- const std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1652' size-in-bits='64' hash='1cbc1e5227e834d4' id='type-id-1654'/>
    <!-- const std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* const -->
    <qualified-type-def type-id='type-id-1654' const='yes' hash='6ab5038fb0af5ad2' id='type-id-1655'/>
    <!-- const std::pair<const void* const, const char*> -->
    <qualified-type-def type-id='type-id-1656' const='yes' hash='d1d0cbe5e6957c22' id='type-id-1657'/>
    <!-- const std::pair<const void* const, const char*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1657' size-in-bits='64' hash='af596318fbd1a927' id='type-id-1171'/>
    <!-- const std::pair<const void* const, const char*>* -->
    <pointer-type-def type-id='type-id-1657' size-in-bits='64' hash='39f2c0ce63800214' id='type-id-1658'/>
    <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1166' size-in-bits='64' hash='620059fa75e74547' id='type-id-1659'/>
    <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1166' size-in-bits='64' hash='10ed17c184ffdf4a' id='type-id-1170'/>
    <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* const -->
    <qualified-type-def type-id='type-id-1170' const='yes' hash='60d778fdb0d05eb8' id='type-id-1660'/>
    <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>* -->
    <pointer-type-def type-id='type-id-1167' size-in-bits='64' hash='a9e174e1220e7461' id='type-id-1101'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1174' size-in-bits='64' hash='182f27414c5abb68' id='type-id-1661'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1174' size-in-bits='64' hash='545f4b27989cf2f5' id='type-id-1662'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >* const -->
    <qualified-type-def type-id='type-id-1662' const='yes' hash='0c6ad3a62b822696' id='type-id-1663'/>
    <!-- std::_Rb_tree_iterator<std::pair<const void* const, const char*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1172' size-in-bits='64' hash='239712b725d75f89' id='type-id-1664'/>
    <!-- std::_Rb_tree_iterator<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1172' size-in-bits='64' hash='92e8f170f3f73805' id='type-id-1665'/>
    <!-- std::_Rb_tree_iterator<std::pair<const void* const, const char*> >* const -->
    <qualified-type-def type-id='type-id-1665' const='yes' hash='32680881f40d36eb' id='type-id-1666'/>
    <!-- std::allocator<char>* const -->
    <qualified-type-def type-id='type-id-1667' const='yes' hash='b2a55524e21244e4' id='type-id-1668'/>
    <!-- std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1168' size-in-bits='64' hash='5bf3f2cbaed306c6' id='type-id-1669'/>
    <!-- std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1168' size-in-bits='64' hash='75e68b0b3cf5749b' id='type-id-1112'/>
    <!-- std::allocator<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1645' size-in-bits='64' hash='61343c1ddfaa1cbd' id='type-id-1670'/>
    <!-- std::allocator<std::pair<const void* const, const char*> >* const -->
    <qualified-type-def type-id='type-id-1670' const='yes' hash='c9833450e1c58fbb' id='type-id-1671'/>
    <!-- std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1610' size-in-bits='64' hash='e520978cacfe74d6' id='type-id-1672'/>
    <!-- std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1610' size-in-bits='64' hash='3bf3331e721e1707' id='type-id-1673'/>
    <!-- std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* const -->
    <qualified-type-def type-id='type-id-1673' const='yes' hash='374e3cbadaee5dea' id='type-id-1674'/>
    <!-- std::pair<const void* const, const char*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1656' size-in-bits='64' hash='bb60888577233562' id='type-id-1675'/>
    <!-- std::pair<const void* const, const char*>* -->
    <pointer-type-def type-id='type-id-1656' size-in-bits='64' hash='50f29f29e6ce4313' id='type-id-1676'/>
    <!-- std::pair<const void* const, const char*>* const -->
    <qualified-type-def type-id='type-id-1676' const='yes' hash='994abd8f6846b335' id='type-id-1677'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool>* -->
    <pointer-type-def type-id='type-id-1173' size-in-bits='64' hash='f76f2f6e5f93d0cb' id='type-id-1678'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool>* const -->
    <qualified-type-def type-id='type-id-1678' const='yes' hash='76b29433a69e8781' id='type-id-1679'/>
    <!-- const std::_Rb_tree_node<std::pair<const void* const, const char*> > -->
    <qualified-type-def type-id='type-id-1680' const='yes' id='type-id-1681'/>
    <reference-type-def kind='lvalue' type-id='type-id-1681' size-in-bits='64' id='type-id-1682'/>
    <!-- const std::_Rb_tree_node<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1681' size-in-bits='64' id='type-id-1683'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- class std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
      <class-decl name='allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' hash='34ae4d1ebca296c8#2' id='type-id-1168'>
        <!-- class __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1613'/>
      </class-decl>
      <!-- class std::allocator<std::pair<const void* const, const char*> > -->
      <class-decl name='allocator&lt;std::pair&lt;const void* const, const char*&gt; &gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' hash='5aba25fe929dfd88#2' id='type-id-1645'>
        <!-- class __gnu_cxx::new_allocator<std::pair<const void* const, const char*> > -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1616'/>
      </class-decl>
      <!-- class std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > > -->
      <class-decl name='map&lt;const void*, const char*, std::less&lt;const void*&gt;, std::allocator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' visibility='default' size-in-bits='384' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='87' column='1' hash='03549307d47251ee#2' id='type-id-1610'>
        <member-type access='private'>
          <!-- class std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::value_compare -->
          <class-decl name='value_compare' visibility='default' is-declaration-only='yes' id='type-id-1684'/>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > > std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-1166' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='128' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::_Select1st<std::pair<const void* const, const char*> > -->
      <class-decl name='_Select1st&lt;std::pair&lt;const void* const, const char*&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='482' column='1' hash='9a97b60f2cc5b2c0' id='type-id-1639'>
        <!-- struct std::unary_function<std::pair<const void* const, const char*>, const void* const> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1685'/>
      </class-decl>
      <!-- struct std::binary_function<const void*, const void*, bool> -->
      <class-decl name='binary_function&lt;const void*, const void*, bool&gt;' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='113' column='1' hash='29ccc6459ef1ed78' id='type-id-1686'/>
      <!-- struct std::less<const void*> -->
      <class-decl name='less&lt;const void*&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='227' column='1' hash='746ddc661dccff9d#2' id='type-id-1169'>
        <!-- struct std::binary_function<const void*, const void*, bool> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1686'/>
      </class-decl>
      <!-- struct std::pair<const void* const, const char*> -->
      <class-decl name='pair&lt;const void* const, const char*&gt;' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' hash='591bea7bc1deb8bd#2' id='type-id-1656'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- void* const std::pair<const void* const, const char*>::first -->
          <var-decl name='first' type-id='type-id-1687' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- const char* std::pair<const void* const, const char*>::second -->
          <var-decl name='second' type-id='type-id-60' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::unary_function<std::pair<const void* const, const char*>, const void* const> -->
      <class-decl name='unary_function&lt;std::pair&lt;const void* const, const char*&gt;, const void* const&gt;' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='101' column='1' hash='a42ab4978e5bc377' id='type-id-1685'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1688'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1689'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1690'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_iterator<std::pair<const void* const, const char*> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1691'/>
      <!-- struct std::_Rb_tree_node<std::pair<const void* const, const char*> > -->
      <class-decl name='_Rb_tree_node&lt;std::pair&lt;const void* const, const char*&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1680'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >, std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt;, std::_Rb_tree_const_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1692'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, std::_Rb_tree_iterator<std::pair<const void* const, const char*> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1693'/>
    </namespace-decl>
    <reference-type-def kind='lvalue' type-id='type-id-1680' size-in-bits='64' id='type-id-1694'/>
    <!-- std::_Rb_tree_node<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1680' size-in-bits='64' id='type-id-1695'/>
    <!-- void* const -->
    <qualified-type-def type-id='type-id-56' const='yes' id='type-id-1687'/>
    <!-- namespace __gnu_cxx -->
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
      <class-decl name='new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' hash='1d9e43a7c1cd51ce#2' id='type-id-1613'/>
      <!-- class __gnu_cxx::new_allocator<std::pair<const void* const, const char*> > -->
      <class-decl name='new_allocator&lt;std::pair&lt;const void* const, const char*&gt; &gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' hash='5c1fc0fbab31704d#2' id='type-id-1616'/>
      <!-- class __gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > -->
      <class-decl name='__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1696'/>
      <!-- class __gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > -->
      <class-decl name='__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1697'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead'>
      <!-- std::string FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_symbolize_pprof -->
      <var-decl name='FLAGS_symbolize_pprof' type-id='type-id-999' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead21FLAGS_symbolize_pprofE' visibility='default' filepath='src/symbolize.cc' line='68' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead21FLAGS_symbolize_pprofE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_nosymbolize_pprof -->
      <var-decl name='FLAGS_nosymbolize_pprof' type-id='type-id-82' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead23FLAGS_nosymbolize_pprofE' visibility='default' filepath='src/symbolize.cc' line='70' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead23FLAGS_nosymbolize_pprofE'/>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/system-alloc.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- SysAllocator*[2] -->
    <array-type-def dimensions='1' type-id='type-id-1221' size-in-bits='128' hash='ee0efb298ff47784' id='type-id-1698'>
      <!-- <anonymous range>[2] -->
      <subrange length='2' lower-bound='0' upper-bound='1' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='95f31efc53154467' id='type-id-1699'/>
    </array-type-def>
    <!-- bool[2] -->
    <array-type-def dimensions='1' type-id='type-id-59' size-in-bits='16' hash='2ceb4124454e8bf2' id='type-id-1700'>
      <!-- <anonymous range>[2] -->
      <subrange length='2' lower-bound='0' upper-bound='1' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='95f31efc53154467' id='type-id-1699'/>
    </array-type-def>
    <!-- class DefaultSysAllocator -->
    <class-decl name='DefaultSysAllocator' visibility='default' size-in-bits='384' filepath='src/system-alloc.cc' line='173' column='1' hash='9ae494d23c7a857d' id='type-id-1701'>
      <!-- class SysAllocator -->
      <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1224'/>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- bool DefaultSysAllocator::failed_[2] -->
        <var-decl name='failed_' type-id='type-id-1700' visibility='default' filepath='src/system-alloc.cc' line='194' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- SysAllocator* DefaultSysAllocator::allocs_[2] -->
        <var-decl name='allocs_' type-id='type-id-1698' visibility='default' filepath='src/system-alloc.cc' line='195' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='256'>
        <!-- const char* DefaultSysAllocator::names_[2] -->
        <var-decl name='names_' type-id='type-id-1702' visibility='default' filepath='src/system-alloc.cc' line='196' column='1'/>
      </data-member>
      <member-function access='private' vtable-offset='2'>
        <!-- void* DefaultSysAllocator::Alloc(size_t, size_t*, size_t) -->
        <function-decl name='Alloc' mangled-name='_ZN19DefaultSysAllocator5AllocEmPmm' filepath='src/system-alloc.cc' line='431' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN19DefaultSysAllocator5AllocEmPmm' hash='dbc951d0957cd899'>
          <!-- implicit parameter of type 'DefaultSysAllocator*' -->
          <parameter type-id='type-id-1703' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-319'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void* -->
          <return type-id='type-id-56'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class DevMemSysAllocator -->
    <class-decl name='DevMemSysAllocator' visibility='default' size-in-bits='64' filepath='src/system-alloc.cc' line='166' column='1' hash='5deb5e53664cc557' id='type-id-1704'>
      <!-- class SysAllocator -->
      <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1224'/>
      <member-function access='private' vtable-offset='2'>
        <!-- void* DevMemSysAllocator::Alloc(size_t, size_t*, size_t) -->
        <function-decl name='Alloc' mangled-name='_ZN18DevMemSysAllocator5AllocEmPmm' filepath='src/system-alloc.cc' line='342' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN18DevMemSysAllocator5AllocEmPmm' hash='dbc951d0957cd899'>
          <!-- implicit parameter of type 'DevMemSysAllocator*' -->
          <parameter type-id='type-id-1705' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-319'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void* -->
          <return type-id='type-id-56'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class MmapSysAllocator -->
    <class-decl name='MmapSysAllocator' visibility='default' size-in-bits='64' filepath='src/system-alloc.cc' line='158' column='1' hash='fa4add7b8dac04ae' id='type-id-1706'>
      <!-- class SysAllocator -->
      <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1224'/>
      <member-function access='private' vtable-offset='2'>
        <!-- void* MmapSysAllocator::Alloc(size_t, size_t*, size_t) -->
        <function-decl name='Alloc' mangled-name='_ZN16MmapSysAllocator5AllocEmPmm' filepath='src/system-alloc.cc' line='274' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16MmapSysAllocator5AllocEmPmm' hash='dbc951d0957cd899'>
          <!-- implicit parameter of type 'MmapSysAllocator*' -->
          <parameter type-id='type-id-1707' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-319'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void* -->
          <return type-id='type-id-56'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class SbrkSysAllocator -->
    <class-decl name='SbrkSysAllocator' visibility='default' size-in-bits='64' filepath='src/system-alloc.cc' line='150' column='1' hash='35bb7d7b7f898704' id='type-id-1708'>
      <!-- class SysAllocator -->
      <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1224'/>
      <member-function access='private' vtable-offset='2'>
        <!-- void* SbrkSysAllocator::Alloc(size_t, size_t*, size_t) -->
        <function-decl name='Alloc' mangled-name='_ZN16SbrkSysAllocator5AllocEmPmm' filepath='src/system-alloc.cc' line='203' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16SbrkSysAllocator5AllocEmPmm' hash='dbc951d0957cd899'>
          <!-- implicit parameter of type 'SbrkSysAllocator*' -->
          <parameter type-id='type-id-1709' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-319'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void* -->
          <return type-id='type-id-56'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- const char*[2] -->
    <array-type-def dimensions='1' type-id='type-id-60' size-in-bits='128' hash='7b83e51ec5a5bc42' id='type-id-1702'>
      <!-- <anonymous range>[2] -->
      <subrange length='2' lower-bound='0' upper-bound='1' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='95f31efc53154467' id='type-id-1699'/>
    </array-type-def>
    <!-- DefaultSysAllocator* -->
    <pointer-type-def type-id='type-id-1701' size-in-bits='64' hash='8367a917126bc402' id='type-id-1703'/>
    <!-- DefaultSysAllocator* const -->
    <qualified-type-def type-id='type-id-1703' const='yes' hash='eb87fb797e51cec5' id='type-id-1710'/>
    <!-- DevMemSysAllocator* -->
    <pointer-type-def type-id='type-id-1704' size-in-bits='64' hash='5786535bd06be6ba' id='type-id-1705'/>
    <!-- MmapSysAllocator* -->
    <pointer-type-def type-id='type-id-1706' size-in-bits='64' hash='1e6eeffcbc8be225' id='type-id-1707'/>
    <!-- MmapSysAllocator* const -->
    <qualified-type-def type-id='type-id-1707' const='yes' hash='7d43fae9b203c94d' id='type-id-1711'/>
    <!-- SbrkSysAllocator* -->
    <pointer-type-def type-id='type-id-1708' size-in-bits='64' hash='79bac1f0c4b0e917' id='type-id-1709'/>
    <!-- SbrkSysAllocator* const -->
    <qualified-type-def type-id='type-id-1709' const='yes' hash='de4f0f45b02deaa5' id='type-id-1712'/>
    <!-- SysAllocator* const -->
    <qualified-type-def type-id='type-id-1221' const='yes' hash='328e881353b7c703' id='type-id-1713'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
    </namespace-decl>
    <!-- SysAllocator* sys_alloc -->
    <var-decl name='sys_alloc' type-id='type-id-1221' mangled-name='sys_alloc' visibility='default' filepath='src/system-alloc.cc' line='124' column='1' elf-symbol-id='sys_alloc'/>
    <!-- size_t TCMalloc_SystemTaken -->
    <var-decl name='TCMalloc_SystemTaken' type-id='type-id-61' mangled-name='TCMalloc_SystemTaken' visibility='default' filepath='src/system-alloc.cc' line='127' column='1' elf-symbol-id='TCMalloc_SystemTaken'/>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead'>
      <!-- int32 FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_malloc_devmem_start -->
      <var-decl name='FLAGS_malloc_devmem_start' type-id='type-id-81' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead25FLAGS_malloc_devmem_startE' visibility='default' filepath='src/system-alloc.cc' line='130' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead25FLAGS_malloc_devmem_startE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_nomalloc_devmem_start -->
      <var-decl name='FLAGS_nomalloc_devmem_start' type-id='type-id-82' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead27FLAGS_nomalloc_devmem_startE' visibility='default' filepath='src/system-alloc.cc' line='133' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead27FLAGS_nomalloc_devmem_startE'/>
      <!-- int32 FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_malloc_devmem_limit -->
      <var-decl name='FLAGS_malloc_devmem_limit' type-id='type-id-81' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead25FLAGS_malloc_devmem_limitE' visibility='default' filepath='src/system-alloc.cc' line='134' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead25FLAGS_malloc_devmem_limitE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_nomalloc_devmem_limit -->
      <var-decl name='FLAGS_nomalloc_devmem_limit' type-id='type-id-82' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead27FLAGS_nomalloc_devmem_limitE' visibility='default' filepath='src/system-alloc.cc' line='137' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead27FLAGS_nomalloc_devmem_limitE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead'>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_malloc_skip_sbrk -->
      <var-decl name='FLAGS_malloc_skip_sbrk' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead22FLAGS_malloc_skip_sbrkE' visibility='default' filepath='src/system-alloc.cc' line='138' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead22FLAGS_malloc_skip_sbrkE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomalloc_skip_sbrk -->
      <var-decl name='FLAGS_nomalloc_skip_sbrk' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead24FLAGS_nomalloc_skip_sbrkE' visibility='default' filepath='src/system-alloc.cc' line='140' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead24FLAGS_nomalloc_skip_sbrkE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_malloc_skip_mmap -->
      <var-decl name='FLAGS_malloc_skip_mmap' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead22FLAGS_malloc_skip_mmapE' visibility='default' filepath='src/system-alloc.cc' line='141' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead22FLAGS_malloc_skip_mmapE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomalloc_skip_mmap -->
      <var-decl name='FLAGS_nomalloc_skip_mmap' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead24FLAGS_nomalloc_skip_mmapE' visibility='default' filepath='src/system-alloc.cc' line='143' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead24FLAGS_nomalloc_skip_mmapE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_malloc_disable_memory_release -->
      <var-decl name='FLAGS_malloc_disable_memory_release' type-id='type-id-59' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_malloc_disable_memory_releaseE' visibility='default' filepath='src/system-alloc.cc' line='144' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_malloc_disable_memory_releaseE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomalloc_disable_memory_release -->
      <var-decl name='FLAGS_nomalloc_disable_memory_release' type-id='type-id-82' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_nomalloc_disable_memory_releaseE' visibility='default' filepath='src/system-alloc.cc' line='147' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_nomalloc_disable_memory_releaseE'/>
    </namespace-decl>
    <!-- SysAllocator* tc_get_sysalloc_override(SysAllocator*) -->
    <function-decl name='tc_get_sysalloc_override' mangled-name='_Z24tc_get_sysalloc_overrideP12SysAllocator' filepath='src/system-alloc.cc' line='451' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z24tc_get_sysalloc_overrideP12SysAllocator' hash='0fabd85259d8d65c'>
      <!-- parameter of type 'SysAllocator*' -->
      <parameter type-id='type-id-1221' filepath='src/system-alloc.cc' line='451' column='1'/>
      <!-- SysAllocator* -->
      <return type-id='type-id-1221'/>
    </function-decl>
    <!-- void InitSystemAllocators() -->
    <function-decl name='InitSystemAllocators' mangled-name='_Z20InitSystemAllocatorsv' filepath='src/system-alloc.cc' line='457' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z20InitSystemAllocatorsv' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* TCMalloc_SystemAlloc(size_t, size_t*, size_t) -->
    <function-decl name='TCMalloc_SystemAlloc' mangled-name='_Z20TCMalloc_SystemAllocmPmm' filepath='src/system-alloc.cc' line='480' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z20TCMalloc_SystemAllocmPmm' hash='dbc951d0957cd899'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/system-alloc.cc' line='480' column='1'/>
      <!-- parameter of type 'size_t*' -->
      <parameter type-id='type-id-319' filepath='src/system-alloc.cc' line='480' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/system-alloc.cc' line='481' column='1'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- bool TCMalloc_SystemRelease(void*, size_t) -->
    <function-decl name='TCMalloc_SystemRelease' mangled-name='_Z22TCMalloc_SystemReleasePvm' filepath='src/system-alloc.cc' line='510' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z22TCMalloc_SystemReleasePvm' hash='7e544b18f5e89a62'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/system-alloc.cc' line='510' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/system-alloc.cc' line='510' column='1'/>
      <!-- bool -->
      <return type-id='type-id-59'/>
    </function-decl>
    <!-- void TCMalloc_SystemCommit(void*, size_t) -->
    <function-decl name='TCMalloc_SystemCommit' mangled-name='_Z21TCMalloc_SystemCommitPvm' filepath='src/system-alloc.cc' line='548' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z21TCMalloc_SystemCommitPvm' hash='e0055d99adb0e173'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/system-alloc.cc' line='548' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/system-alloc.cc' line='548' column='1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void (void*, size_t) -->
    <function-type size-in-bits='64' hash='e0055d99adb0e173' id='type-id-1714'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/system-alloc.cc' line='548' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/system-alloc.cc' line='548' column='1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/tcmalloc.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- AtomicWord[8] -->
    <array-type-def dimensions='1' type-id='type-id-1329' size-in-bits='512' hash='ecac7e1584aeceef' id='type-id-1330'>
      <!-- <anonymous range>[8] -->
      <subrange length='8' lower-bound='0' upper-bound='7' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='6e87a8ff484907ad' id='type-id-247'/>
    </array-type-def>
    <!-- bool -->
    <type-decl name='bool' size-in-bits='8' hash='5ba96bb22f4237fb' id='type-id-59'/>
    <!-- char -->
    <type-decl name='char' size-in-bits='8' hash='65b2d157027b431a' id='type-id-82'/>
    <!-- char[1] -->
    <array-type-def dimensions='1' type-id='type-id-82' size-in-bits='8' hash='f7aed1c6cc6e7b3c' id='type-id-174'>
      <!-- <anonymous range>[1] -->
      <subrange length='1' lower-bound='0' upper-bound='0' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='eba0a2b392137dcb' id='type-id-1715'/>
    </array-type-def>
    <!-- char[20] -->
    <array-type-def dimensions='1' type-id='type-id-82' size-in-bits='160' hash='99641d293d1da856' id='type-id-177'>
      <!-- <anonymous range>[20] -->
      <subrange length='20' lower-bound='0' upper-bound='19' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='1ca9e41140ea49be' id='type-id-1344'/>
    </array-type-def>
    <!-- char[48] -->
    <array-type-def dimensions='1' type-id='type-id-82' size-in-bits='384' hash='46395ec6e3501f5e' id='type-id-1716'>
      <!-- <anonymous range>[48] -->
      <subrange length='48' lower-bound='0' upper-bound='47' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='c984f699f4a9c7be' id='type-id-1717'/>
    </array-type-def>
    <!-- char[4] -->
    <array-type-def dimensions='1' type-id='type-id-82' size-in-bits='32' hash='932523ac2c3bfb84' id='type-id-1718'>
      <!-- <anonymous range>[4] -->
      <subrange length='4' lower-bound='0' upper-bound='3' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='cee611f4a73e486c' id='type-id-360'/>
    </array-type-def>
    <!-- class MallocHook -->
    <class-decl name='MallocHook' visibility='default' size-in-bits='8' filepath='./src/gperftools/malloc_hook.h' line='98' column='1' hash='8ac619cb0b96adc9' id='type-id-1719'>
      <member-type access='private'>
        <!-- typedef MallocHook_DeleteHook MallocHook::DeleteHook -->
        <typedef-decl name='DeleteHook' type-id='type-id-371' size-in-bits='64' filepath='./src/gperftools/malloc_hook.h' line='113' column='1' hash='fd7a63c0c6c822c4' id='type-id-1720'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_MmapHook MallocHook::MmapHook -->
        <typedef-decl name='MmapHook' type-id='type-id-373' size-in-bits='64' filepath='./src/gperftools/malloc_hook.h' line='168' column='1' hash='fd7a63c0c6c822c4' id='type-id-1721'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_MmapReplacement MallocHook::MmapReplacement -->
        <typedef-decl name='MmapReplacement' type-id='type-id-1269' size-in-bits='64' filepath='./src/gperftools/malloc_hook.h' line='150' column='1' hash='fd7a63c0c6c822c4' id='type-id-1722'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_MremapHook MallocHook::MremapHook -->
        <typedef-decl name='MremapHook' type-id='type-id-1271' size-in-bits='64' filepath='./src/gperftools/malloc_hook.h' line='214' column='1' hash='fd7a63c0c6c822c4' id='type-id-1723'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_MunmapHook MallocHook::MunmapHook -->
        <typedef-decl name='MunmapHook' type-id='type-id-1272' size-in-bits='64' filepath='./src/gperftools/malloc_hook.h' line='204' column='1' hash='fd7a63c0c6c822c4' id='type-id-1724'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_MunmapReplacement MallocHook::MunmapReplacement -->
        <typedef-decl name='MunmapReplacement' type-id='type-id-1274' size-in-bits='64' filepath='./src/gperftools/malloc_hook.h' line='192' column='1' hash='fd7a63c0c6c822c4' id='type-id-1725'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_NewHook MallocHook::NewHook -->
        <typedef-decl name='NewHook' type-id='type-id-374' size-in-bits='64' filepath='./src/gperftools/malloc_hook.h' line='102' column='1' hash='fd7a63c0c6c822c4' id='type-id-1726'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_PreMmapHook MallocHook::PreMmapHook -->
        <typedef-decl name='PreMmapHook' type-id='type-id-1276' size-in-bits='64' filepath='./src/gperftools/malloc_hook.h' line='126' column='1' hash='fd7a63c0c6c822c4' id='type-id-1727'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_PreSbrkHook MallocHook::PreSbrkHook -->
        <typedef-decl name='PreSbrkHook' type-id='type-id-1278' size-in-bits='64' filepath='./src/gperftools/malloc_hook.h' line='234' column='1' hash='fd7a63c0c6c822c4' id='type-id-1728'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_SbrkHook MallocHook::SbrkHook -->
        <typedef-decl name='SbrkHook' type-id='type-id-376' size-in-bits='64' filepath='./src/gperftools/malloc_hook.h' line='247' column='1' hash='fd7a63c0c6c822c4' id='type-id-1729'/>
      </member-type>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokeDeleteHookSlow() -->
        <function-decl name='InvokeDeleteHookSlow' mangled-name='_ZN10MallocHook20InvokeDeleteHookSlowEPKv' filepath='src/malloc_hook.cc' line='497' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook20InvokeDeleteHookSlowEPKv' hash='7f32ffea222edbe7'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokePreMmapHookSlow(size_t, int, int, int, off_t) -->
        <function-decl name='InvokePreMmapHookSlow' mangled-name='_ZN10MallocHook21InvokePreMmapHookSlowEPKvmiiil' filepath='src/malloc_hook.cc' line='501' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook21InvokePreMmapHookSlowEPKvmiiil' hash='d89e6f5baae5273c'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'typedef off_t' -->
          <parameter type-id='type-id-345'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokeMmapHookSlow(void*, size_t, int, int, int, off_t) -->
        <function-decl name='InvokeMmapHookSlow' mangled-name='_ZN10MallocHook18InvokeMmapHookSlowEPKvS1_miiil' filepath='src/malloc_hook.cc' line='511' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook18InvokeMmapHookSlowEPKvS1_miiil' hash='d89e6f5baae5273c'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'typedef off_t' -->
          <parameter type-id='type-id-345'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool MallocHook::InvokeMmapReplacementSlow(size_t, int, int, int, off_t, void**) -->
        <function-decl name='InvokeMmapReplacementSlow' mangled-name='_ZN10MallocHook25InvokeMmapReplacementSlowEPKvmiiilPPv' filepath='src/malloc_hook.cc' line='522' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook25InvokeMmapReplacementSlowEPKvmiiilPPv' hash='95d1923c57dbb4c3'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'typedef off_t' -->
          <parameter type-id='type-id-345'/>
          <!-- parameter of type 'void**' -->
          <parameter type-id='type-id-184'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool MallocHook::InvokeMunmapReplacementSlow(size_t, int*) -->
        <function-decl name='InvokeMunmapReplacementSlow' mangled-name='_ZN10MallocHook27InvokeMunmapReplacementSlowEPKvmPi' filepath='src/malloc_hook.cc' line='537' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook27InvokeMunmapReplacementSlowEPKvmPi' hash='6a07831869d8d6cc'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'int*' -->
          <parameter type-id='type-id-1218'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokeMremapHookSlow(void*, size_t, size_t, int, void*) -->
        <function-decl name='InvokeMremapHookSlow' mangled-name='_ZN10MallocHook20InvokeMremapHookSlowEPKvS1_mmiS1_' filepath='src/malloc_hook.cc' line='543' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook20InvokeMremapHookSlowEPKvS1_mmiS1_' hash='d8f551d99ba6f26a'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokePreSbrkHookSlow() -->
        <function-decl name='InvokePreSbrkHookSlow' mangled-name='_ZN10MallocHook21InvokePreSbrkHookSlowEl' filepath='src/malloc_hook.cc' line='553' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook21InvokePreSbrkHookSlowEl' hash='52c0efb08d2aa513'>
          <!-- parameter of type 'typedef ptrdiff_t' -->
          <parameter type-id='type-id-346'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokeSbrkHookSlow(ptrdiff_t) -->
        <function-decl name='InvokeSbrkHookSlow' mangled-name='_ZN10MallocHook18InvokeSbrkHookSlowEPKvl' filepath='src/malloc_hook.cc' line='557' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook18InvokeSbrkHookSlowEPKvl' hash='52c0efb08d2aa513'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef ptrdiff_t' -->
          <parameter type-id='type-id-346'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokeMunmapHookSlow(size_t) -->
        <function-decl name='InvokeMunmapHookSlow' mangled-name='_ZN10MallocHook20InvokeMunmapHookSlowEPKvm' filepath='src/malloc_hook.cc' line='533' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook20InvokeMunmapHookSlowEPKvm' hash='e0055d99adb0e173'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokeNewHookSlow(size_t) -->
        <function-decl name='InvokeNewHookSlow' mangled-name='_ZN10MallocHook17InvokeNewHookSlowEPKvm' filepath='src/malloc_hook.cc' line='493' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook17InvokeNewHookSlowEPKvm' hash='e0055d99adb0e173'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- int MallocHook::UnhookedMUnmap(size_t) -->
        <function-decl name='UnhookedMUnmap' mangled-name='_ZN10MallocHook14UnhookedMUnmapEPvm' filepath='src/malloc_hook_mmap_linux.h' line='228' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook14UnhookedMUnmapEPvm' hash='b6a97d07f8261bc0'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- int -->
          <return type-id='type-id-1'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void* MallocHook::UnhookedMMap(size_t, int, int, int, off_t) -->
        <function-decl name='UnhookedMMap' mangled-name='_ZN10MallocHook12UnhookedMMapEPvmiiil' filepath='src/malloc_hook_mmap_linux.h' line='218' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook12UnhookedMMapEPvmiiil' hash='d89e6f5baae5273c'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'typedef off_t' -->
          <parameter type-id='type-id-345'/>
          <!-- void* -->
          <return type-id='type-id-56'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class PackedCache<35, long unsigned int> -->
    <class-decl name='PackedCache&lt;35, long unsigned int&gt;' visibility='default' size-in-bits='4194304' filepath='src/packed-cache-inl.h' line='135' column='1' hash='3e573c39d771b111' id='type-id-1730'>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- volatile unsigned long int PackedCache<35, long unsigned int>::array_[65536] -->
        <var-decl name='array_' type-id='type-id-1731' visibility='default' filepath='src/packed-cache-inl.h' line='234' column='1'/>
      </data-member>
    </class-decl>
    <!-- class SpinLock -->
    <class-decl name='SpinLock' visibility='default' size-in-bits='32' filepath='./src/base/spinlock.h' line='48' column='1' hash='d0a4db46cca7dc1c' id='type-id-102'>
      <member-type access='private'>
        <!-- enum {kSpinLockFree=0, } -->
        <enum-decl name='__anonymous_enum__22' size-in-bits='32' alignment-in-bits='32' is-anonymous='yes' filepath='./src/base/spinlock.h' line='114' column='1' hash='c71e1399719aa41e#4' id='type-id-1732'>
          <underlying-type type-id='type-id-93'/>
          <enumerator name='kSpinLockFree' value='0'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- enum {kSpinLockHeld=1, } -->
        <enum-decl name='__anonymous_enum__23' size-in-bits='32' alignment-in-bits='32' is-anonymous='yes' filepath='./src/base/spinlock.h' line='115' column='1' hash='2368516b70905234#5' id='type-id-1733'>
          <underlying-type type-id='type-id-93'/>
          <enumerator name='kSpinLockHeld' value='1'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- enum {kSpinLockSleeper=2, } -->
        <enum-decl name='__anonymous_enum__30' size-in-bits='32' alignment-in-bits='32' is-anonymous='yes' filepath='./src/base/spinlock.h' line='116' column='1' hash='5ea4435182185367#6' id='type-id-1734'>
          <underlying-type type-id='type-id-93'/>
          <enumerator name='kSpinLockSleeper' value='2'/>
        </enum-decl>
      </member-type>
      <data-member access='public' static='yes'>
        <!-- static const base::LinkerInitialized SpinLock::LINKER_INITIALIZED -->
        <var-decl name='LINKER_INITIALIZED' type-id='type-id-119' mangled-name='_ZN8SpinLock18LINKER_INITIALIZEDE' visibility='default' filepath='src/base/spinlock.cc' line='55' column='1' elf-symbol-id='_ZN8SpinLock18LINKER_INITIALIZEDE'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- volatile Atomic32 SpinLock::lockword_ -->
        <var-decl name='lockword_' type-id='type-id-1381' visibility='default' filepath='src/base/spinlock.h' line='118' column='1'/>
      </data-member>
      <member-function access='private'>
        <!-- Atomic32 SpinLock::SpinLoop(int64, Atomic32*) -->
        <function-decl name='SpinLoop' mangled-name='_ZN8SpinLock8SpinLoopElPi' filepath='src/base/spinlock.cc' line='82' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8SpinLock8SpinLoopElPi' hash='745054de67770bc9'>
          <!-- implicit parameter of type 'SpinLock*' -->
          <parameter type-id='type-id-104' is-artificial='yes'/>
          <!-- parameter of type 'typedef int64' -->
          <parameter type-id='type-id-105'/>
          <!-- parameter of type 'Atomic32*' -->
          <parameter type-id='type-id-106'/>
          <!-- typedef Atomic32 -->
          <return type-id='type-id-107'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void SpinLock::SlowUnlock(uint64) -->
        <function-decl name='SlowUnlock' mangled-name='_ZN8SpinLock10SlowUnlockEm' filepath='src/base/spinlock.cc' line='152' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8SpinLock10SlowUnlockEm' hash='e0055d99adb0e173'>
          <!-- implicit parameter of type 'SpinLock*' -->
          <parameter type-id='type-id-104' is-artificial='yes'/>
          <!-- parameter of type 'typedef uint64' -->
          <parameter type-id='type-id-116'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void SpinLock::SlowLock() -->
        <function-decl name='SlowLock' mangled-name='_ZN8SpinLock8SlowLockEv' filepath='src/base/spinlock.cc' line='95' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8SpinLock8SlowLockEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'SpinLock*' -->
          <parameter type-id='type-id-104' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class SpinLockHolder -->
    <class-decl name='SpinLockHolder' visibility='default' size-in-bits='64' filepath='src/base/spinlock.h' line='130' column='1' hash='267e604616d8837b' id='type-id-1735'>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- SpinLock* SpinLockHolder::lock_ -->
        <var-decl name='lock_' type-id='type-id-104' visibility='default' filepath='src/base/spinlock.h' line='132' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- SpinLockHolder::SpinLockHolder(SpinLock*) -->
        <function-decl name='SpinLockHolder' mangled-name='_ZN14SpinLockHolderC2EP8SpinLock' filepath='src/base/spinlock.h' line='134' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14SpinLockHolderC2EP8SpinLock' hash='425cf40bd01acdfd'>
          <!-- implicit parameter of type 'SpinLockHolder*' -->
          <parameter type-id='type-id-1736' is-artificial='yes'/>
          <!-- parameter of type 'SpinLock*' -->
          <parameter type-id='type-id-104'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- SpinLockHolder::~SpinLockHolder() -->
        <function-decl name='~SpinLockHolder' mangled-name='_ZN14SpinLockHolderD1Ev' filepath='src/base/spinlock.h' line='140' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14SpinLockHolderD1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'SpinLockHolder*' -->
          <parameter type-id='type-id-1736' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- SpinLockHolder::SpinLockHolder(SpinLock*) -->
        <function-decl name='SpinLockHolder' mangled-name='_ZN14SpinLockHolderC2EP8SpinLock' filepath='src/base/spinlock.h' line='134' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14SpinLockHolderC2EP8SpinLock' hash='425cf40bd01acdfd'>
          <!-- implicit parameter of type 'SpinLockHolder*' -->
          <parameter type-id='type-id-1736' is-artificial='yes'/>
          <!-- parameter of type 'SpinLock*' -->
          <parameter type-id='type-id-104'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- SpinLockHolder::~SpinLockHolder() -->
        <function-decl name='~SpinLockHolder' mangled-name='_ZN14SpinLockHolderD1Ev' filepath='src/base/spinlock.h' line='140' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14SpinLockHolderD1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'SpinLockHolder*' -->
          <parameter type-id='type-id-1736' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- SpinLockHolder::~SpinLockHolder() -->
        <function-decl name='~SpinLockHolder' mangled-name='_ZN14SpinLockHolderD1Ev' filepath='src/base/spinlock.h' line='140' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14SpinLockHolderD1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'SpinLockHolder*' -->
          <parameter type-id='type-id-1736' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class TCMallocGuard -->
    <class-decl name='TCMallocGuard' visibility='default' size-in-bits='8' filepath='src/tcmalloc_guard.h' line='43' column='1' hash='f6593a2bfae5cc89' id='type-id-1737'>
      <member-function access='private' destructor='yes'>
        <!-- TCMallocGuard::~TCMallocGuard() -->
        <function-decl name='~TCMallocGuard' mangled-name='_ZN13TCMallocGuardD1Ev' filepath='src/tcmalloc.cc' line='934' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13TCMallocGuardD1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'TCMallocGuard*' -->
          <parameter type-id='type-id-1738' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- TCMallocGuard::TCMallocGuard() -->
        <function-decl name='TCMallocGuard' mangled-name='_ZN13TCMallocGuardC1Ev' filepath='src/tcmalloc.cc' line='914' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13TCMallocGuardC1Ev' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'TCMallocGuard*' -->
          <parameter type-id='type-id-1738' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class TCMallocImplementation -->
    <class-decl name='TCMallocImplementation' visibility='default' size-in-bits='128' filepath='src/tcmalloc.cc' line='562' column='1' hash='e02981392d5463d0' id='type-id-1739'>
      <!-- class MallocExtension -->
      <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1213'/>
      <member-type access='private'>
        <!-- typedef void (void*, const base::MallocRange*) TCMallocImplementation::RangeFunction -->
        <typedef-decl name='RangeFunction' type-id='type-id-1216' size-in-bits='64' filepath='./src/gperftools/malloc_extension.h' line='143' column='1' id='type-id-1740'/>
      </member-type>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- size_t TCMallocImplementation::extra_bytes_released_ -->
        <var-decl name='extra_bytes_released_' type-id='type-id-61' visibility='default' filepath='src/tcmalloc.cc' line='570' column='1'/>
      </data-member>
      <member-function access='private' vtable-offset='7'>
        <!-- void TCMallocImplementation::GetStats(char*, int) -->
        <function-decl name='GetStats' mangled-name='_ZN22TCMallocImplementation8GetStatsEPci' filepath='src/tcmalloc.cc' line='577' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation8GetStatsEPci' hash='64137bddd2d8bd37'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- parameter of type 'char*' -->
          <parameter type-id='type-id-130'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='8'>
        <!-- void TCMallocImplementation::GetHeapSample(MallocExtensionWriter*) -->
        <function-decl name='GetHeapSample' mangled-name='_ZN22TCMallocImplementation13GetHeapSampleEPSs' filepath='src/tcmalloc.cc' line='590' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation13GetHeapSampleEPSs' hash='d54783c3b9c5113e'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- parameter of type 'MallocExtensionWriter*' -->
          <parameter type-id='type-id-1219'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='10'>
        <!-- void TCMallocImplementation::Ranges(void*, TCMallocImplementation::RangeFunction*) -->
        <function-decl name='Ranges' mangled-name='_ZN22TCMallocImplementation6RangesEPvPFvS0_PKN4base11MallocRangeEE' filepath='src/tcmalloc.cc' line='622' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation6RangesEPvPFvS0_PKN4base11MallocRangeEE' hash='5c5906b7a5222b20'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- parameter of type 'TCMallocImplementation::RangeFunction*' -->
          <parameter type-id='type-id-1742'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='11'>
        <!-- bool TCMallocImplementation::GetNumericProperty(const char*, size_t*) -->
        <function-decl name='GetNumericProperty' mangled-name='_ZN22TCMallocImplementation18GetNumericPropertyEPKcPm' filepath='src/tcmalloc.cc' line='626' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation18GetNumericPropertyEPKcPm' hash='288882c7124c4c14'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-319'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='12'>
        <!-- bool TCMallocImplementation::SetNumericProperty(const char*, size_t) -->
        <function-decl name='SetNumericProperty' mangled-name='_ZN22TCMallocImplementation18SetNumericPropertyEPKcm' filepath='src/tcmalloc.cc' line='711' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation18SetNumericPropertyEPKcm' hash='8c4988b107419e4d'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- bool -->
          <return type-id='type-id-59'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='13'>
        <!-- void TCMallocImplementation::MarkThreadIdle() -->
        <function-decl name='MarkThreadIdle' mangled-name='_ZN22TCMallocImplementation14MarkThreadIdleEv' filepath='src/tcmalloc.cc' line='728' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation14MarkThreadIdleEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='14'>
        <!-- void TCMallocImplementation::MarkThreadBusy() -->
        <function-decl name='MarkThreadBusy' mangled-name='_ZN22TCMallocImplementation14MarkThreadBusyEv' filepath='src/tcmalloc.cc' line='1537' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation14MarkThreadBusyEv' hash='7f32ffea222edbe7'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='15'>
        <!-- SysAllocator* TCMallocImplementation::GetSystemAllocator() -->
        <function-decl name='GetSystemAllocator' mangled-name='_ZN22TCMallocImplementation18GetSystemAllocatorEv' filepath='src/tcmalloc.cc' line='734' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation18GetSystemAllocatorEv' hash='727f10b9ad2848d9'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- SysAllocator* -->
          <return type-id='type-id-1221'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='16'>
        <!-- void TCMallocImplementation::SetSystemAllocator(SysAllocator*) -->
        <function-decl name='SetSystemAllocator' mangled-name='_ZN22TCMallocImplementation18SetSystemAllocatorEP12SysAllocator' filepath='src/tcmalloc.cc' line='739' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation18SetSystemAllocatorEP12SysAllocator' hash='727f10b9ad2848d9'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-1221'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='17'>
        <!-- void TCMallocImplementation::ReleaseToSystem(size_t) -->
        <function-decl name='ReleaseToSystem' mangled-name='_ZN22TCMallocImplementation15ReleaseToSystemEm' filepath='src/tcmalloc.cc' line='744' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation15ReleaseToSystemEm' hash='e0055d99adb0e173'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='19'>
        <!-- void TCMallocImplementation::SetMemoryReleaseRate(double) -->
        <function-decl name='SetMemoryReleaseRate' mangled-name='_ZN22TCMallocImplementation20SetMemoryReleaseRateEd' filepath='src/tcmalloc.cc' line='769' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation20SetMemoryReleaseRateEd' hash='14e245f4052d89de'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- parameter of type 'double' -->
          <parameter type-id='type-id-2'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='20'>
        <!-- double TCMallocImplementation::GetMemoryReleaseRate() -->
        <function-decl name='GetMemoryReleaseRate' mangled-name='_ZN22TCMallocImplementation20GetMemoryReleaseRateEv' filepath='src/tcmalloc.cc' line='773' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation20GetMemoryReleaseRateEv' hash='14e245f4052d89de'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- double -->
          <return type-id='type-id-2'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='21'>
        <!-- size_t TCMallocImplementation::GetEstimatedAllocatedSize(size_t) -->
        <function-decl name='GetEstimatedAllocatedSize' mangled-name='_ZN22TCMallocImplementation25GetEstimatedAllocatedSizeEm' filepath='src/tcmalloc.cc' line='776' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation25GetEstimatedAllocatedSizeEm' hash='91495cdf6321a116'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-61'/>
          <!-- typedef size_t -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='22'>
        <!-- size_t TCMallocImplementation::GetAllocatedSize(void*) -->
        <function-decl name='GetAllocatedSize' mangled-name='_ZN22TCMallocImplementation16GetAllocatedSizeEPKv' filepath='src/tcmalloc.cc' line='1529' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation16GetAllocatedSizeEPKv' hash='e0055d99adb0e173'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- typedef size_t -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='23'>
        <!-- MallocExtension::Ownership TCMallocImplementation::GetOwnership(void*) -->
        <function-decl name='GetOwnership' mangled-name='_ZN22TCMallocImplementation12GetOwnershipEPKv' filepath='src/tcmalloc.cc' line='794' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation12GetOwnershipEPKv' hash='dcd29204c78d6e46'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-56'/>
          <!-- enum MallocExtension::Ownership -->
          <return type-id='type-id-1222'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='24'>
        <!-- void TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*) -->
        <function-decl name='GetFreeListSizes' mangled-name='_ZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EE' filepath='src/tcmalloc.cc' line='810' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EE' hash='1b5bd2975dcbb509'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
          <parameter type-id='type-id-1223'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='25'>
        <!-- void** TCMallocImplementation::ReadStackTraces(int*) -->
        <function-decl name='ReadStackTraces' mangled-name='_ZN22TCMallocImplementation15ReadStackTracesEPi' filepath='src/tcmalloc.cc' line='605' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation15ReadStackTracesEPi' hash='e3255c578f5fdd8b'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- parameter of type 'int*' -->
          <parameter type-id='type-id-1218'/>
          <!-- void** -->
          <return type-id='type-id-184'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='26'>
        <!-- void** TCMallocImplementation::ReadHeapGrowthStackTraces() -->
        <function-decl name='ReadHeapGrowthStackTraces' mangled-name='_ZN22TCMallocImplementation25ReadHeapGrowthStackTracesEv' filepath='src/tcmalloc.cc' line='618' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation25ReadHeapGrowthStackTracesEv' hash='33cabb503c62c709'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1741' is-artificial='yes'/>
          <!-- void** -->
          <return type-id='type-id-184'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class TCMalloc_PageMap3<35> -->
    <class-decl name='TCMalloc_PageMap3&lt;35&gt;' visibility='default' size-in-bits='128' filepath='src/pagemap.h' line='209' column='1' hash='699a187e2cb68c12' id='type-id-1743'>
      <member-type access='private'>
        <!-- struct TCMalloc_PageMap3<35>::Leaf -->
        <class-decl name='Leaf' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1744'/>
      </member-type>
      <member-type access='private'>
        <!-- struct TCMalloc_PageMap3<35>::Node -->
        <class-decl name='Node' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-167'/>
      </member-type>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- TCMalloc_PageMap3<35>::Node* TCMalloc_PageMap3<35>::root_ -->
        <var-decl name='root_' type-id='type-id-1745' visibility='default' filepath='src/pagemap.h' line='229' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- void* (* TCMalloc_PageMap3<35>::allocator_)(unsigned long int) -->
        <var-decl name='allocator_' type-id='type-id-254' visibility='default' filepath='src/pagemap.h' line='230' column='1'/>
      </data-member>
    </class-decl>
    <!-- class TCMalloc_Printer -->
    <class-decl name='TCMalloc_Printer' visibility='default' size-in-bits='128' filepath='src/internal_logging.h' line='126' column='1' hash='5ea28e719623bcf5' id='type-id-1746'>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- char* TCMalloc_Printer::buf_ -->
        <var-decl name='buf_' type-id='type-id-130' visibility='default' filepath='src/internal_logging.h' line='128' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- int TCMalloc_Printer::left_ -->
        <var-decl name='left_' type-id='type-id-1' visibility='default' filepath='src/internal_logging.h' line='129' column='1'/>
      </data-member>
      <member-function access='private'>
        <!-- void TCMalloc_Printer::printf(const char*, ...) -->
        <function-decl name='printf' mangled-name='_ZN16TCMalloc_Printer6printfEPKcz' filepath='src/internal_logging.cc' line='177' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16TCMalloc_Printer6printfEPKcz' hash='53885bde0aa65efe'>
          <!-- implicit parameter of type 'TCMalloc_Printer*' -->
          <parameter type-id='type-id-1747' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-60'/>
          <parameter is-variadic='yes'/>
          <!-- void -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- double -->
    <type-decl name='double' size-in-bits='64' hash='e9e9b320886d9aa6' id='type-id-2'/>
    <!-- float -->
    <type-decl name='float' size-in-bits='32' hash='d7ec3bf03d3c5690' id='type-id-1748'/>
    <!-- int -->
    <type-decl name='int' size-in-bits='32' hash='09d17c08f594edc7' id='type-id-1'/>
    <!-- int64[128] -->
    <array-type-def dimensions='1' type-id='type-id-105' size-in-bits='8192' hash='f0958721582396bd' id='type-id-1749'>
      <!-- <anonymous range>[128] -->
      <subrange length='128' lower-bound='0' upper-bound='127' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='6d1a6a21feae6dd2' id='type-id-1750'/>
    </array-type-def>
    <!-- int[88] -->
    <array-type-def dimensions='1' type-id='type-id-1' size-in-bits='2816' hash='6629d7d29e062ca0' id='type-id-1751'>
      <!-- <anonymous range>[88] -->
      <subrange length='88' lower-bound='0' upper-bound='87' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='6b4bb579b7303ac8' id='type-id-1606'/>
    </array-type-def>
    <!-- long double -->
    <type-decl name='long double' size-in-bits='128' hash='2a9bbfe8bb0475f1#2' id='type-id-1752'/>
    <!-- long int -->
    <type-decl name='long int' size-in-bits='64' hash='b119fe0931d2ee10#2' id='type-id-179'/>
    <!-- long long int -->
    <type-decl name='long long int' size-in-bits='64' hash='5ae7f9eec1fc43d6#3' id='type-id-180'/>
    <!-- signed char -->
    <type-decl name='signed char' size-in-bits='8' hash='3c595c3350588f18' id='type-id-173'/>
    <!-- size_t[88] -->
    <array-type-def dimensions='1' type-id='type-id-61' size-in-bits='5632' hash='e43b388ce4c0f1fd' id='type-id-1753'>
      <!-- <anonymous range>[88] -->
      <subrange length='88' lower-bound='0' upper-bound='87' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='6b4bb579b7303ac8' id='type-id-1606'/>
    </array-type-def>
    <!-- struct TCMallocStats -->
    <class-decl name='TCMallocStats' is-struct='yes' visibility='default' size-in-bits='512' filepath='src/tcmalloc.cc' line='295' column='1' hash='ca5e26f4a9454882' id='type-id-1754'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- uint64_t TCMallocStats::thread_bytes -->
        <var-decl name='thread_bytes' type-id='type-id-16' visibility='default' filepath='src/tcmalloc.cc' line='296' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- uint64_t TCMallocStats::central_bytes -->
        <var-decl name='central_bytes' type-id='type-id-16' visibility='default' filepath='src/tcmalloc.cc' line='297' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- uint64_t TCMallocStats::transfer_bytes -->
        <var-decl name='transfer_bytes' type-id='type-id-16' visibility='default' filepath='src/tcmalloc.cc' line='298' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- uint64_t TCMallocStats::metadata_bytes -->
        <var-decl name='metadata_bytes' type-id='type-id-16' visibility='default' filepath='src/tcmalloc.cc' line='299' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- tcmalloc::PageHeap::Stats TCMallocStats::pageheap -->
        <var-decl name='pageheap' type-id='type-id-1755' visibility='default' filepath='src/tcmalloc.cc' line='300' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct _IO_marker -->
    <class-decl name='_IO_marker' is-struct='yes' visibility='default' size-in-bits='192' filepath='/usr/include/libio.h' line='186' column='1' hash='263be23b1e79201c' id='type-id-1756'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- _IO_marker* _IO_marker::_next -->
        <var-decl name='_next' type-id='type-id-170' visibility='default' filepath='/usr/include/libio.h' line='187' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- _IO_FILE* _IO_marker::_sbuf -->
        <var-decl name='_sbuf' type-id='type-id-171' visibility='default' filepath='/usr/include/libio.h' line='188' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- int _IO_marker::_pos -->
        <var-decl name='_pos' type-id='type-id-1' visibility='default' filepath='/usr/include/libio.h' line='192' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct __mbstate_t -->
    <class-decl name='__mbstate_t' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/include/wchar.h' line='84' column='1' hash='e97fe294ce223fec' id='type-id-1757'>
      <member-type access='public'>
        <!-- union {unsigned int __wch; char __wchb[4];} -->
        <union-decl name='__anonymous_union__' visibility='default' size-in-bits='32' is-anonymous='yes' filepath='/usr/include/wchar.h' line='87' column='1' hash='db9d16b710a8f305#3' id='type-id-1758'>
          <data-member access='public'>
            <!-- unsigned int __wch -->
            <var-decl name='__wch' type-id='type-id-1440' visibility='default' filepath='/usr/include/wchar.h' line='89' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- char __wchb[4] -->
            <var-decl name='__wchb' type-id='type-id-1718' visibility='default' filepath='/usr/include/wchar.h' line='93' column='1'/>
          </data-member>
        </union-decl>
      </member-type>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int __mbstate_t::__count -->
        <var-decl name='__count' type-id='type-id-1' visibility='default' filepath='/usr/include/wchar.h' line='85' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- union {unsigned int __wch; char __wchb[4];} __mbstate_t::__value -->
        <var-decl name='__value' type-id='type-id-1758' visibility='default' filepath='/usr/include/wchar.h' line='94' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct div_t -->
    <class-decl name='div_t' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/include/stdlib.h' line='99' column='1' hash='5321a6845884f9ce' id='type-id-1759'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int div_t::quot -->
        <var-decl name='quot' type-id='type-id-1' visibility='default' filepath='/usr/include/stdlib.h' line='100' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- int div_t::rem -->
        <var-decl name='rem' type-id='type-id-1' visibility='default' filepath='/usr/include/stdlib.h' line='101' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct lconv -->
    <class-decl name='lconv' is-struct='yes' visibility='default' size-in-bits='768' filepath='/usr/include/locale.h' line='55' column='1' hash='91b2fd0786b4df3e' id='type-id-1760'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- char* lconv::decimal_point -->
        <var-decl name='decimal_point' type-id='type-id-130' visibility='default' filepath='/usr/include/locale.h' line='58' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- char* lconv::thousands_sep -->
        <var-decl name='thousands_sep' type-id='type-id-130' visibility='default' filepath='/usr/include/locale.h' line='59' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- char* lconv::grouping -->
        <var-decl name='grouping' type-id='type-id-130' visibility='default' filepath='/usr/include/locale.h' line='65' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- char* lconv::int_curr_symbol -->
        <var-decl name='int_curr_symbol' type-id='type-id-130' visibility='default' filepath='/usr/include/locale.h' line='71' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- char* lconv::currency_symbol -->
        <var-decl name='currency_symbol' type-id='type-id-130' visibility='default' filepath='/usr/include/locale.h' line='72' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='320'>
        <!-- char* lconv::mon_decimal_point -->
        <var-decl name='mon_decimal_point' type-id='type-id-130' visibility='default' filepath='/usr/include/locale.h' line='73' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='384'>
        <!-- char* lconv::mon_thousands_sep -->
        <var-decl name='mon_thousands_sep' type-id='type-id-130' visibility='default' filepath='/usr/include/locale.h' line='74' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='448'>
        <!-- char* lconv::mon_grouping -->
        <var-decl name='mon_grouping' type-id='type-id-130' visibility='default' filepath='/usr/include/locale.h' line='75' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='512'>
        <!-- char* lconv::positive_sign -->
        <var-decl name='positive_sign' type-id='type-id-130' visibility='default' filepath='/usr/include/locale.h' line='76' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='576'>
        <!-- char* lconv::negative_sign -->
        <var-decl name='negative_sign' type-id='type-id-130' visibility='default' filepath='/usr/include/locale.h' line='77' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='640'>
        <!-- char lconv::int_frac_digits -->
        <var-decl name='int_frac_digits' type-id='type-id-82' visibility='default' filepath='/usr/include/locale.h' line='78' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='648'>
        <!-- char lconv::frac_digits -->
        <var-decl name='frac_digits' type-id='type-id-82' visibility='default' filepath='/usr/include/locale.h' line='79' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='656'>
        <!-- char lconv::p_cs_precedes -->
        <var-decl name='p_cs_precedes' type-id='type-id-82' visibility='default' filepath='/usr/include/locale.h' line='81' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='664'>
        <!-- char lconv::p_sep_by_space -->
        <var-decl name='p_sep_by_space' type-id='type-id-82' visibility='default' filepath='/usr/include/locale.h' line='83' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='672'>
        <!-- char lconv::n_cs_precedes -->
        <var-decl name='n_cs_precedes' type-id='type-id-82' visibility='default' filepath='/usr/include/locale.h' line='85' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='680'>
        <!-- char lconv::n_sep_by_space -->
        <var-decl name='n_sep_by_space' type-id='type-id-82' visibility='default' filepath='/usr/include/locale.h' line='87' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='688'>
        <!-- char lconv::p_sign_posn -->
        <var-decl name='p_sign_posn' type-id='type-id-82' visibility='default' filepath='/usr/include/locale.h' line='94' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='696'>
        <!-- char lconv::n_sign_posn -->
        <var-decl name='n_sign_posn' type-id='type-id-82' visibility='default' filepath='/usr/include/locale.h' line='95' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='704'>
        <!-- char lconv::int_p_cs_precedes -->
        <var-decl name='int_p_cs_precedes' type-id='type-id-82' visibility='default' filepath='/usr/include/locale.h' line='98' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='712'>
        <!-- char lconv::int_p_sep_by_space -->
        <var-decl name='int_p_sep_by_space' type-id='type-id-82' visibility='default' filepath='/usr/include/locale.h' line='100' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='720'>
        <!-- char lconv::int_n_cs_precedes -->
        <var-decl name='int_n_cs_precedes' type-id='type-id-82' visibility='default' filepath='/usr/include/locale.h' line='102' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='728'>
        <!-- char lconv::int_n_sep_by_space -->
        <var-decl name='int_n_sep_by_space' type-id='type-id-82' visibility='default' filepath='/usr/include/locale.h' line='104' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='736'>
        <!-- char lconv::int_p_sign_posn -->
        <var-decl name='int_p_sign_posn' type-id='type-id-82' visibility='default' filepath='/usr/include/locale.h' line='111' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='744'>
        <!-- char lconv::int_n_sign_posn -->
        <var-decl name='int_n_sign_posn' type-id='type-id-82' visibility='default' filepath='/usr/include/locale.h' line='112' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct ldiv_t -->
    <class-decl name='ldiv_t' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/include/stdlib.h' line='107' column='1' hash='f73ee30feb9e9f76' id='type-id-1761'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- long int ldiv_t::quot -->
        <var-decl name='quot' type-id='type-id-179' visibility='default' filepath='/usr/include/stdlib.h' line='108' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- long int ldiv_t::rem -->
        <var-decl name='rem' type-id='type-id-179' visibility='default' filepath='/usr/include/stdlib.h' line='109' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct lldiv_t -->
    <class-decl name='lldiv_t' is-struct='yes' visibility='default' size-in-bits='128' filepath='/usr/include/stdlib.h' line='119' column='1' hash='564e04be97ca0408' id='type-id-1762'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- long long int lldiv_t::quot -->
        <var-decl name='quot' type-id='type-id-180' visibility='default' filepath='/usr/include/stdlib.h' line='120' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- long long int lldiv_t::rem -->
        <var-decl name='rem' type-id='type-id-180' visibility='default' filepath='/usr/include/stdlib.h' line='121' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct mallinfo -->
    <class-decl name='mallinfo' is-struct='yes' visibility='default' size-in-bits='320' filepath='/usr/include/malloc.h' line='94' column='1' hash='59eceb9a74e69660' id='type-id-1763'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int mallinfo::arena -->
        <var-decl name='arena' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='95' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- int mallinfo::ordblks -->
        <var-decl name='ordblks' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='96' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- int mallinfo::smblks -->
        <var-decl name='smblks' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='97' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='96'>
        <!-- int mallinfo::hblks -->
        <var-decl name='hblks' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='98' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- int mallinfo::hblkhd -->
        <var-decl name='hblkhd' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='99' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='160'>
        <!-- int mallinfo::usmblks -->
        <var-decl name='usmblks' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='100' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- int mallinfo::fsmblks -->
        <var-decl name='fsmblks' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='101' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='224'>
        <!-- int mallinfo::uordblks -->
        <var-decl name='uordblks' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='102' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- int mallinfo::fordblks -->
        <var-decl name='fordblks' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='103' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='288'>
        <!-- int mallinfo::keepcost -->
        <var-decl name='keepcost' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='104' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct tm -->
    <class-decl name='tm' is-struct='yes' visibility='default' size-in-bits='448' filepath='/usr/include/time.h' line='134' column='1' hash='831fa813c3806379' id='type-id-1764'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int tm::tm_sec -->
        <var-decl name='tm_sec' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='135' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- int tm::tm_min -->
        <var-decl name='tm_min' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='136' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- int tm::tm_hour -->
        <var-decl name='tm_hour' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='137' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='96'>
        <!-- int tm::tm_mday -->
        <var-decl name='tm_mday' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='138' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- int tm::tm_mon -->
        <var-decl name='tm_mon' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='139' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='160'>
        <!-- int tm::tm_year -->
        <var-decl name='tm_year' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='140' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- int tm::tm_wday -->
        <var-decl name='tm_wday' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='141' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='224'>
        <!-- int tm::tm_yday -->
        <var-decl name='tm_yday' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='142' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- int tm::tm_isdst -->
        <var-decl name='tm_isdst' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='143' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='320'>
        <!-- long int tm::tm_gmtoff -->
        <var-decl name='tm_gmtoff' type-id='type-id-179' visibility='default' filepath='/usr/include/time.h' line='146' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='384'>
        <!-- const char* tm::tm_zone -->
        <var-decl name='tm_zone' type-id='type-id-60' visibility='default' filepath='/usr/include/time.h' line='147' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct typedef __va_list_tag __va_list_tag -->
    <class-decl name='typedef __va_list_tag __va_list_tag' is-struct='yes' visibility='default' size-in-bits='192' hash='82aec996f90384a2' id='type-id-1765'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- unsigned int typedef __va_list_tag __va_list_tag::gp_offset -->
        <var-decl name='gp_offset' type-id='type-id-1440' visibility='default'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- unsigned int typedef __va_list_tag __va_list_tag::fp_offset -->
        <var-decl name='fp_offset' type-id='type-id-1440' visibility='default'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- void* typedef __va_list_tag __va_list_tag::overflow_arg_area -->
        <var-decl name='overflow_arg_area' type-id='type-id-56' visibility='default'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- void* typedef __va_list_tag __va_list_tag::reg_save_area -->
        <var-decl name='reg_save_area' type-id='type-id-56' visibility='default'/>
      </data-member>
    </class-decl>
    <!-- tcmalloc::CentralFreeList::TCEntry[64] -->
    <array-type-def dimensions='1' type-id='type-id-1766' size-in-bits='8192' hash='04aa6fc07a27844c' id='type-id-1767'>
      <!-- <anonymous range>[64] -->
      <subrange length='64' lower-bound='0' upper-bound='63' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='6066f2053fe47763' id='type-id-1518'/>
    </array-type-def>
    <!-- tcmalloc::PageHeap::SpanList[128] -->
    <array-type-def dimensions='1' type-id='type-id-1768' size-in-bits='98304' hash='16a3a6c12f9ed069' id='type-id-1769'>
      <!-- <anonymous range>[128] -->
      <subrange length='128' lower-bound='0' upper-bound='127' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='6d1a6a21feae6dd2' id='type-id-1750'/>
    </array-type-def>
    <!-- tcmalloc::ThreadCache::FreeList[88] -->
    <array-type-def dimensions='1' type-id='type-id-1770' size-in-bits='16896' hash='ec263192fddbef9b' id='type-id-1771'>
      <!-- <anonymous range>[88] -->
      <subrange length='88' lower-bound='0' upper-bound='87' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='6b4bb579b7303ac8' id='type-id-1606'/>
    </array-type-def>
    <!-- typedef int32_t Atomic32 -->
    <typedef-decl name='Atomic32' type-id='type-id-161' size-in-bits='32' filepath='./src/base/atomicops-internals-x86.h' line='43' column='1' hash='09d17c08f594edc7' id='type-id-107'/>
    <!-- typedef intptr_t AtomicWord -->
    <typedef-decl name='AtomicWord' type-id='type-id-101' size-in-bits='64' filepath='./src/base/atomicops.h' line='129' column='1' hash='b119fe0931d2ee10' id='type-id-1329'/>
    <!-- typedef uintptr_t Length -->
    <typedef-decl name='Length' type-id='type-id-277' size-in-bits='64' filepath='src/common.h' line='59' column='1' hash='8fdc5eea2983a729' id='type-id-192'/>
    <!-- typedef std::string MallocExtensionWriter -->
    <typedef-decl name='MallocExtensionWriter' type-id='type-id-999' size-in-bits='64' filepath='./src/gperftools/malloc_extension.h' line='68' column='1' id='type-id-1772'/>
    <!-- typedef uintptr_t PageID -->
    <typedef-decl name='PageID' type-id='type-id-277' size-in-bits='64' filepath='src/common.h' line='56' column='1' hash='8fdc5eea2983a729' id='type-id-190'/>
    <!-- typedef void _IO_lock_t -->
    <typedef-decl name='_IO_lock_t' type-id='type-id-58' filepath='/usr/include/libio.h' line='180' column='1' id='type-id-1773'/>
    <!-- typedef _IO_FILE __FILE -->
    <typedef-decl name='__FILE' type-id='type-id-169' size-in-bits='1728' filepath='/usr/include/stdio.h' line='65' column='1' id='type-id-1774'/>
    <!-- typedef int (*)(void*, void*) __compar_fn_t -->
    <typedef-decl name='__compar_fn_t' type-id='type-id-1775' size-in-bits='64' filepath='/usr/include/stdlib.h' line='742' column='1' hash='fd7a63c0c6c822c4' id='type-id-1776'/>
    <!-- typedef long int __off64_t -->
    <typedef-decl name='__off64_t' type-id='type-id-179' size-in-bits='64' filepath='/usr/include/bits/types.h' line='142' column='1' hash='b119fe0931d2ee10' id='type-id-176'/>
    <!-- typedef long int __off_t -->
    <typedef-decl name='__off_t' type-id='type-id-179' size-in-bits='64' filepath='/usr/include/bits/types.h' line='141' column='1' hash='b119fe0931d2ee10' id='type-id-172'/>
    <!-- typedef int int32_t -->
    <typedef-decl name='int32_t' type-id='type-id-1' size-in-bits='32' filepath='/usr/include/stdint.h' line='39' column='1' hash='09d17c08f594edc7' id='type-id-161'/>
    <!-- typedef long int int64_t -->
    <typedef-decl name='int64_t' type-id='type-id-179' size-in-bits='64' filepath='/usr/include/stdint.h' line='41' column='1' hash='b119fe0931d2ee10' id='type-id-90'/>
    <!-- typedef long int intptr_t -->
    <typedef-decl name='intptr_t' type-id='type-id-179' size-in-bits='64' filepath='/usr/include/stdint.h' line='120' column='1' hash='b119fe0931d2ee10' id='type-id-101'/>
    <!-- typedef __mbstate_t mbstate_t -->
    <typedef-decl name='mbstate_t' type-id='type-id-1757' size-in-bits='64' filepath='/usr/include/wchar.h' line='106' column='1' id='type-id-1777'/>
    <!-- typedef unsigned long int pthread_t -->
    <typedef-decl name='pthread_t' type-id='type-id-21' size-in-bits='64' filepath='/usr/include/bits/pthreadtypes.h' line='50' column='1' hash='8fdc5eea2983a729' id='type-id-336'/>
    <!-- typedef long int ptrdiff_t -->
    <typedef-decl name='ptrdiff_t' type-id='type-id-179' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h' line='149' column='1' hash='b119fe0931d2ee10' id='type-id-346'/>
    <!-- typedef unsigned long int size_t -->
    <typedef-decl name='size_t' type-id='type-id-21' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h' line='211' column='1' hash='8fdc5eea2983a729' id='type-id-61'/>
    <!-- typedef unsigned int uint32_t -->
    <typedef-decl name='uint32_t' type-id='type-id-1440' size-in-bits='32' filepath='/usr/include/stdint.h' line='52' column='1' hash='e66b43f97c38e87a' id='type-id-19'/>
    <!-- typedef unsigned long int uint64_t -->
    <typedef-decl name='uint64_t' type-id='type-id-21' size-in-bits='64' filepath='/usr/include/stdint.h' line='56' column='1' hash='8fdc5eea2983a729' id='type-id-16'/>
    <!-- typedef unsigned long int uintptr_t -->
    <typedef-decl name='uintptr_t' type-id='type-id-21' size-in-bits='64' filepath='/usr/include/stdint.h' line='123' column='1' hash='8fdc5eea2983a729' id='type-id-277'/>
    <!-- typedef unsigned int wint_t -->
    <typedef-decl name='wint_t' type-id='type-id-1440' size-in-bits='32' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h' line='352' column='1' hash='e66b43f97c38e87a' id='type-id-1778'/>
    <!-- unnamed&#45;enum&#45;underlying&#45;type&#45;32 -->
    <type-decl name='unnamed-enum-underlying-type-32' size-in-bits='32' alignment-in-bits='32' is-anonymous='yes' hash='5181a58e665b3619' id='type-id-93'/>
    <!-- unsigned char -->
    <type-decl name='unsigned char' size-in-bits='8' hash='6ebac62b3366db68' id='type-id-12'/>
    <!-- unsigned char[2169] -->
    <array-type-def dimensions='1' type-id='type-id-12' size-in-bits='17352' hash='31ab9327921feae0' id='type-id-1779'>
      <!-- <anonymous range>[2169] -->
      <subrange length='2169' lower-bound='0' upper-bound='2168' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='631c57637e46a774' id='type-id-1780'/>
    </array-type-def>
    <!-- unsigned int -->
    <type-decl name='unsigned int' size-in-bits='32' hash='e66b43f97c38e87a' id='type-id-1440'/>
    <!-- unsigned long int -->
    <type-decl name='unsigned long int' size-in-bits='64' hash='8fdc5eea2983a729#2' id='type-id-21'/>
    <!-- unsigned long int[65536] -->
    <array-type-def dimensions='1' type-id='type-id-21' size-in-bits='4194304' hash='dc421cb9be31e022' id='type-id-1781'>
      <!-- <anonymous range>[65536] -->
      <subrange length='65536' lower-bound='0' upper-bound='65535' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='2bb4637223d4ab80' id='type-id-1782'/>
    </array-type-def>
    <!-- unsigned long long int -->
    <type-decl name='unsigned long long int' size-in-bits='64' hash='ebdfc4685a1e82df#3' id='type-id-181'/>
    <!-- unsigned short int -->
    <type-decl name='unsigned short int' size-in-bits='16' hash='d7723bb93a30b11d#4' id='type-id-20'/>
    <!-- void*[31] -->
    <array-type-def dimensions='1' type-id='type-id-56' hash='ed96ae5a8dde9f00' id='type-id-1783'>
      <!-- <anonymous range>[31] -->
      <subrange length='31' lower-bound='0' upper-bound='30' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='a70332a4d2caf54b' id='type-id-1784'/>
    </array-type-def>
    <!-- volatile unsigned long int[65536] -->
    <array-type-def dimensions='1' type-id='type-id-1785' size-in-bits='4194304' hash='4996b97d63b6050e' id='type-id-1731'>
      <!-- <anonymous range>[65536] -->
      <subrange length='65536' lower-bound='0' upper-bound='65535' type-id='type-id-21' size-in-bits='64' is-anonymous='yes' hash='2bb4637223d4ab80' id='type-id-1782'/>
    </array-type-def>
    <!-- wchar_t -->
    <type-decl name='wchar_t' size-in-bits='32' hash='4b224bc24abb5f1b' id='type-id-1786'/>
    <!-- Atomic32* -->
    <pointer-type-def type-id='type-id-107' size-in-bits='64' hash='4afecc7fa84ce41a' id='type-id-106'/>
    <!-- MallocExtension::FreeListInfo& -->
    <reference-type-def kind='lvalue' type-id='type-id-1214' size-in-bits='64' hash='8edb84f4acd61819' id='type-id-1787'/>
    <!-- MallocExtension::FreeListInfo* -->
    <pointer-type-def type-id='type-id-1214' size-in-bits='64' hash='95a6cdd420859adb' id='type-id-1237'/>
    <!-- MallocExtension::FreeListInfo* const -->
    <qualified-type-def type-id='type-id-1237' const='yes' hash='eee83a631f52978e' id='type-id-1788'/>
    <!-- MallocExtension::FreeListInfo* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-1788' size-in-bits='64' hash='6ec26a1f0770983f' id='type-id-1789'/>
    <!-- MallocExtensionWriter* -->
    <pointer-type-def type-id='type-id-1772' size-in-bits='64' hash='8c31534b5f556a0d' id='type-id-1219'/>
    <!-- PackedCache<35, long unsigned int>* -->
    <pointer-type-def type-id='type-id-1730' size-in-bits='64' hash='fd2a4938e3ea9971' id='type-id-1790'/>
    <!-- PackedCache<35, long unsigned int>* const -->
    <qualified-type-def type-id='type-id-1790' const='yes' hash='bcc9fb388f8e3b5b' id='type-id-1791'/>
    <!-- SpinLock* -->
    <pointer-type-def type-id='type-id-102' size-in-bits='64' hash='b802096731211fe8' id='type-id-104'/>
    <!-- SpinLock* const -->
    <qualified-type-def type-id='type-id-104' const='yes' hash='f2895f024339d7e7' id='type-id-1792'/>
    <!-- SpinLockHolder* -->
    <pointer-type-def type-id='type-id-1735' size-in-bits='64' hash='cbfba065ed95b516' id='type-id-1736'/>
    <!-- SpinLockHolder* const -->
    <qualified-type-def type-id='type-id-1736' const='yes' hash='dd1a0bcdb8fd75f2' id='type-id-1793'/>
    <!-- SysAllocator* -->
    <pointer-type-def type-id='type-id-1224' size-in-bits='64' hash='6f7e8434bf0b6042' id='type-id-1221'/>
    <!-- TCMallocGuard* -->
    <pointer-type-def type-id='type-id-1737' size-in-bits='64' hash='122b5ea6f3a432fb' id='type-id-1738'/>
    <!-- TCMallocGuard* const -->
    <qualified-type-def type-id='type-id-1738' const='yes' hash='b48945306f9a51ac' id='type-id-1794'/>
    <!-- TCMallocImplementation* -->
    <pointer-type-def type-id='type-id-1739' size-in-bits='64' hash='a47cf50b4a32460d' id='type-id-1741'/>
    <!-- TCMallocImplementation* const -->
    <qualified-type-def type-id='type-id-1741' const='yes' hash='7160d227c29e05ac' id='type-id-1795'/>
    <!-- TCMallocImplementation::RangeFunction* -->
    <pointer-type-def type-id='type-id-1740' size-in-bits='64' hash='042084ae234fbe8b#2' id='type-id-1742'/>
    <!-- TCMalloc_PageMap3<35>* -->
    <pointer-type-def type-id='type-id-1743' size-in-bits='64' hash='04762d93bcb67010' id='type-id-1420'/>
    <!-- TCMalloc_Printer* -->
    <pointer-type-def type-id='type-id-1746' size-in-bits='64' hash='6827855596934e16' id='type-id-1747'/>
    <!-- TCMalloc_Printer* const -->
    <qualified-type-def type-id='type-id-1747' const='yes' hash='4c45ef83f645e18a' id='type-id-1796'/>
    <!-- _IO_FILE* -->
    <pointer-type-def type-id='type-id-169' size-in-bits='64' hash='071f36dcbe00ad00' id='type-id-171'/>
    <!-- _IO_marker* -->
    <pointer-type-def type-id='type-id-1756' size-in-bits='64' hash='4265a0e1ed6483b0' id='type-id-170'/>
    <!-- __FILE* -->
    <pointer-type-def type-id='type-id-1774' size-in-bits='64' hash='1a16dc71bfc55192' id='type-id-1797'/>
    <!-- __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1230' size-in-bits='64' hash='08bf5ec76b974e16' id='type-id-1798'/>
    <!-- __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >* -->
    <pointer-type-def type-id='type-id-1230' size-in-bits='64' hash='c865e9fb40557fda' id='type-id-1799'/>
    <!-- __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >* const -->
    <qualified-type-def type-id='type-id-1799' const='yes' hash='12fd8769f95aa80a' id='type-id-1800'/>
    <!-- __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>* -->
    <pointer-type-def type-id='type-id-1801' size-in-bits='64' hash='687037b9c602d406' id='type-id-1802'/>
    <!-- __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>* const -->
    <qualified-type-def type-id='type-id-1802' const='yes' hash='261ac02f340e0049' id='type-id-1803'/>
    <!-- __gnu_cxx::new_allocator<char>* -->
    <pointer-type-def type-id='type-id-998' size-in-bits='64' hash='608f46af5d93b320' id='type-id-450'/>
    <!-- base::MallocRange* -->
    <pointer-type-def type-id='type-id-1804' size-in-bits='64' hash='8876fb0edcc069d0' id='type-id-191'/>
    <!-- base::internal::HookList<void (*)(const void*)>* -->
    <pointer-type-def type-id='type-id-1805' size-in-bits='64' hash='aa9c9f329a098cdd' id='type-id-1285'/>
    <!-- base::internal::HookList<void (*)(const void*, size_t)>* -->
    <pointer-type-def type-id='type-id-108' size-in-bits='64' hash='2398960958e109f7' id='type-id-98'/>
    <!-- char& -->
    <reference-type-def kind='lvalue' type-id='type-id-82' size-in-bits='64' hash='ffc913127619398d' id='type-id-1806'/>
    <!-- char* -->
    <pointer-type-def type-id='type-id-82' size-in-bits='64' hash='e533f42d1dd4942c' id='type-id-130'/>
    <!-- char** -->
    <pointer-type-def type-id='type-id-130' size-in-bits='64' hash='a93039fe023ed77b' id='type-id-136'/>
    <!-- const MallocExtension::FreeListInfo -->
    <qualified-type-def type-id='type-id-1214' const='yes' hash='9d1272bbfe7b7979' id='type-id-1807'/>
    <!-- const MallocExtension::FreeListInfo& -->
    <reference-type-def kind='lvalue' type-id='type-id-1807' size-in-bits='64' hash='5a293c9f00938d3e' id='type-id-1231'/>
    <!-- const MallocExtension::FreeListInfo* -->
    <pointer-type-def type-id='type-id-1807' size-in-bits='64' hash='c59d7a86e0cd469c' id='type-id-1808'/>
    <!-- const PackedCache<35, long unsigned int> -->
    <qualified-type-def type-id='type-id-1730' const='yes' hash='141d380a5afce0a9' id='type-id-1809'/>
    <!-- const PackedCache<35, long unsigned int>* -->
    <pointer-type-def type-id='type-id-1809' size-in-bits='64' hash='9e73621df902fa39' id='type-id-1810'/>
    <!-- const PackedCache<35, long unsigned int>* const -->
    <qualified-type-def type-id='type-id-1810' const='yes' hash='576bbf3fbc5d4882' id='type-id-1811'/>
    <!-- const SpinLock -->
    <qualified-type-def type-id='type-id-102' const='yes' hash='fdf1842c44bfa381' id='type-id-1812'/>
    <!-- const SpinLock& -->
    <reference-type-def kind='lvalue' type-id='type-id-1812' size-in-bits='64' hash='d458ed0cf7e76fb3' id='type-id-1813'/>
    <!-- const SpinLock* -->
    <pointer-type-def type-id='type-id-1812' size-in-bits='64' hash='a5d139865e39cd10' id='type-id-1364'/>
    <!-- const TCMalloc_PageMap3<35> -->
    <qualified-type-def type-id='type-id-1743' const='yes' hash='33b3c6339b9bb8cf' id='type-id-1814'/>
    <!-- const TCMalloc_PageMap3<35>* -->
    <pointer-type-def type-id='type-id-1814' size-in-bits='64' hash='4cec56bedf005311' id='type-id-1815'/>
    <!-- const TCMalloc_PageMap3<35>* const -->
    <qualified-type-def type-id='type-id-1815' const='yes' hash='406307c1ee743589' id='type-id-1816'/>
    <!-- const __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > > -->
    <qualified-type-def type-id='type-id-1230' const='yes' hash='dd637e4c0b3f723a' id='type-id-1817'/>
    <!-- const __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1817' size-in-bits='64' hash='0d1a2140f9f91cfa' id='type-id-1818'/>
    <!-- const __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >* -->
    <pointer-type-def type-id='type-id-1817' size-in-bits='64' hash='5028cce0570b0551' id='type-id-1819'/>
    <!-- const __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >* const -->
    <qualified-type-def type-id='type-id-1819' const='yes' hash='d62e90bde96f8e08' id='type-id-1820'/>
    <!-- const __gnu_cxx::new_allocator<MallocExtension::FreeListInfo> -->
    <qualified-type-def type-id='type-id-1801' const='yes' hash='a9c5f4065e81f63e' id='type-id-1821'/>
    <!-- const __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1821' size-in-bits='64' hash='2c6a4428f92d8b13' id='type-id-1822'/>
    <!-- const __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>* -->
    <pointer-type-def type-id='type-id-1821' size-in-bits='64' hash='f9e7e73c5e0f368c' id='type-id-1823'/>
    <!-- const __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>* const -->
    <qualified-type-def type-id='type-id-1823' const='yes' hash='0aa8f850d258a1a6' id='type-id-1824'/>
    <!-- const __gnu_cxx::new_allocator<char> -->
    <qualified-type-def type-id='type-id-998' const='yes' hash='d0c896a319e39135' id='type-id-1825'/>
    <!-- const __gnu_cxx::new_allocator<char>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1825' size-in-bits='64' hash='9a4f67b0de72c33d' id='type-id-1826'/>
    <!-- const __gnu_cxx::new_allocator<char>* -->
    <pointer-type-def type-id='type-id-1825' size-in-bits='64' hash='0481e4c0dbe5485f' id='type-id-1827'/>
    <!-- const base::MallocRange -->
    <qualified-type-def type-id='type-id-1804' const='yes' hash='b4b29fbb6537d68f' id='type-id-1828'/>
    <!-- const base::MallocRange* -->
    <pointer-type-def type-id='type-id-1828' size-in-bits='64' hash='8e29ce82852180ec' id='type-id-1829'/>
    <!-- const base::internal::HookList<void (*)(const void*)> -->
    <qualified-type-def type-id='type-id-1805' const='yes' hash='90974492c6be05b3' id='type-id-1830'/>
    <!-- const base::internal::HookList<void (*)(const void*)>* -->
    <pointer-type-def type-id='type-id-1830' size-in-bits='64' hash='6232b7c7a64df179' id='type-id-1831'/>
    <!-- const base::internal::HookList<void (*)(const void*)>* const -->
    <qualified-type-def type-id='type-id-1831' const='yes' hash='138fbbcb952ba5c1' id='type-id-1832'/>
    <!-- const base::internal::HookList<void (*)(const void*, size_t)> -->
    <qualified-type-def type-id='type-id-108' const='yes' hash='d04e98660d9bcee1' id='type-id-1833'/>
    <!-- const base::internal::HookList<void (*)(const void*, size_t)>* -->
    <pointer-type-def type-id='type-id-1833' size-in-bits='64' hash='dbb0e8c941ad4c40' id='type-id-96'/>
    <!-- const base::internal::HookList<void (*)(const void*, size_t)>* const -->
    <qualified-type-def type-id='type-id-96' const='yes' hash='81b92ea5d0599c5c' id='type-id-1834'/>
    <!-- const char -->
    <qualified-type-def type-id='type-id-82' const='yes' hash='3e50fd33f9bb78d9' id='type-id-933'/>
    <!-- const char& -->
    <reference-type-def kind='lvalue' type-id='type-id-933' size-in-bits='64' hash='78bf127c69ae91c1' id='type-id-1835'/>
    <!-- const char* -->
    <pointer-type-def type-id='type-id-933' size-in-bits='64' hash='c44743f354f6a443' id='type-id-60'/>
    <!-- const char** -->
    <pointer-type-def type-id='type-id-60' size-in-bits='64' hash='cea1d4b0943594a3' id='type-id-1836'/>
    <!-- const double -->
    <qualified-type-def type-id='type-id-2' const='yes' hash='69c7e12064986339' id='type-id-1837'/>
    <!-- const double& -->
    <reference-type-def kind='lvalue' type-id='type-id-1837' size-in-bits='64' hash='7836098d0298939d' id='type-id-1838'/>
    <!-- const int -->
    <qualified-type-def type-id='type-id-1' const='yes' hash='8cef8df4b6728924' id='type-id-159'/>
    <!-- const mbstate_t -->
    <qualified-type-def type-id='type-id-1777' const='yes' hash='a328f2686e4dcc6e' id='type-id-1839'/>
    <!-- const mbstate_t* -->
    <pointer-type-def type-id='type-id-1839' size-in-bits='64' hash='965b139f91617649' id='type-id-1840'/>
    <!-- const ptrdiff_t -->
    <qualified-type-def type-id='type-id-346' const='yes' hash='db73a2d05abb307a' id='type-id-1841'/>
    <!-- const ptrdiff_t& -->
    <reference-type-def kind='lvalue' type-id='type-id-1841' size-in-bits='64' hash='bc6440d28416e942' id='type-id-1842'/>
    <!-- const std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
    <qualified-type-def type-id='type-id-1843' const='yes' hash='a680d281624a2591' id='type-id-1844'/>
    <!-- const std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* -->
    <pointer-type-def type-id='type-id-1844' size-in-bits='64' hash='63c961d49659297f' id='type-id-1845'/>
    <!-- const std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* const -->
    <qualified-type-def type-id='type-id-1845' const='yes' hash='052ee9c3eb0ca303' id='type-id-1846'/>
    <!-- const std::allocator<MallocExtension::FreeListInfo> -->
    <qualified-type-def type-id='type-id-1847' const='yes' hash='72dba14179029353' id='type-id-1848'/>
    <!-- const std::allocator<MallocExtension::FreeListInfo>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1848' size-in-bits='64' hash='36e0742f0693da6a' id='type-id-1849'/>
    <!-- const std::allocator<char> -->
    <qualified-type-def type-id='type-id-997' const='yes' hash='902ffeb42efa2254' id='type-id-1850'/>
    <!-- const std::allocator<char>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1850' size-in-bits='64' hash='7d4280c016344b59' id='type-id-1851'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> > -->
    <qualified-type-def type-id='type-id-996' const='yes' hash='42938116911f2585' id='type-id-1852'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1852' size-in-bits='64' hash='ebc94b0648ba0254' id='type-id-995'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> >* -->
    <pointer-type-def type-id='type-id-1852' size-in-bits='64' hash='f14dbace06951209' id='type-id-677'/>
    <!-- const std::nothrow_t -->
    <qualified-type-def type-id='type-id-1853' const='yes' hash='ca36e3df786cc3ac' id='type-id-1854'/>
    <!-- const std::nothrow_t& -->
    <reference-type-def kind='lvalue' type-id='type-id-1854' size-in-bits='64' hash='bb0ae0d3ee2f86b5' id='type-id-1855'/>
    <!-- const std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
    <qualified-type-def type-id='type-id-1856' const='yes' hash='180bd00f7070cfe1' id='type-id-1857'/>
    <!-- const std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1857' size-in-bits='64' hash='ac713d6493e3117e' id='type-id-1858'/>
    <!-- const std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* -->
    <pointer-type-def type-id='type-id-1857' size-in-bits='64' hash='b95b745979cff6d7' id='type-id-1859'/>
    <!-- const std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* const -->
    <qualified-type-def type-id='type-id-1859' const='yes' hash='0bcd2018ce010127' id='type-id-1860'/>
    <!-- const tcmalloc::PageHeap -->
    <qualified-type-def type-id='type-id-207' const='yes' hash='19474cf31d0341ce' id='type-id-1861'/>
    <!-- const tcmalloc::PageHeap* -->
    <pointer-type-def type-id='type-id-1861' size-in-bits='64' hash='441ffa03231e618c' id='type-id-1862'/>
    <!-- const tcmalloc::PageHeap* const -->
    <qualified-type-def type-id='type-id-1862' const='yes' hash='fa8141513f242edc' id='type-id-1863'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::Span> -->
    <qualified-type-def type-id='type-id-199' const='yes' hash='a1ee921cd5074f51' id='type-id-1864'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::Span>* -->
    <pointer-type-def type-id='type-id-1864' size-in-bits='64' hash='d6e73e296d85f7e0' id='type-id-1865'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::Span>* const -->
    <qualified-type-def type-id='type-id-1865' const='yes' hash='c2c339375291c0f6' id='type-id-1866'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::StackTrace> -->
    <qualified-type-def type-id='type-id-200' const='yes' hash='0a5a953a75536034' id='type-id-1867'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::StackTrace>* -->
    <pointer-type-def type-id='type-id-1867' size-in-bits='64' hash='291370d490253afe' id='type-id-1868'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache> -->
    <qualified-type-def type-id='type-id-1869' const='yes' hash='8b04a713cb0eda99' id='type-id-1870'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>* -->
    <pointer-type-def type-id='type-id-1870' size-in-bits='64' hash='dd4d46a0d10da99b' id='type-id-1871'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>* const -->
    <qualified-type-def type-id='type-id-1871' const='yes' hash='41be153ecf611d24' id='type-id-1872'/>
    <!-- const tcmalloc::ThreadCache -->
    <qualified-type-def type-id='type-id-1873' const='yes' hash='16e7e89b57d863c8' id='type-id-1874'/>
    <!-- const tcmalloc::ThreadCache* -->
    <pointer-type-def type-id='type-id-1874' size-in-bits='64' hash='ee6979b011b6ec20' id='type-id-1875'/>
    <!-- const tcmalloc::ThreadCache::FreeList -->
    <qualified-type-def type-id='type-id-1770' const='yes' hash='d7b016e76ebf8703' id='type-id-1876'/>
    <!-- const tcmalloc::ThreadCache::FreeList* -->
    <pointer-type-def type-id='type-id-1876' size-in-bits='64' hash='4ee6ecc0ca5bfb6e' id='type-id-1877'/>
    <!-- const tcmalloc::ThreadCache::FreeList* const -->
    <qualified-type-def type-id='type-id-1877' const='yes' hash='608115cea5684592' id='type-id-1878'/>
    <!-- const tm -->
    <qualified-type-def type-id='type-id-1764' const='yes' hash='6d30d2c0485b21b8' id='type-id-1879'/>
    <!-- const tm* -->
    <pointer-type-def type-id='type-id-1879' size-in-bits='64' hash='934b82f269d593b3' id='type-id-1880'/>
    <!-- const unsigned long int -->
    <qualified-type-def type-id='type-id-21' const='yes' hash='d8a94d28da6128a9' id='type-id-745'/>
    <!-- const unsigned long int& -->
    <reference-type-def kind='lvalue' type-id='type-id-745' size-in-bits='64' hash='5aea680f8e94fc20' id='type-id-928'/>
    <!-- const volatile base::subtle::Atomic64 -->
    <qualified-type-def type-id='type-id-1324' const='yes' hash='eb296ea9f15a2b29' id='type-id-1881'/>
    <!-- const volatile base::subtle::Atomic64* -->
    <pointer-type-def type-id='type-id-1881' size-in-bits='64' hash='4060608b43f26c3e' id='type-id-1882'/>
    <!-- const wchar_t -->
    <qualified-type-def type-id='type-id-1786' const='yes' hash='f2fba7dbc42fc9d5' id='type-id-1883'/>
    <!-- const wchar_t* -->
    <pointer-type-def type-id='type-id-1883' size-in-bits='64' hash='317089067e76910a' id='type-id-1884'/>
    <!-- const wchar_t** -->
    <pointer-type-def type-id='type-id-1884' size-in-bits='64' hash='535c62eb027026ae' id='type-id-1885'/>
    <!-- int (*)(void*, void*) -->
    <pointer-type-def type-id='type-id-1886' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1775'/>
    <!-- int* -->
    <pointer-type-def type-id='type-id-1' size-in-bits='64' hash='3fd83b2c14ae2f2f' id='type-id-1218'/>
    <!-- lconv* -->
    <pointer-type-def type-id='type-id-1760' size-in-bits='64' hash='6921f81febec828e' id='type-id-1887'/>
    <!-- mbstate_t* -->
    <pointer-type-def type-id='type-id-1777' size-in-bits='64' hash='18fb85b101e2cd25' id='type-id-1888'/>
    <!-- size_t* -->
    <pointer-type-def type-id='type-id-61' size-in-bits='64' hash='54c1e9f81ec7a1db' id='type-id-319'/>
    <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* -->
    <pointer-type-def type-id='type-id-1843' size-in-bits='64' hash='26eaee151b9d1274' id='type-id-1889'/>
    <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* const -->
    <qualified-type-def type-id='type-id-1889' const='yes' hash='1c2e23b238e4c807' id='type-id-1890'/>
    <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl* -->
    <pointer-type-def type-id='type-id-1891' size-in-bits='64' hash='437509a8ebc56156' id='type-id-1892'/>
    <!-- std::allocator<MallocExtension::FreeListInfo>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1847' size-in-bits='64' hash='9c205a7efd4be6cd' id='type-id-1893'/>
    <!-- std::allocator<MallocExtension::FreeListInfo>* -->
    <pointer-type-def type-id='type-id-1847' size-in-bits='64' hash='637671ac2d1bf007' id='type-id-1894'/>
    <!-- std::allocator<char>* -->
    <pointer-type-def type-id='type-id-997' size-in-bits='64' hash='e3d0c180eee5d782' id='type-id-1667'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-996' size-in-bits='64' hash='d8ed513ed2f704b1' id='type-id-961'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >* -->
    <pointer-type-def type-id='type-id-996' size-in-bits='64' hash='c23efea4cbf2dbe8' id='type-id-829'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider* -->
    <pointer-type-def type-id='type-id-1895' size-in-bits='64' hash='9d029584a1ffef40' id='type-id-831'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep& -->
    <reference-type-def kind='lvalue' type-id='type-id-679' size-in-bits='64' hash='dce7c83b7dca5265' id='type-id-1896'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep* -->
    <pointer-type-def type-id='type-id-679' size-in-bits='64' hash='0eeadcf9df869442' id='type-id-833'/>
    <!-- std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1856' size-in-bits='64' hash='995f08803f318fac' id='type-id-1897'/>
    <!-- std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* -->
    <pointer-type-def type-id='type-id-1856' size-in-bits='64' hash='0c5755a8a2814c5d' id='type-id-1223'/>
    <!-- std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* const -->
    <qualified-type-def type-id='type-id-1223' const='yes' hash='6a426c9449fba56b' id='type-id-1898'/>
    <!-- tcmalloc::CentralFreeList* -->
    <pointer-type-def type-id='type-id-210' size-in-bits='64' hash='d1bbca9b48f8c468' id='type-id-183'/>
    <!-- tcmalloc::CentralFreeList* const -->
    <qualified-type-def type-id='type-id-183' const='yes' hash='bbd05e39293c2c77' id='type-id-1899'/>
    <!-- tcmalloc::CentralFreeListPadded* -->
    <pointer-type-def type-id='type-id-1604' size-in-bits='64' hash='f759dcae1e1fdcea' id='type-id-1900'/>
    <!-- tcmalloc::LogItem* -->
    <pointer-type-def type-id='type-id-1204' size-in-bits='64' hash='632a874366fdb855' id='type-id-1901'/>
    <!-- tcmalloc::LogItem* const -->
    <qualified-type-def type-id='type-id-1901' const='yes' hash='68a58c24a9bf401f' id='type-id-1902'/>
    <!-- tcmalloc::PageHeap* -->
    <pointer-type-def type-id='type-id-207' size-in-bits='64' hash='c641337a660a313b' id='type-id-187'/>
    <!-- tcmalloc::PageHeap* const -->
    <qualified-type-def type-id='type-id-187' const='yes' hash='4addfafd3e73020c' id='type-id-1903'/>
    <!-- tcmalloc::PageHeap::LargeSpanStats* -->
    <pointer-type-def type-id='type-id-1904' size-in-bits='64' hash='ab19a885d640ae9a' id='type-id-189'/>
    <!-- tcmalloc::PageHeap::SmallSpanStats* -->
    <pointer-type-def type-id='type-id-1905' size-in-bits='64' hash='34dd6e2cae457332' id='type-id-193'/>
    <!-- tcmalloc::PageHeap::SpanList* -->
    <pointer-type-def type-id='type-id-1768' size-in-bits='64' hash='978e18db429b0617' id='type-id-194'/>
    <!-- tcmalloc::PageHeap::Stats* -->
    <pointer-type-def type-id='type-id-1755' size-in-bits='64' hash='15d73fb7ebf997cd' id='type-id-1906'/>
    <!-- tcmalloc::PageHeap::Stats* const -->
    <qualified-type-def type-id='type-id-1906' const='yes' hash='dcb0b0410a2307e8' id='type-id-1907'/>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::Span>* -->
    <pointer-type-def type-id='type-id-199' size-in-bits='64' hash='6d5462026259598d' id='type-id-1581'/>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::StackTrace>* -->
    <pointer-type-def type-id='type-id-200' size-in-bits='64' hash='b92ae7bb707405ae' id='type-id-1908'/>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::StackTrace>* const -->
    <qualified-type-def type-id='type-id-1908' const='yes' hash='f296105aaad24067' id='type-id-1909'/>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>* -->
    <pointer-type-def type-id='type-id-201' size-in-bits='64' hash='16771e578f915091' id='type-id-1595'/>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>* -->
    <pointer-type-def type-id='type-id-1869' size-in-bits='64' hash='e053a708e2ae6d74' id='type-id-1910'/>
    <!-- tcmalloc::Sampler* -->
    <pointer-type-def type-id='type-id-1576' size-in-bits='64' hash='2495b52d95fccdff' id='type-id-1575'/>
    <!-- tcmalloc::Sampler* const -->
    <qualified-type-def type-id='type-id-1575' const='yes' hash='25398573417fbaea' id='type-id-1911'/>
    <!-- tcmalloc::SizeMap* -->
    <pointer-type-def type-id='type-id-224' size-in-bits='64' hash='0f20dc83587b81cf' id='type-id-203'/>
    <!-- tcmalloc::SizeMap* const -->
    <qualified-type-def type-id='type-id-203' const='yes' hash='869ac113900db289' id='type-id-1912'/>
    <!-- tcmalloc::Span* -->
    <pointer-type-def type-id='type-id-164' size-in-bits='64' hash='c87ccc64315ef1da' id='type-id-188'/>
    <!-- tcmalloc::StackTrace* -->
    <pointer-type-def type-id='type-id-1585' size-in-bits='64' hash='39408408b98af71d' id='type-id-1913'/>
    <!-- tcmalloc::ThreadCache* -->
    <pointer-type-def type-id='type-id-1873' size-in-bits='64' hash='bab44b1c7bad477f' id='type-id-1914'/>
    <!-- tcmalloc::ThreadCache* const -->
    <qualified-type-def type-id='type-id-1914' const='yes' hash='71ffc4e524dd1317' id='type-id-1915'/>
    <!-- tcmalloc::ThreadCache::FreeList* -->
    <pointer-type-def type-id='type-id-1770' size-in-bits='64' hash='f97bdd95602640f1' id='type-id-1916'/>
    <!-- tcmalloc::ThreadCache::FreeList* const -->
    <qualified-type-def type-id='type-id-1916' const='yes' hash='356050ca68b0b741' id='type-id-1917'/>
    <!-- typedef __va_list_tag __va_list_tag* -->
    <pointer-type-def type-id='type-id-1765' size-in-bits='64' hash='648313adc1c4c534' id='type-id-80'/>
    <!-- uint64_t* -->
    <pointer-type-def type-id='type-id-16' size-in-bits='64' hash='a7b536d51360d693' id='type-id-1918'/>
    <!-- void (*)(void) -->
    <pointer-type-def type-id='type-id-158' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-261'/>
    <!-- void (*)(void*) -->
    <pointer-type-def type-id='type-id-204' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-255'/>
    <!-- void (*)(void*)* -->
    <pointer-type-def type-id='type-id-255' size-in-bits='64' hash='551ba7e18ed5752b' id='type-id-1919'/>
    <!-- void (*)(void*, size_t) -->
    <pointer-type-def type-id='type-id-1714' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-97'/>
    <!-- void (*)(void*, size_t)* -->
    <pointer-type-def type-id='type-id-97' size-in-bits='64' hash='551ba7e18ed5752b' id='type-id-99'/>
    <!-- void (*)(void*, void*) -->
    <pointer-type-def type-id='type-id-205' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1920'/>
    <!-- void* (*)(size_t, size_t, void*) -->
    <pointer-type-def type-id='type-id-1921' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1922'/>
    <!-- void* (*)(size_t, void*) -->
    <pointer-type-def type-id='type-id-1923' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1924'/>
    <!-- void* (*)(unsigned long int) -->
    <pointer-type-def type-id='type-id-1925' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-254'/>
    <!-- void* (*)(void*, size_t, void*) -->
    <pointer-type-def type-id='type-id-1926' size-in-bits='64' hash='fd7a63c0c6c822c4' id='type-id-1927'/>
    <!-- void** -->
    <pointer-type-def type-id='type-id-56' size-in-bits='64' hash='473a9667a2856e32' id='type-id-184'/>
    <!-- volatile Atomic32 -->
    <qualified-type-def type-id='type-id-107' volatile='yes' hash='8c45c25581201c2f' id='type-id-1381'/>
    <!-- volatile Atomic32* -->
    <pointer-type-def type-id='type-id-1381' size-in-bits='64' hash='ae83365f592d51db' id='type-id-123'/>
    <!-- volatile base::subtle::Atomic64 -->
    <qualified-type-def type-id='type-id-91' volatile='yes' hash='fc5341d6843254bb' id='type-id-1324'/>
    <!-- volatile unsigned long int -->
    <qualified-type-def type-id='type-id-21' volatile='yes' hash='35100b0f5f737016' id='type-id-1785'/>
    <!-- wchar_t* -->
    <pointer-type-def type-id='type-id-1786' size-in-bits='64' hash='fb9a8c973ae04ed8' id='type-id-1928'/>
    <!-- wchar_t** -->
    <pointer-type-def type-id='type-id-1928' size-in-bits='64' hash='f6157ba411f3141d' id='type-id-1929'/>
    <!-- TCMalloc_PageMap3<35>::Node* -->
    <pointer-type-def type-id='type-id-167' size-in-bits='64' id='type-id-1745'/>
    <!-- _IO_lock_t* -->
    <pointer-type-def type-id='type-id-1773' size-in-bits='64' id='type-id-175'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- class std::allocator<MallocExtension::FreeListInfo> -->
      <class-decl name='allocator&lt;MallocExtension::FreeListInfo&gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' hash='4196f1ed71ff105b#2' id='type-id-1847'>
        <!-- class __gnu_cxx::new_allocator<MallocExtension::FreeListInfo> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1801'/>
      </class-decl>
      <!-- class std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
      <class-decl name='vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt;' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='171' column='1' hash='169780ee7ddc8ee1#2' id='type-id-1856'>
        <!-- struct std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
        <base-class access='protected' layout-offset-in-bits='0' type-id='type-id-1843'/>
        <member-function access='protected'>
          <!-- void std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_M_insert_aux(__gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >, const MallocExtension::FreeListInfo&) -->
          <function-decl name='_M_insert_aux' mangled-name='_ZNSt6vectorIN15MallocExtension12FreeListInfoESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='295' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt6vectorIN15MallocExtension12FreeListInfoESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_' hash='a2e220d37fc5ad6f'>
            <!-- implicit parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-1223' is-artificial='yes'/>
            <!-- parameter of type 'class __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >' -->
            <parameter type-id='type-id-1230' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
            <!-- parameter of type 'const MallocExtension::FreeListInfo&' -->
            <parameter type-id='type-id-1231' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Destroy_aux<true> -->
      <class-decl name='_Destroy_aux&lt;true&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_construct.h' line='106' column='1' hash='8952cbdd7468e90d#2' id='type-id-1930'/>
      <!-- struct std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
      <class-decl name='_Vector_base&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='70' column='1' hash='8776b2c03c0df9cd#2' id='type-id-1843'>
        <member-type access='public'>
          <!-- struct std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl -->
          <class-decl name='_Vector_impl' is-struct='yes' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='75' column='1' hash='0b6baeb7e0e4fe82' id='type-id-1891'>
            <!-- class std::allocator<MallocExtension::FreeListInfo> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1847'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- MallocExtension::FreeListInfo* std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl::_M_start -->
              <var-decl name='_M_start' type-id='type-id-1237' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='76' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- MallocExtension::FreeListInfo* std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl::_M_finish -->
              <var-decl name='_M_finish' type-id='type-id-1237' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='77' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- MallocExtension::FreeListInfo* std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl::_M_end_of_storage -->
              <var-decl name='_M_end_of_storage' type-id='type-id-1237' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='78' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-1891' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='136' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct std::__copy_move<false, true, std::random_access_iterator_tag> -->
      <class-decl name='__copy_move&lt;false, true, std::random_access_iterator_tag&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='307' column='1' hash='ded2380d89c762e7#2' id='type-id-1931'/>
      <!-- struct std::__copy_move_backward<false, true, std::random_access_iterator_tag> -->
      <class-decl name='__copy_move_backward&lt;false, true, std::random_access_iterator_tag&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='511' column='1' hash='cdce412c223d47b0#2' id='type-id-1932'/>
      <!-- struct std::__miter_base<MallocExtension::FreeListInfo*, false> -->
      <class-decl name='__miter_base&lt;MallocExtension::FreeListInfo*, false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' hash='fd8d978efa9fead3' id='type-id-1933'/>
      <!-- struct std::__niter_base<MallocExtension::FreeListInfo*, false> -->
      <class-decl name='__niter_base&lt;MallocExtension::FreeListInfo*, false&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' hash='1f6d360e2865cb58' id='type-id-1934'/>
      <!-- struct std::__uninitialized_copy<true> -->
      <class-decl name='__uninitialized_copy&lt;true&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h' line='87' column='1' hash='30bd64e01784e92e#2' id='type-id-1935'/>
      <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> > -->
      <class-decl name='basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stringfwd.h' line='52' column='1' hash='41e28a36dddcbfdb#2' id='type-id-996'>
        <member-type access='private'>
          <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider -->
          <class-decl name='_Alloc_hider' is-struct='yes' visibility='default' size-in-bits='64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='258' column='1' hash='b2053c926fcda493' id='type-id-1895'>
            <!-- class std::allocator<char> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-997'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- char* std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_M_p -->
              <var-decl name='_M_p' type-id='type-id-130' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='262' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep -->
          <class-decl name='_Rep' is-struct='yes' visibility='default' size-in-bits='192' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='148' column='1' hash='1100d7022e36b961' id='type-id-679'>
            <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1936'/>
            <member-function access='public'>
              <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep::_M_destroy(const std::allocator<char>&) -->
              <function-decl name='_M_destroy' mangled-name='_ZNSs4_Rep10_M_destroyERKSaIcE' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='445' column='1' visibility='default' binding='global' size-in-bits='64' hash='b7fac77a888b27ae'>
                <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep*' -->
                <parameter type-id='type-id-833' is-artificial='yes'/>
                <!-- parameter of type 'const std::allocator<char>&' -->
                <parameter type-id='type-id-1851'/>
                <!-- void -->
                <return type-id='type-id-58'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <member-type access='public'>
          <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base -->
          <class-decl name='_Rep_base' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1936'/>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dataplus -->
          <var-decl name='_M_dataplus' type-id='type-id-1895' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='274' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long int, unsigned long int, unsigned long int) -->
          <function-decl name='_M_mutate' mangled-name='_ZNSs9_M_mutateEmmm' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='469' column='1' visibility='default' binding='global' size-in-bits='64' hash='a46227d8770aeeb5'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-21'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-21'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-21'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_leak_hard() -->
          <function-decl name='_M_leak_hard' mangled-name='_ZNSs12_M_leak_hardEv' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='455' column='1' visibility='default' binding='global' size-in-bits='64' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long int, char) -->
          <function-decl name='resize' mangled-name='_ZNSs6resizeEmc' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='640' column='1' visibility='default' binding='global' size-in-bits='64' hash='c0419ee95cd6d61e'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-21'/>
            <!-- parameter of type 'char' -->
            <parameter type-id='type-id-82'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long int) -->
          <function-decl name='reserve' mangled-name='_ZNSs7reserveEm' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='502' column='1' visibility='default' binding='global' size-in-bits='64' hash='e0055d99adb0e173'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-21'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(const char*, unsigned long int) -->
          <function-decl name='append' mangled-name='_ZNSs6appendEPKcm' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='298' column='1' visibility='default' binding='global' size-in-bits='64' hash='057ff5c51024c26f'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-60'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-21'/>
            <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >& -->
            <return type-id='type-id-961'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(const char*) -->
          <function-decl name='append' mangled-name='_ZNSs6appendEPKc' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='868' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' hash='097fbf330d1f319d'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-60'/>
            <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >& -->
            <return type-id='type-id-961'/>
          </function-decl>
        </member-function>
        <member-function access='public' const='yes'>
          <!-- int std::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(const char*) -->
          <function-decl name='compare' mangled-name='_ZNKSs7compareEPKc' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='949' column='1' visibility='default' binding='global' size-in-bits='64' hash='e9ea91a7eab8302c'>
            <!-- implicit parameter of type 'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-677' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-60'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::nothrow_t -->
      <class-decl name='nothrow_t' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/new' line='67' column='1' hash='7306652b108f8991' id='type-id-1853'/>
      <!-- struct std::numeric_limits<long unsigned int> -->
      <class-decl name='numeric_limits&lt;long unsigned int&gt;' is-struct='yes' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='926' column='1' hash='67b6badeff4cafa3' id='type-id-1937'/>
      <!-- class std::bad_alloc -->
      <class-decl name='bad_alloc' visibility='default' is-declaration-only='yes' id='type-id-1938'/>
      <!-- class std::exception -->
      <class-decl name='exception' visibility='default' is-declaration-only='yes' id='type-id-1939'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;MallocExtension::FreeListInfo*, std::vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1940'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1941'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<const MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;const MallocExtension::FreeListInfo*, std::vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1942'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1943'/>
    </namespace-decl>
    <!-- std::bad_alloc* -->
    <pointer-type-def type-id='type-id-1938' size-in-bits='64' id='type-id-1944'/>
    <!-- std::bad_alloc* const -->
    <qualified-type-def type-id='type-id-1944' const='yes' id='type-id-1945'/>
    <!-- std::exception* -->
    <pointer-type-def type-id='type-id-1939' size-in-bits='64' id='type-id-1946'/>
    <!-- std::exception* const -->
    <qualified-type-def type-id='type-id-1946' const='yes' id='type-id-1947'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- struct base::MallocRange -->
      <class-decl name='MallocRange' is-struct='yes' visibility='default' size-in-bits='256' filepath='./src/gperftools/malloc_extension.h' line='399' column='1' hash='9566635b10c32994#2' id='type-id-1804'>
        <member-type access='public'>
          <!-- enum base::MallocRange::Type -->
          <enum-decl name='Type' size-in-bits='32' alignment-in-bits='32' filepath='./src/gperftools/malloc_extension.h' line='400' column='1' hash='8144e2d501a461b9' id='type-id-1948'>
            <underlying-type type-id='type-id-93'/>
            <enumerator name='INUSE' value='0'/>
            <enumerator name='FREE' value='1'/>
            <enumerator name='UNMAPPED' value='2'/>
            <enumerator name='UNKNOWN' value='3'/>
          </enum-decl>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- uintptr_t base::MallocRange::address -->
          <var-decl name='address' type-id='type-id-277' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='408' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- size_t base::MallocRange::length -->
          <var-decl name='length' type-id='type-id-61' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='409' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='128'>
          <!-- base::MallocRange::Type base::MallocRange::type -->
          <var-decl name='type' type-id='type-id-1948' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='410' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='192'>
          <!-- double base::MallocRange::fraction -->
          <var-decl name='fraction' type-id='type-id-2' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='411' column='1'/>
        </data-member>
      </class-decl>
      <!-- namespace base::subtle -->
      <namespace-decl name='subtle'>
      </namespace-decl>
      <!-- namespace base::internal -->
      <namespace-decl name='internal'>
        <!-- struct base::internal::HookList<void (*)(const void*)> -->
        <class-decl name='HookList&lt;void (*)(const void*)&gt;' is-struct='yes' visibility='default' size-in-bits='576' filepath='./src/malloc_hook-inl.h' line='59' column='1' hash='dbc4247a3a7e4b61#2' id='type-id-1805'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-1329' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-1330' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
        <!-- struct base::internal::HookList<void (*)(const void*, size_t)> -->
        <class-decl name='HookList&lt;void (*)(const void*, size_t)&gt;' is-struct='yes' visibility='default' size-in-bits='576' filepath='./src/malloc_hook-inl.h' line='59' column='1' hash='28262422a7834dca#2' id='type-id-108'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, size_t)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-1329' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, size_t)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-1330' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
          <member-function access='public'>
            <!-- void (*)(void*, size_t) base::internal::HookList<void (*)(const void*, size_t)>::GetSingular() -->
            <function-decl name='GetSingular' mangled-name='_ZNK4base8internal8HookListIPFvPKvmEE11GetSingularEv' filepath='src/malloc_hook-inl.h' line='85' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base8internal8HookListIPFvPKvmEE11GetSingularEv' hash='5695f5ce05a4c55f'>
              <!-- implicit parameter of type 'const base::internal::HookList<void (*)(const void*, size_t)>*' -->
              <parameter type-id='type-id-96' is-artificial='yes'/>
              <!-- void (*)(void*, size_t) -->
              <return type-id='type-id-97'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- bool base::internal::HookList<void (*)(const void*, size_t)>::empty() -->
            <function-decl name='empty' mangled-name='_ZNK4base8internal8HookListIPFvPKvmEE5emptyEv' filepath='src/malloc_hook-inl.h' line='80' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base8internal8HookListIPFvPKvmEE5emptyEv' hash='c7c710e908194b91'>
              <!-- implicit parameter of type 'const base::internal::HookList<void (*)(const void*, size_t)>*' -->
              <parameter type-id='type-id-96' is-artificial='yes'/>
              <!-- bool -->
              <return type-id='type-id-59'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- void base::internal::HookList<void (*)(const void*, size_t)>::FixupPrivEndLocked() -->
            <function-decl name='FixupPrivEndLocked' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE18FixupPrivEndLockedEv' filepath='src/malloc_hook-inl.h' line='67' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE18FixupPrivEndLockedEv' hash='7f32ffea222edbe7'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>*' -->
              <parameter type-id='type-id-98' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-58'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- int base::internal::HookList<void (*)(const void*, size_t)>::Traverse(void (*)(void*, size_t)*, int) -->
            <function-decl name='Traverse' mangled-name='_ZNK4base8internal8HookListIPFvPKvmEE8TraverseEPS5_i' filepath='src/malloc_hook-inl.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base8internal8HookListIPFvPKvmEE8TraverseEPS5_i' hash='22c907d6003d7682'>
              <!-- implicit parameter of type 'const base::internal::HookList<void (*)(const void*, size_t)>*' -->
              <parameter type-id='type-id-96' is-artificial='yes'/>
              <!-- parameter of type 'void (*)(void*, size_t)*' -->
              <parameter type-id='type-id-99'/>
              <!-- parameter of type 'int' -->
              <parameter type-id='type-id-1'/>
              <!-- int -->
              <return type-id='type-id-1'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- void (*)(void*, size_t) base::internal::HookList<void (*)(const void*, size_t)>::ExchangeSingular(void (*)(void*, size_t)) -->
            <function-decl name='ExchangeSingular' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE16ExchangeSingularES5_' filepath='src/malloc_hook-inl.h' line='90' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE16ExchangeSingularES5_' hash='e7946129631a25a2'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>*' -->
              <parameter type-id='type-id-98' is-artificial='yes'/>
              <!-- parameter of type 'void (*)(void*, size_t)' -->
              <parameter type-id='type-id-97' filepath='src/malloc_hook-inl.h' line='90' column='1'/>
              <!-- void (*)(void*, size_t) -->
              <return type-id='type-id-97'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- bool base::internal::HookList<void (*)(const void*, size_t)>::Remove(void (*)(void*, size_t)) -->
            <function-decl name='Remove' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE6RemoveES5_' filepath='src/malloc_hook-inl.h' line='72' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE6RemoveES5_' hash='e698fbedb78e4cd2'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>*' -->
              <parameter type-id='type-id-98' is-artificial='yes'/>
              <!-- parameter of type 'void (*)(void*, size_t)' -->
              <parameter type-id='type-id-97' filepath='src/malloc_hook-inl.h' line='72' column='1'/>
              <!-- bool -->
              <return type-id='type-id-59'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- bool base::internal::HookList<void (*)(const void*, size_t)>::Add(void (*)(void*, size_t)) -->
            <function-decl name='Add' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE3AddES5_' filepath='src/malloc_hook-inl.h' line='65' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE3AddES5_' hash='e698fbedb78e4cd2'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>*' -->
              <parameter type-id='type-id-98' is-artificial='yes'/>
              <!-- parameter of type 'void (*)(void*, size_t)' -->
              <parameter type-id='type-id-97' filepath='src/malloc_hook-inl.h' line='72' column='1'/>
              <!-- bool -->
              <return type-id='type-id-59'/>
            </function-decl>
          </member-function>
        </class-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- namespace __gnu_cxx -->
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::new_allocator<MallocExtension::FreeListInfo> -->
      <class-decl name='new_allocator&lt;MallocExtension::FreeListInfo&gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' hash='a353bdf879eb6219' id='type-id-1801'/>
      <!-- class __gnu_cxx::new_allocator<char> -->
      <class-decl name='new_allocator&lt;char&gt;' visibility='default' size-in-bits='8' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' hash='084a85392ac35fed#2' id='type-id-998'/>
      <!-- class __gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > -->
      <class-decl name='__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1949'/>
      <!-- class __gnu_cxx::__normal_iterator<const MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > > -->
      <class-decl name='__normal_iterator&lt;const MallocExtension::FreeListInfo*, std::vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1950'/>
      <!-- class __gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > -->
      <class-decl name='__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1951'/>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- class tcmalloc::CentralFreeList -->
      <class-decl name='CentralFreeList' visibility='default' size-in-bits='9344' filepath='src/central_freelist.h' line='50' column='1' hash='a9d8084b0b5fdc8d#2' id='type-id-210'>
        <member-type access='private'>
          <!-- struct tcmalloc::CentralFreeList::TCEntry -->
          <class-decl name='TCEntry' is-struct='yes' visibility='default' size-in-bits='128' filepath='src/central_freelist.h' line='97' column='1' hash='4ecbaf6d12a3e73b' id='type-id-1766'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- void* tcmalloc::CentralFreeList::TCEntry::head -->
              <var-decl name='head' type-id='type-id-56' visibility='default' filepath='src/central_freelist.h' line='98' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- void* tcmalloc::CentralFreeList::TCEntry::tail -->
              <var-decl name='tail' type-id='type-id-56' visibility='default' filepath='src/central_freelist.h' line='99' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- SpinLock tcmalloc::CentralFreeList::lock_ -->
          <var-decl name='lock_' type-id='type-id-102' visibility='default' filepath='src/central_freelist.h' line='164' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- size_t tcmalloc::CentralFreeList::size_class_ -->
          <var-decl name='size_class_' type-id='type-id-61' visibility='default' filepath='src/central_freelist.h' line='167' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- tcmalloc::Span tcmalloc::CentralFreeList::empty_ -->
          <var-decl name='empty_' type-id='type-id-164' visibility='default' filepath='src/central_freelist.h' line='168' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='512'>
          <!-- tcmalloc::Span tcmalloc::CentralFreeList::nonempty_ -->
          <var-decl name='nonempty_' type-id='type-id-164' visibility='default' filepath='src/central_freelist.h' line='169' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='896'>
          <!-- size_t tcmalloc::CentralFreeList::num_spans_ -->
          <var-decl name='num_spans_' type-id='type-id-61' visibility='default' filepath='src/central_freelist.h' line='170' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='960'>
          <!-- size_t tcmalloc::CentralFreeList::counter_ -->
          <var-decl name='counter_' type-id='type-id-61' visibility='default' filepath='src/central_freelist.h' line='171' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='1024'>
          <!-- tcmalloc::CentralFreeList::TCEntry tcmalloc::CentralFreeList::tc_slots_[64] -->
          <var-decl name='tc_slots_' type-id='type-id-1767' visibility='default' filepath='src/central_freelist.h' line='178' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='9216'>
          <!-- int32_t tcmalloc::CentralFreeList::used_slots_ -->
          <var-decl name='used_slots_' type-id='type-id-161' visibility='default' filepath='src/central_freelist.h' line='182' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='9248'>
          <!-- int32_t tcmalloc::CentralFreeList::cache_size_ -->
          <var-decl name='cache_size_' type-id='type-id-161' visibility='default' filepath='src/central_freelist.h' line='186' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='9280'>
          <!-- int32_t tcmalloc::CentralFreeList::max_cache_size_ -->
          <var-decl name='max_cache_size_' type-id='type-id-161' visibility='default' filepath='src/central_freelist.h' line='188' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- int tcmalloc::CentralFreeList::FetchFromOneSpans(int, void**, void**) -->
          <function-decl name='FetchFromOneSpans' mangled-name='_ZN8tcmalloc15CentralFreeList17FetchFromOneSpansEiPPvS2_' filepath='src/central_freelist.cc' line='290' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList17FetchFromOneSpansEiPPvS2_' hash='05583901df42bd48'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-184'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-184'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::CentralFreeList::Init(size_t) -->
          <function-decl name='Init' mangled-name='_ZN8tcmalloc15CentralFreeList4InitEm' filepath='src/central_freelist.cc' line='47' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList4InitEm' hash='e0055d99adb0e173'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-61'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::CentralFreeList::Populate() -->
          <function-decl name='Populate' mangled-name='_ZN8tcmalloc15CentralFreeList8PopulateEv' filepath='src/central_freelist.cc' line='321' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList8PopulateEv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- int tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**) -->
          <function-decl name='FetchFromOneSpansSafe' mangled-name='_ZN8tcmalloc15CentralFreeList21FetchFromOneSpansSafeEiPPvS2_' filepath='src/central_freelist.cc' line='281' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList21FetchFromOneSpansSafeEiPPvS2_' hash='05583901df42bd48'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-184'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-184'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- size_t tcmalloc::CentralFreeList::OverheadBytes() -->
          <function-decl name='OverheadBytes' mangled-name='_ZN8tcmalloc15CentralFreeList13OverheadBytesEv' filepath='src/central_freelist.cc' line='375' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList13OverheadBytesEv' hash='e0055d99adb0e173'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- typedef size_t -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- int tcmalloc::CentralFreeList::tc_length() -->
          <function-decl name='tc_length' mangled-name='_ZN8tcmalloc15CentralFreeList9tc_lengthEv' filepath='src/central_freelist.cc' line='370' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList9tc_lengthEv' hash='388da3fa973fde78'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- int tcmalloc::CentralFreeList::RemoveRange(void**, void**, int) -->
          <function-decl name='RemoveRange' mangled-name='_ZN8tcmalloc15CentralFreeList11RemoveRangeEPPvS2_i' filepath='src/central_freelist.cc' line='246' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList11RemoveRangeEPPvS2_i' hash='14b2e307a32069c0'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-184'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-184'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::CentralFreeList::ReleaseToSpans(void*) -->
          <function-decl name='ReleaseToSpans' mangled-name='_ZN8tcmalloc15CentralFreeList14ReleaseToSpansEPv' filepath='src/central_freelist.cc' line='104' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList14ReleaseToSpansEPv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::CentralFreeList::ReleaseListToSpans(void*) -->
          <function-decl name='ReleaseListToSpans' mangled-name='_ZN8tcmalloc15CentralFreeList18ReleaseListToSpansEPv' filepath='src/central_freelist.cc' line='82' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList18ReleaseListToSpansEPv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::CentralFreeList::ShrinkCache(int, bool) -->
          <function-decl name='ShrinkCache' mangled-name='_ZN8tcmalloc15CentralFreeList11ShrinkCacheEib' filepath='src/central_freelist.cc' line='203' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList11ShrinkCacheEib' hash='6e5147834edeef47'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- parameter of type 'bool' -->
            <parameter type-id='type-id-59'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- bool tcmalloc::CentralFreeList::EvictRandomSizeClass(bool) -->
          <function-decl name='EvictRandomSizeClass' mangled-name='_ZN8tcmalloc15CentralFreeList20EvictRandomSizeClassEib' filepath='src/central_freelist.cc' line='151' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList20EvictRandomSizeClassEib' hash='6e5147834edeef47#2'>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- parameter of type 'bool' -->
            <parameter type-id='type-id-59'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::CentralFreeList::MakeCacheSpace() -->
          <function-decl name='MakeCacheSpace' mangled-name='_ZN8tcmalloc15CentralFreeList14MakeCacheSpaceEv' filepath='src/central_freelist.cc' line='167' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList14MakeCacheSpaceEv' hash='c7c710e908194b91'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::CentralFreeList::InsertRange(void*, void*, int) -->
          <function-decl name='InsertRange' mangled-name='_ZN8tcmalloc15CentralFreeList11InsertRangeEPvS1_i' filepath='src/central_freelist.cc' line='231' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList11InsertRangeEPvS1_i' hash='388da3fa973fde78'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-183' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class tcmalloc::CentralFreeListPadded -->
      <class-decl name='CentralFreeListPadded' visibility='default' size-in-bits='9728' filepath='src/central_freelist.h' line='206' column='1' hash='b88aff034a469ac5#2' id='type-id-1604'>
        <!-- class tcmalloc::CentralFreeListPaddedTo<16> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1952'/>
      </class-decl>
      <!-- class tcmalloc::CentralFreeListPaddedTo<16> -->
      <class-decl name='CentralFreeListPaddedTo&lt;16&gt;' visibility='default' size-in-bits='9728' filepath='src/central_freelist.h' line='196' column='1' hash='bf8c17c4a17f3ccc#2' id='type-id-1952'>
        <!-- class tcmalloc::CentralFreeList -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-210'/>
        <data-member access='private' layout-offset-in-bits='9312'>
          <!-- char tcmalloc::CentralFreeListPaddedTo<16>::pad_[48] -->
          <var-decl name='pad_' type-id='type-id-1716' visibility='default' filepath='src/central_freelist.h' line='198' column='1'/>
        </data-member>
      </class-decl>
      <!-- class tcmalloc::LogItem -->
      <class-decl name='LogItem' visibility='default' size-in-bits='128' filepath='src/internal_logging.h' line='70' column='1' hash='fc4f13694ba15380#2' id='type-id-1204'>
        <member-type access='private'>
          <!-- enum tcmalloc::LogItem::Tag -->
          <enum-decl name='Tag' size-in-bits='32' alignment-in-bits='32' filepath='src/internal_logging.h' line='83' column='1' hash='52c320546798d9ea' id='type-id-1953'>
            <underlying-type type-id='type-id-93'/>
            <enumerator name='kStr' value='0'/>
            <enumerator name='kSigned' value='1'/>
            <enumerator name='kUnsigned' value='2'/>
            <enumerator name='kPtr' value='3'/>
            <enumerator name='kEnd' value='4'/>
          </enum-decl>
        </member-type>
        <member-type access='private'>
          <!-- union {const char* str; void* ptr; int64_t snum; uint64_t unum;} -->
          <union-decl name='__anonymous_union__' visibility='default' size-in-bits='64' is-anonymous='yes' filepath='src/internal_logging.h' line='91' column='1' hash='c84d4d26396bf61f' id='type-id-1954'>
            <data-member access='public'>
              <!-- const char* str -->
              <var-decl name='str' type-id='type-id-60' visibility='default' filepath='src/internal_logging.h' line='92' column='1'/>
            </data-member>
            <data-member access='public'>
              <!-- void* ptr -->
              <var-decl name='ptr' type-id='type-id-56' visibility='default' filepath='src/internal_logging.h' line='93' column='1'/>
            </data-member>
            <data-member access='public'>
              <!-- int64_t snum -->
              <var-decl name='snum' type-id='type-id-90' visibility='default' filepath='src/internal_logging.h' line='94' column='1'/>
            </data-member>
            <data-member access='public'>
              <!-- uint64_t unum -->
              <var-decl name='unum' type-id='type-id-16' visibility='default' filepath='src/internal_logging.h' line='95' column='1'/>
            </data-member>
          </union-decl>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- tcmalloc::LogItem::Tag tcmalloc::LogItem::tag_ -->
          <var-decl name='tag_' type-id='type-id-1953' visibility='default' filepath='src/internal_logging.h' line='90' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- union {const char* str; void* ptr; int64_t snum; uint64_t unum;} tcmalloc::LogItem::u_ -->
          <var-decl name='u_' type-id='type-id-1954' visibility='default' filepath='src/internal_logging.h' line='96' column='1'/>
        </data-member>
      </class-decl>
      <!-- class tcmalloc::PageHeap -->
      <class-decl name='PageHeap' visibility='default' size-in-bits='4293888' filepath='src/page_heap.h' line='104' column='1' hash='d7785d038534f403#2' id='type-id-207'>
        <member-type access='private'>
          <!-- struct tcmalloc::PageHeap::LargeSpanStats -->
          <class-decl name='LargeSpanStats' is-struct='yes' visibility='default' size-in-bits='192' filepath='src/page_heap.h' line='164' column='1' hash='7deb188dac36d098' id='type-id-1904'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- int64 tcmalloc::PageHeap::LargeSpanStats::spans -->
              <var-decl name='spans' type-id='type-id-105' visibility='default' filepath='src/page_heap.h' line='165' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- int64 tcmalloc::PageHeap::LargeSpanStats::normal_pages -->
              <var-decl name='normal_pages' type-id='type-id-105' visibility='default' filepath='src/page_heap.h' line='166' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- int64 tcmalloc::PageHeap::LargeSpanStats::returned_pages -->
              <var-decl name='returned_pages' type-id='type-id-105' visibility='default' filepath='src/page_heap.h' line='167' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct tcmalloc::PageHeap::SmallSpanStats -->
          <class-decl name='SmallSpanStats' is-struct='yes' visibility='default' size-in-bits='16384' filepath='src/page_heap.h' line='155' column='1' hash='af5856ff69d5d847' id='type-id-1905'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- int64 tcmalloc::PageHeap::SmallSpanStats::normal_length[128] -->
              <var-decl name='normal_length' type-id='type-id-1749' visibility='default' filepath='src/page_heap.h' line='158' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='8192'>
              <!-- int64 tcmalloc::PageHeap::SmallSpanStats::returned_length[128] -->
              <var-decl name='returned_length' type-id='type-id-1749' visibility='default' filepath='src/page_heap.h' line='159' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct tcmalloc::PageHeap::SpanList -->
          <class-decl name='SpanList' is-struct='yes' visibility='default' size-in-bits='768' filepath='src/page_heap.h' line='232' column='1' hash='8754fdd2ac64abe6' id='type-id-1768'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- tcmalloc::Span tcmalloc::PageHeap::SpanList::normal -->
              <var-decl name='normal' type-id='type-id-164' visibility='default' filepath='src/page_heap.h' line='233' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='384'>
              <!-- tcmalloc::Span tcmalloc::PageHeap::SpanList::returned -->
              <var-decl name='returned' type-id='type-id-164' visibility='default' filepath='src/page_heap.h' line='234' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct tcmalloc::PageHeap::Stats -->
          <class-decl name='Stats' is-struct='yes' visibility='default' size-in-bits='256' filepath='src/page_heap.h' line='145' column='1' hash='f10b12017f64d53d' id='type-id-1755'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- uint64_t tcmalloc::PageHeap::Stats::system_bytes -->
              <var-decl name='system_bytes' type-id='type-id-16' visibility='default' filepath='src/page_heap.h' line='147' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- uint64_t tcmalloc::PageHeap::Stats::free_bytes -->
              <var-decl name='free_bytes' type-id='type-id-16' visibility='default' filepath='src/page_heap.h' line='148' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- uint64_t tcmalloc::PageHeap::Stats::unmapped_bytes -->
              <var-decl name='unmapped_bytes' type-id='type-id-16' visibility='default' filepath='src/page_heap.h' line='149' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='192'>
              <!-- uint64_t tcmalloc::PageHeap::Stats::committed_bytes -->
              <var-decl name='committed_bytes' type-id='type-id-16' visibility='default' filepath='src/page_heap.h' line='150' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- typedef TCMalloc_PageMap3<35> tcmalloc::PageHeap::PageMap -->
          <typedef-decl name='PageMap' type-id='type-id-1743' size-in-bits='128' filepath='src/page_heap.h' line='224' column='1' id='type-id-1955'/>
        </member-type>
        <member-type access='private'>
          <!-- typedef PackedCache<35, long unsigned int> tcmalloc::PageHeap::PageMapCache -->
          <typedef-decl name='PageMapCache' type-id='type-id-1730' size-in-bits='4194304' filepath='src/page_heap.h' line='225' column='1' id='type-id-1956'/>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- tcmalloc::PageHeap::PageMap tcmalloc::PageHeap::pagemap_ -->
          <var-decl name='pagemap_' type-id='type-id-1955' visibility='default' filepath='src/page_heap.h' line='226' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- tcmalloc::PageHeap::PageMapCache tcmalloc::PageHeap::pagemap_cache_ -->
          <var-decl name='pagemap_cache_' type-id='type-id-1956' visibility='default' filepath='src/page_heap.h' line='227' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='4194432'>
          <!-- tcmalloc::PageHeap::SpanList tcmalloc::PageHeap::large_ -->
          <var-decl name='large_' type-id='type-id-1768' visibility='default' filepath='src/page_heap.h' line='238' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='4195200'>
          <!-- tcmalloc::PageHeap::SpanList tcmalloc::PageHeap::free_[128] -->
          <var-decl name='free_' type-id='type-id-1769' visibility='default' filepath='src/page_heap.h' line='241' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='4293504'>
          <!-- tcmalloc::PageHeap::Stats tcmalloc::PageHeap::stats_ -->
          <var-decl name='stats_' type-id='type-id-1755' visibility='default' filepath='src/page_heap.h' line='244' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='4293760'>
          <!-- int64_t tcmalloc::PageHeap::scavenge_counter_ -->
          <var-decl name='scavenge_counter_' type-id='type-id-90' visibility='default' filepath='src/page_heap.h' line='302' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='4293824'>
          <!-- int tcmalloc::PageHeap::release_index_ -->
          <var-decl name='release_index_' type-id='type-id-1' visibility='default' filepath='src/page_heap.h' line='305' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='4293856'>
          <!-- bool tcmalloc::PageHeap::aggressive_decommit_ -->
          <var-decl name='aggressive_decommit_' type-id='type-id-59' visibility='default' filepath='src/page_heap.h' line='307' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::MayMergeSpans(tcmalloc::Span*, tcmalloc::Span*) -->
          <function-decl name='MayMergeSpans' mangled-name='_ZN8tcmalloc8PageHeap13MayMergeSpansEPNS_4SpanES2_' filepath='src/page_heap.cc' line='316' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap13MayMergeSpansEPNS_4SpanES2_' hash='37bb0ff623f303ce'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::RegisterSizeClass(tcmalloc::Span*, size_t) -->
          <function-decl name='RegisterSizeClass' mangled-name='_ZN8tcmalloc8PageHeap17RegisterSizeClassEPNS_4SpanEm' filepath='src/page_heap.cc' line='518' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap17RegisterSizeClassEPNS_4SpanEm' hash='ebab2e40fedd1db3'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-61'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::GetLargeSpanStats(tcmalloc::PageHeap::LargeSpanStats*) -->
          <function-decl name='GetLargeSpanStats' mangled-name='_ZN8tcmalloc8PageHeap17GetLargeSpanStatsEPNS0_14LargeSpanStatsE' filepath='src/page_heap.cc' line='537' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap17GetLargeSpanStatsEPNS0_14LargeSpanStatsE' hash='5287c32193a057e7'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::PageHeap::LargeSpanStats*' -->
            <parameter type-id='type-id-189'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::GetNextRange(PageID, base::MallocRange*) -->
          <function-decl name='GetNextRange' mangled-name='_ZN8tcmalloc8PageHeap12GetNextRangeEmPN4base11MallocRangeE' filepath='src/page_heap.cc' line='551' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap12GetNextRangeEmPN4base11MallocRangeE' hash='49299f0d79243915'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef PageID' -->
            <parameter type-id='type-id-190'/>
            <!-- parameter of type 'base::MallocRange*' -->
            <parameter type-id='type-id-191'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::Check() -->
          <function-decl name='Check' mangled-name='_ZN8tcmalloc8PageHeap5CheckEv' filepath='src/page_heap.cc' line='646' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap5CheckEv' hash='c7c710e908194b91'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::CheckList(tcmalloc::Span*, Length, Length, int) -->
          <function-decl name='CheckList' mangled-name='_ZN8tcmalloc8PageHeap9CheckListEPNS_4SpanEmmi' filepath='src/page_heap.cc' line='663' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap9CheckListEPNS_4SpanEmmi' hash='c0f70e7895fb5be5'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::CheckExpensive() -->
          <function-decl name='CheckExpensive' mangled-name='_ZN8tcmalloc8PageHeap14CheckExpensiveEv' filepath='src/page_heap.cc' line='652' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap14CheckExpensiveEv' hash='c7c710e908194b91'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- tcmalloc::Span* tcmalloc::PageHeap::Split(tcmalloc::Span*, Length) -->
          <function-decl name='Split' mangled-name='_ZN8tcmalloc8PageHeap5SplitEPNS_4SpanEm' filepath='src/page_heap.cc' line='222' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap5SplitEPNS_4SpanEm' hash='8a9780a59468e315'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- tcmalloc::Span* -->
            <return type-id='type-id-188'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::GetSmallSpanStats(tcmalloc::PageHeap::SmallSpanStats*) -->
          <function-decl name='GetSmallSpanStats' mangled-name='_ZN8tcmalloc8PageHeap17GetSmallSpanStatsEPNS0_14SmallSpanStatsE' filepath='src/page_heap.cc' line='530' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap17GetSmallSpanStatsEPNS0_14SmallSpanStatsE' hash='988bbfba08aca7f1'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::PageHeap::SmallSpanStats*' -->
            <parameter type-id='type-id-193'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::RemoveFromFreeList(tcmalloc::Span*) -->
          <function-decl name='RemoveFromFreeList' mangled-name='_ZN8tcmalloc8PageHeap18RemoveFromFreeListEPNS_4SpanE' filepath='src/page_heap.cc' line='415' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap18RemoveFromFreeListEPNS_4SpanE' hash='e089691e785388d9'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::PrependToFreeList(tcmalloc::Span*) -->
          <function-decl name='PrependToFreeList' mangled-name='_ZN8tcmalloc8PageHeap17PrependToFreeListEPNS_4SpanE' filepath='src/page_heap.cc' line='403' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap17PrependToFreeListEPNS_4SpanE' hash='e089691e785388d9'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::DecommitSpan(tcmalloc::Span*) -->
          <function-decl name='DecommitSpan' mangled-name='_ZN8tcmalloc8PageHeap12DecommitSpanEPNS_4SpanE' filepath='src/page_heap.cc' line='246' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap12DecommitSpanEPNS_4SpanE' hash='b836a24ffbd86a3b'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::MergeIntoFreeList(tcmalloc::Span*) -->
          <function-decl name='MergeIntoFreeList' mangled-name='_ZN8tcmalloc8PageHeap17MergeIntoFreeListEPNS_4SpanE' filepath='src/page_heap.cc' line='323' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap17MergeIntoFreeListEPNS_4SpanE' hash='e089691e785388d9'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- Length tcmalloc::PageHeap::ReleaseLastNormalSpan(tcmalloc::PageHeap::SpanList*) -->
          <function-decl name='ReleaseLastNormalSpan' mangled-name='_ZN8tcmalloc8PageHeap21ReleaseLastNormalSpanEPNS0_8SpanListE' filepath='src/page_heap.cc' line='456' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap21ReleaseLastNormalSpanEPNS0_8SpanListE' hash='e0bb13d58b9d984f'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::PageHeap::SpanList*' -->
            <parameter type-id='type-id-194'/>
            <!-- typedef Length -->
            <return type-id='type-id-192'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- Length tcmalloc::PageHeap::ReleaseAtLeastNPages(Length) -->
          <function-decl name='ReleaseAtLeastNPages' mangled-name='_ZN8tcmalloc8PageHeap20ReleaseAtLeastNPagesEm' filepath='src/page_heap.cc' line='471' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap20ReleaseAtLeastNPagesEm' hash='91495cdf6321a116'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- typedef Length -->
            <return type-id='type-id-192'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::EnsureLimit(Length, bool) -->
          <function-decl name='EnsureLimit' mangled-name='_ZN8tcmalloc8PageHeap11EnsureLimitEmb' filepath='src/page_heap.cc' line='494' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap11EnsureLimitEmb' hash='edf93e0e926f2972'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- parameter of type 'bool' -->
            <parameter type-id='type-id-59'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::IncrementalScavenge(Length) -->
          <function-decl name='IncrementalScavenge' mangled-name='_ZN8tcmalloc8PageHeap19IncrementalScavengeEm' filepath='src/page_heap.cc' line='425' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap19IncrementalScavengeEm' hash='e0055d99adb0e173'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::Delete(tcmalloc::Span*) -->
          <function-decl name='Delete' mangled-name='_ZN8tcmalloc8PageHeap6DeleteEPNS_4SpanE' filepath='src/page_heap.cc' line='299' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap6DeleteEPNS_4SpanE' hash='e089691e785388d9'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::GrowHeap(Length) -->
          <function-decl name='GrowHeap' mangled-name='_ZN8tcmalloc8PageHeap8GrowHeapEm' filepath='src/page_heap.cc' line='590' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap8GrowHeapEm' hash='7e544b18f5e89a62'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- bool -->
            <return type-id='type-id-59'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::CommitSpan(tcmalloc::Span*) -->
          <function-decl name='CommitSpan' mangled-name='_ZN8tcmalloc8PageHeap10CommitSpanEPNS_4SpanE' filepath='src/page_heap.cc' line='240' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap10CommitSpanEPNS_4SpanE' hash='e089691e785388d9'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- tcmalloc::Span* tcmalloc::PageHeap::Carve(tcmalloc::Span*, Length) -->
          <function-decl name='Carve' mangled-name='_ZN8tcmalloc8PageHeap5CarveEPNS_4SpanEm' filepath='src/page_heap.cc' line='256' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap5CarveEPNS_4SpanEm' hash='8a9780a59468e315'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-188'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- tcmalloc::Span* -->
            <return type-id='type-id-188'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- tcmalloc::Span* tcmalloc::PageHeap::AllocLarge(Length) -->
          <function-decl name='AllocLarge' mangled-name='_ZN8tcmalloc8PageHeap10AllocLargeEm' filepath='src/page_heap.cc' line='164' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap10AllocLargeEm' hash='ebab2e40fedd1db3'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- tcmalloc::Span* -->
            <return type-id='type-id-188'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- tcmalloc::Span* tcmalloc::PageHeap::SearchFreeAndLargeLists(Length) -->
          <function-decl name='SearchFreeAndLargeLists' mangled-name='_ZN8tcmalloc8PageHeap23SearchFreeAndLargeListsEm' filepath='src/page_heap.cc' line='80' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap23SearchFreeAndLargeListsEm' hash='ebab2e40fedd1db3'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- tcmalloc::Span* -->
            <return type-id='type-id-188'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- tcmalloc::Span* tcmalloc::PageHeap::New(Length) -->
          <function-decl name='New' mangled-name='_ZN8tcmalloc8PageHeap3NewEm' filepath='src/page_heap.cc' line='115' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap3NewEm' hash='ebab2e40fedd1db3'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-192'/>
            <!-- tcmalloc::Span* -->
            <return type-id='type-id-188'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::PageHeap::PageHeap() -->
          <function-decl name='PageHeap' mangled-name='_ZN8tcmalloc8PageHeapC1Ev' filepath='src/page_heap.cc' line='64' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeapC1Ev' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-187' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache> -->
      <class-decl name='PageHeapAllocator&lt;tcmalloc::ThreadCache&gt;' visibility='default' size-in-bits='256' filepath='src/page_heap_allocator.h' line='47' column='1' hash='bf2b82431a16e007#2' id='type-id-1869'>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- char* tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>::free_area_ -->
          <var-decl name='free_area_' type-id='type-id-130' visibility='default' filepath='src/page_heap_allocator.h' line='102' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- size_t tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>::free_avail_ -->
          <var-decl name='free_avail_' type-id='type-id-61' visibility='default' filepath='src/page_heap_allocator.h' line='103' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- void* tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>::free_list_ -->
          <var-decl name='free_list_' type-id='type-id-56' visibility='default' filepath='src/page_heap_allocator.h' line='106' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='192'>
          <!-- int tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>::inuse_ -->
          <var-decl name='inuse_' type-id='type-id-1' visibility='default' filepath='src/page_heap_allocator.h' line='109' column='1'/>
        </data-member>
      </class-decl>
      <!-- class tcmalloc::Sampler -->
      <class-decl name='Sampler' visibility='default' size-in-bits='128' filepath='src/sampler.h' line='103' column='1' hash='954a33c14d96f5d1#2' id='type-id-1576'>
        <data-member access='public' static='yes'>
          <!-- static double tcmalloc::Sampler::log_table_[1024] -->
          <var-decl name='log_table_' type-id='type-id-1573' mangled-name='_ZN8tcmalloc7Sampler10log_table_E' visibility='default' filepath='src/sampler.cc' line='61' column='1' elf-symbol-id='_ZN8tcmalloc7Sampler10log_table_E'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- size_t tcmalloc::Sampler::bytes_until_sample_ -->
          <var-decl name='bytes_until_sample_' type-id='type-id-61' visibility='default' filepath='src/sampler.h' line='130' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- uint64_t tcmalloc::Sampler::rnd_ -->
          <var-decl name='rnd_' type-id='type-id-16' visibility='default' filepath='src/sampler.h' line='131' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- int tcmalloc::Sampler::GetSamplePeriod() -->
          <function-decl name='GetSamplePeriod' mangled-name='_ZN8tcmalloc7Sampler15GetSamplePeriodEv' filepath='src/sampler.cc' line='73' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7Sampler15GetSamplePeriodEv' hash='388da3fa973fde78'>
            <!-- implicit parameter of type 'tcmalloc::Sampler*' -->
            <parameter type-id='type-id-1575' is-artificial='yes'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- size_t tcmalloc::Sampler::PickNextSamplingPoint() -->
          <function-decl name='PickNextSamplingPoint' mangled-name='_ZN8tcmalloc7Sampler21PickNextSamplingPointEv' filepath='src/sampler.cc' line='112' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7Sampler21PickNextSamplingPointEv' hash='e0055d99adb0e173'>
            <!-- implicit parameter of type 'tcmalloc::Sampler*' -->
            <parameter type-id='type-id-1575' is-artificial='yes'/>
            <!-- typedef size_t -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::Sampler::Init(uint32_t) -->
          <function-decl name='Init' mangled-name='_ZN8tcmalloc7Sampler4InitEj' filepath='src/sampler.cc' line='78' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7Sampler4InitEj' hash='2bb88322482ae81c'>
            <!-- implicit parameter of type 'tcmalloc::Sampler*' -->
            <parameter type-id='type-id-1575' is-artificial='yes'/>
            <!-- parameter of type 'typedef uint32_t' -->
            <parameter type-id='type-id-19'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::Sampler::PopulateFastLog2Table() -->
          <function-decl name='PopulateFastLog2Table' mangled-name='_ZN8tcmalloc7Sampler21PopulateFastLog2TableEv' filepath='src/sampler.cc' line='66' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7Sampler21PopulateFastLog2TableEv' hash='7f32ffea222edbe7'>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::Sampler::InitStatics() -->
          <function-decl name='InitStatics' mangled-name='_ZN8tcmalloc7Sampler11InitStaticsEv' filepath='src/sampler.cc' line='97' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7Sampler11InitStaticsEv' hash='7f32ffea222edbe7'>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class tcmalloc::SizeMap -->
      <class-decl name='SizeMap' visibility='default' size-in-bits='31488' filepath='src/common.h' line='161' column='1' hash='e0a3f7757ed3e6ae#2' id='type-id-224'>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- int tcmalloc::SizeMap::num_objects_to_move_[88] -->
          <var-decl name='num_objects_to_move_' type-id='type-id-1751' visibility='default' filepath='src/common.h' line='168' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='2816'>
          <!-- unsigned char tcmalloc::SizeMap::class_array_[2169] -->
          <var-decl name='class_array_' type-id='type-id-1779' visibility='default' filepath='src/common.h' line='195' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='20224'>
          <!-- size_t tcmalloc::SizeMap::class_to_size_[88] -->
          <var-decl name='class_to_size_' type-id='type-id-1753' visibility='default' filepath='src/common.h' line='212' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='25856'>
          <!-- size_t tcmalloc::SizeMap::class_to_pages_[88] -->
          <var-decl name='class_to_pages_' type-id='type-id-1753' visibility='default' filepath='src/common.h' line='215' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- int tcmalloc::SizeMap::NumMoveSize(size_t) -->
          <function-decl name='NumMoveSize' mangled-name='_ZN8tcmalloc7SizeMap11NumMoveSizeEm' filepath='src/common.cc' line='99' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7SizeMap11NumMoveSizeEm' hash='b6a97d07f8261bc0'>
            <!-- implicit parameter of type 'tcmalloc::SizeMap*' -->
            <parameter type-id='type-id-203' is-artificial='yes'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-61'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::SizeMap::Init() -->
          <function-decl name='Init' mangled-name='_ZN8tcmalloc7SizeMap4InitEv' filepath='src/common.cc' line='122' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7SizeMap4InitEv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::SizeMap*' -->
            <parameter type-id='type-id-203' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class tcmalloc::Static -->
      <class-decl name='Static' visibility='default' size-in-bits='8' filepath='src/static_vars.h' line='50' column='1' hash='692e3fcb36a3ab26#2' id='type-id-240'>
        <data-member access='public' static='yes'>
          <!-- static SpinLock tcmalloc::Static::pageheap_lock_ -->
          <var-decl name='pageheap_lock_' type-id='type-id-102' mangled-name='_ZN8tcmalloc6Static14pageheap_lock_E' visibility='default' filepath='src/static_vars.cc' line='71' column='1' elf-symbol-id='_ZN8tcmalloc6Static14pageheap_lock_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static tcmalloc::SizeMap tcmalloc::Static::sizemap_ -->
          <var-decl name='sizemap_' type-id='type-id-224' mangled-name='_ZN8tcmalloc6Static8sizemap_E' visibility='default' filepath='src/static_vars.cc' line='72' column='1' elf-symbol-id='_ZN8tcmalloc6Static8sizemap_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static tcmalloc::CentralFreeListPadded tcmalloc::Static::central_cache_[88] -->
          <var-decl name='central_cache_' type-id='type-id-1605' mangled-name='_ZN8tcmalloc6Static14central_cache_E' visibility='default' filepath='src/static_vars.cc' line='73' column='1' elf-symbol-id='_ZN8tcmalloc6Static14central_cache_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static tcmalloc::PageHeapAllocator<tcmalloc::Span> tcmalloc::Static::span_allocator_ -->
          <var-decl name='span_allocator_' type-id='type-id-199' mangled-name='_ZN8tcmalloc6Static15span_allocator_E' visibility='default' filepath='src/static_vars.cc' line='74' column='1' elf-symbol-id='_ZN8tcmalloc6Static15span_allocator_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static tcmalloc::PageHeapAllocator<tcmalloc::StackTrace> tcmalloc::Static::stacktrace_allocator_ -->
          <var-decl name='stacktrace_allocator_' type-id='type-id-200' mangled-name='_ZN8tcmalloc6Static21stacktrace_allocator_E' visibility='default' filepath='src/static_vars.cc' line='75' column='1' elf-symbol-id='_ZN8tcmalloc6Static21stacktrace_allocator_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static tcmalloc::Span tcmalloc::Static::sampled_objects_ -->
          <var-decl name='sampled_objects_' type-id='type-id-164' mangled-name='_ZN8tcmalloc6Static16sampled_objects_E' visibility='default' filepath='src/static_vars.cc' line='76' column='1' elf-symbol-id='_ZN8tcmalloc6Static16sampled_objects_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket> tcmalloc::Static::bucket_allocator_ -->
          <var-decl name='bucket_allocator_' type-id='type-id-201' mangled-name='_ZN8tcmalloc6Static17bucket_allocator_E' visibility='default' filepath='src/static_vars.cc' line='77' column='1' elf-symbol-id='_ZN8tcmalloc6Static17bucket_allocator_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static tcmalloc::StackTrace* tcmalloc::Static::growth_stacks_ -->
          <var-decl name='growth_stacks_' type-id='type-id-1913' mangled-name='_ZN8tcmalloc6Static14growth_stacks_E' visibility='default' filepath='src/static_vars.cc' line='78' column='1' elf-symbol-id='_ZN8tcmalloc6Static14growth_stacks_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static tcmalloc::PageHeap* tcmalloc::Static::pageheap_ -->
          <var-decl name='pageheap_' type-id='type-id-187' mangled-name='_ZN8tcmalloc6Static9pageheap_E' visibility='default' filepath='src/static_vars.cc' line='79' column='1' elf-symbol-id='_ZN8tcmalloc6Static9pageheap_E'/>
        </data-member>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::Static::InitStaticVars() -->
          <function-decl name='InitStaticVars' mangled-name='_ZN8tcmalloc6Static14InitStaticVarsEv' filepath='src/static_vars.cc' line='82' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc6Static14InitStaticVarsEv' hash='7f32ffea222edbe7'>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class tcmalloc::ThreadCache -->
      <class-decl name='ThreadCache' visibility='default' size-in-bits='17408' filepath='src/thread_cache.h' line='66' column='1' hash='f718d73efdb32415' id='type-id-1873'>
        <member-type access='private'>
          <!-- class tcmalloc::ThreadCache::FreeList -->
          <class-decl name='FreeList' visibility='default' size-in-bits='192' filepath='src/thread_cache.h' line='132' column='1' hash='42c21d2e82fdaa71' id='type-id-1770'>
            <data-member access='private' layout-offset-in-bits='0'>
              <!-- void* tcmalloc::ThreadCache::FreeList::list_ -->
              <var-decl name='list_' type-id='type-id-56' visibility='default' filepath='src/thread_cache.h' line='134' column='1'/>
            </data-member>
            <data-member access='private' layout-offset-in-bits='64'>
              <!-- uint32_t tcmalloc::ThreadCache::FreeList::length_ -->
              <var-decl name='length_' type-id='type-id-19' visibility='default' filepath='src/thread_cache.h' line='138' column='1'/>
            </data-member>
            <data-member access='private' layout-offset-in-bits='96'>
              <!-- uint32_t tcmalloc::ThreadCache::FreeList::lowater_ -->
              <var-decl name='lowater_' type-id='type-id-19' visibility='default' filepath='src/thread_cache.h' line='139' column='1'/>
            </data-member>
            <data-member access='private' layout-offset-in-bits='128'>
              <!-- uint32_t tcmalloc::ThreadCache::FreeList::max_length_ -->
              <var-decl name='max_length_' type-id='type-id-19' visibility='default' filepath='src/thread_cache.h' line='140' column='1'/>
            </data-member>
            <data-member access='private' layout-offset-in-bits='160'>
              <!-- uint32_t tcmalloc::ThreadCache::FreeList::length_overages_ -->
              <var-decl name='length_overages_' type-id='type-id-19' visibility='default' filepath='src/thread_cache.h' line='144' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- enum {have_tls=1, } -->
          <enum-decl name='__anonymous_enum__' size-in-bits='32' alignment-in-bits='32' is-anonymous='yes' filepath='src/thread_cache.h' line='69' column='1' hash='ed417537ae06c429#3' id='type-id-1957'>
            <underlying-type type-id='type-id-93'/>
            <enumerator name='have_tls' value='1'/>
          </enum-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct tcmalloc::ThreadCache::ThreadLocalData -->
          <class-decl name='ThreadLocalData' is-struct='yes' visibility='default' size-in-bits='128' filepath='src/thread_cache.h' line='262' column='1' hash='ff8dd19088e84d07' id='type-id-1958'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- tcmalloc::ThreadCache* tcmalloc::ThreadCache::ThreadLocalData::heap -->
              <var-decl name='heap' type-id='type-id-1914' visibility='default' filepath='src/thread_cache.h' line='263' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- size_t tcmalloc::ThreadCache::ThreadLocalData::min_size_for_slow_path -->
              <var-decl name='min_size_for_slow_path' type-id='type-id-61' visibility='default' filepath='src/thread_cache.h' line='270' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='public' static='yes'>
          <!-- static tcmalloc::ThreadCache::ThreadLocalData tcmalloc::ThreadCache::threadlocal_data_ -->
          <var-decl name='threadlocal_data_' type-id='type-id-1958' mangled-name='_ZN8tcmalloc11ThreadCache17threadlocal_data_E' visibility='default' filepath='src/thread_cache.cc' line='73' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache17threadlocal_data_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static bool tcmalloc::ThreadCache::tsd_inited_ -->
          <var-decl name='tsd_inited_' type-id='type-id-59' mangled-name='_ZN8tcmalloc11ThreadCache11tsd_inited_E' visibility='default' filepath='src/thread_cache.cc' line='76' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache11tsd_inited_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static pthread_key_t tcmalloc::ThreadCache::heap_key_ -->
          <var-decl name='heap_key_' type-id='type-id-1333' mangled-name='_ZN8tcmalloc11ThreadCache9heap_key_E' visibility='default' filepath='src/thread_cache.cc' line='77' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache9heap_key_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static tcmalloc::ThreadCache* tcmalloc::ThreadCache::thread_heaps_ -->
          <var-decl name='thread_heaps_' type-id='type-id-1914' mangled-name='_ZN8tcmalloc11ThreadCache13thread_heaps_E' visibility='default' filepath='src/thread_cache.cc' line='68' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache13thread_heaps_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static int tcmalloc::ThreadCache::thread_heap_count_ -->
          <var-decl name='thread_heap_count_' type-id='type-id-1' mangled-name='_ZN8tcmalloc11ThreadCache18thread_heap_count_E' visibility='default' filepath='src/thread_cache.cc' line='69' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache18thread_heap_count_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static tcmalloc::ThreadCache* tcmalloc::ThreadCache::next_memory_steal_ -->
          <var-decl name='next_memory_steal_' type-id='type-id-1914' mangled-name='_ZN8tcmalloc11ThreadCache18next_memory_steal_E' visibility='default' filepath='src/thread_cache.cc' line='70' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache18next_memory_steal_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static size_t tcmalloc::ThreadCache::overall_thread_cache_size_ -->
          <var-decl name='overall_thread_cache_size_' type-id='type-id-61' mangled-name='_ZN8tcmalloc11ThreadCache26overall_thread_cache_size_E' visibility='default' filepath='src/thread_cache.cc' line='65' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache26overall_thread_cache_size_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static volatile size_t tcmalloc::ThreadCache::per_thread_cache_size_ -->
          <var-decl name='per_thread_cache_size_' type-id='type-id-1959' mangled-name='_ZN8tcmalloc11ThreadCache22per_thread_cache_size_E' visibility='default' filepath='src/thread_cache.cc' line='64' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache22per_thread_cache_size_E'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static ssize_t tcmalloc::ThreadCache::unclaimed_cache_space_ -->
          <var-decl name='unclaimed_cache_space_' type-id='type-id-278' mangled-name='_ZN8tcmalloc11ThreadCache22unclaimed_cache_space_E' visibility='default' filepath='src/thread_cache.cc' line='66' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache22unclaimed_cache_space_E'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- tcmalloc::ThreadCache* tcmalloc::ThreadCache::next_ -->
          <var-decl name='next_' type-id='type-id-1914' visibility='default' filepath='src/thread_cache.h' line='75' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- tcmalloc::ThreadCache* tcmalloc::ThreadCache::prev_ -->
          <var-decl name='prev_' type-id='type-id-1914' visibility='default' filepath='src/thread_cache.h' line='76' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- size_t tcmalloc::ThreadCache::size_ -->
          <var-decl name='size_' type-id='type-id-61' visibility='default' filepath='src/thread_cache.h' line='309' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='192'>
          <!-- size_t tcmalloc::ThreadCache::max_size_ -->
          <var-decl name='max_size_' type-id='type-id-61' visibility='default' filepath='src/thread_cache.h' line='310' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='256'>
          <!-- tcmalloc::Sampler tcmalloc::ThreadCache::sampler_ -->
          <var-decl name='sampler_' type-id='type-id-1576' visibility='default' filepath='src/thread_cache.h' line='313' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='384'>
          <!-- tcmalloc::ThreadCache::FreeList tcmalloc::ThreadCache::list_[88] -->
          <var-decl name='list_' type-id='type-id-1771' visibility='default' filepath='src/thread_cache.h' line='315' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='17280'>
          <!-- pthread_t tcmalloc::ThreadCache::tid_ -->
          <var-decl name='tid_' type-id='type-id-336' visibility='default' filepath='src/thread_cache.h' line='317' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='17344'>
          <!-- bool tcmalloc::ThreadCache::in_setspecific_ -->
          <var-decl name='in_setspecific_' type-id='type-id-59' visibility='default' filepath='src/thread_cache.h' line='318' column='1'/>
        </data-member>
        <member-function access='private' static='yes'>
          <!-- tcmalloc::ThreadCache* tcmalloc::ThreadCache::GetCache() -->
          <function-decl name='GetCache' mangled-name='_ZN8tcmalloc11ThreadCache8GetCacheEv' filepath='src/thread_cache.h' line='405' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache8GetCacheEv' hash='3c9c2187771deea4'>
            <!-- tcmalloc::ThreadCache* -->
            <return type-id='type-id-1914'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::ThreadCache::IncreaseCacheLimitLocked() -->
          <function-decl name='IncreaseCacheLimitLocked' mangled-name='_ZN8tcmalloc11ThreadCache24IncreaseCacheLimitLockedEv' filepath='src/thread_cache.cc' line='240' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache24IncreaseCacheLimitLockedEv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
            <parameter type-id='type-id-1914' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::ThreadCache::RecomputePerThreadCacheSize() -->
          <function-decl name='RecomputePerThreadCacheSize' mangled-name='_ZN8tcmalloc11ThreadCache27RecomputePerThreadCacheSizeEv' filepath='src/thread_cache.cc' line='431' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache27RecomputePerThreadCacheSizeEv' hash='7f32ffea222edbe7'>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::ThreadCache::GetThreadStats(uint64_t*) -->
          <function-decl name='GetThreadStats' mangled-name='_ZN8tcmalloc11ThreadCache14GetThreadStatsEPmS1_' filepath='src/thread_cache.cc' line='454' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache14GetThreadStatsEPmS1_' hash='06e9b8e3ea42e730'>
            <!-- parameter of type 'uint64_t*' -->
            <parameter type-id='type-id-1918'/>
            <!-- parameter of type 'uint64_t*' -->
            <parameter type-id='type-id-1918'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::ThreadCache::set_overall_thread_cache_size() -->
          <function-decl name='set_overall_thread_cache_size' mangled-name='_ZN8tcmalloc11ThreadCache29set_overall_thread_cache_sizeEm' filepath='src/thread_cache.cc' line='465' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache29set_overall_thread_cache_sizeEm' hash='e0055d99adb0e173'>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-61'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::ThreadCache::IncreaseCacheLimit() -->
          <function-decl name='IncreaseCacheLimit' mangled-name='_ZN8tcmalloc11ThreadCache18IncreaseCacheLimitEv' filepath='src/thread_cache.cc' line='235' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache18IncreaseCacheLimitEv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
            <parameter type-id='type-id-1914' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::ThreadCache::InitTSD() -->
          <function-decl name='InitTSD' mangled-name='_ZN8tcmalloc11ThreadCache7InitTSDEv' filepath='src/thread_cache.cc' line='287' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache7InitTSDEv' hash='7f32ffea222edbe7'>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::ThreadCache::InitModule() -->
          <function-decl name='InitModule' mangled-name='_ZN8tcmalloc11ThreadCache10InitModuleEv' filepath='src/thread_cache.cc' line='274' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache10InitModuleEv' hash='7f32ffea222edbe7'>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- int tcmalloc::ThreadCache::GetSamplePeriod() -->
          <function-decl name='GetSamplePeriod' mangled-name='_ZN8tcmalloc11ThreadCache15GetSamplePeriodEv' filepath='src/thread_cache.cc' line='270' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache15GetSamplePeriodEv' hash='388da3fa973fde78'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
            <parameter type-id='type-id-1914' is-artificial='yes'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::ThreadCache::ReleaseToCentralCache(tcmalloc::ThreadCache::FreeList*, size_t, int) -->
          <function-decl name='ReleaseToCentralCache' mangled-name='_ZN8tcmalloc11ThreadCache21ReleaseToCentralCacheEPNS0_8FreeListEmi' filepath='src/thread_cache.cc' line='180' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache21ReleaseToCentralCacheEPNS0_8FreeListEmi' hash='ac7b58633e4c893b'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
            <parameter type-id='type-id-1914' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::ThreadCache::FreeList*' -->
            <parameter type-id='type-id-1916'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-61'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::ThreadCache::Scavenge() -->
          <function-decl name='Scavenge' mangled-name='_ZN8tcmalloc11ThreadCache8ScavengeEv' filepath='src/thread_cache.cc' line='201' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache8ScavengeEv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
            <parameter type-id='type-id-1914' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::ThreadCache::ListTooLong(tcmalloc::ThreadCache::FreeList*, size_t) -->
          <function-decl name='ListTooLong' mangled-name='_ZN8tcmalloc11ThreadCache11ListTooLongEPNS0_8FreeListEm' filepath='src/thread_cache.cc' line='155' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache11ListTooLongEPNS0_8FreeListEm' hash='d751d2a92d25bbd5'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
            <parameter type-id='type-id-1914' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::ThreadCache::FreeList*' -->
            <parameter type-id='type-id-1916'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-61'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::ThreadCache::Cleanup() -->
          <function-decl name='Cleanup' mangled-name='_ZN8tcmalloc11ThreadCache7CleanupEv' filepath='src/thread_cache.cc' line='107' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache7CleanupEv' hash='7f32ffea222edbe7'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
            <parameter type-id='type-id-1914' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::ThreadCache::DeleteCache() -->
          <function-decl name='DeleteCache' mangled-name='_ZN8tcmalloc11ThreadCache11DeleteCacheEPS0_' filepath='src/thread_cache.cc' line='413' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache11DeleteCacheEPS0_' hash='3c9c2187771deea4'>
            <!-- parameter of type 'tcmalloc::ThreadCache*' -->
            <parameter type-id='type-id-1914'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::ThreadCache::DestroyThreadCache() -->
          <function-decl name='DestroyThreadCache' mangled-name='_ZN8tcmalloc11ThreadCache18DestroyThreadCacheEPv' filepath='src/thread_cache.cc' line='400' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache18DestroyThreadCacheEPv' hash='7f32ffea222edbe7'>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-56'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::ThreadCache::BecomeIdle() -->
          <function-decl name='BecomeIdle' mangled-name='_ZN8tcmalloc11ThreadCache10BecomeIdleEv' filepath='src/thread_cache.cc' line='376' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache10BecomeIdleEv' hash='7f32ffea222edbe7'>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void* tcmalloc::ThreadCache::FetchFromCentralCache(size_t, size_t) -->
          <function-decl name='FetchFromCentralCache' mangled-name='_ZN8tcmalloc11ThreadCache21FetchFromCentralCacheEmm' filepath='src/thread_cache.cc' line='118' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache21FetchFromCentralCacheEmm' hash='91495cdf6321a116'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
            <parameter type-id='type-id-1914' is-artificial='yes'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-61'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-61'/>
            <!-- void* -->
            <return type-id='type-id-56'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::ThreadCache::Init(pthread_t) -->
          <function-decl name='Init' mangled-name='_ZN8tcmalloc11ThreadCache4InitEm' filepath='src/thread_cache.cc' line='79' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache4InitEm' hash='e0055d99adb0e173'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
            <parameter type-id='type-id-1914' is-artificial='yes'/>
            <!-- parameter of type 'typedef pthread_t' -->
            <parameter type-id='type-id-336'/>
            <!-- void -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- tcmalloc::ThreadCache* tcmalloc::ThreadCache::NewHeap() -->
          <function-decl name='NewHeap' mangled-name='_ZN8tcmalloc11ThreadCache7NewHeapEm' filepath='src/thread_cache.cc' line='358' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache7NewHeapEm' hash='8a55066abb3ceba7'>
            <!-- parameter of type 'typedef pthread_t' -->
            <parameter type-id='type-id-336'/>
            <!-- tcmalloc::ThreadCache* -->
            <return type-id='type-id-1914'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- tcmalloc::ThreadCache* tcmalloc::ThreadCache::CreateCacheIfNecessary() -->
          <function-decl name='CreateCacheIfNecessary' mangled-name='_ZN8tcmalloc11ThreadCache22CreateCacheIfNecessaryEv' filepath='src/thread_cache.cc' line='305' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache22CreateCacheIfNecessaryEv' hash='3c9c2187771deea4'>
            <!-- tcmalloc::ThreadCache* -->
            <return type-id='type-id-1914'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct tcmalloc::Span -->
      <class-decl name='Span' is-struct='yes' visibility='default' size-in-bits='384' filepath='src/span.h' line='45' column='1' hash='1861bb4f1e6fe555#2' id='type-id-164'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- PageID tcmalloc::Span::start -->
          <var-decl name='start' type-id='type-id-190' visibility='default' filepath='src/span.h' line='46' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- Length tcmalloc::Span::length -->
          <var-decl name='length' type-id='type-id-192' visibility='default' filepath='src/span.h' line='47' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='128'>
          <!-- tcmalloc::Span* tcmalloc::Span::next -->
          <var-decl name='next' type-id='type-id-188' visibility='default' filepath='src/span.h' line='48' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='192'>
          <!-- tcmalloc::Span* tcmalloc::Span::prev -->
          <var-decl name='prev' type-id='type-id-188' visibility='default' filepath='src/span.h' line='49' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='256'>
          <!-- void* tcmalloc::Span::objects -->
          <var-decl name='objects' type-id='type-id-56' visibility='default' filepath='src/span.h' line='50' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='320'>
          <!-- unsigned int tcmalloc::Span::refcount -->
          <var-decl name='refcount' type-id='type-id-1440' visibility='default' filepath='src/span.h' line='51' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='336'>
          <!-- unsigned int tcmalloc::Span::sizeclass -->
          <var-decl name='sizeclass' type-id='type-id-1440' visibility='default' filepath='src/span.h' line='52' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='344'>
          <!-- unsigned int tcmalloc::Span::location -->
          <var-decl name='location' type-id='type-id-1440' visibility='default' filepath='src/span.h' line='53' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='346'>
          <!-- unsigned int tcmalloc::Span::sample -->
          <var-decl name='sample' type-id='type-id-1440' visibility='default' filepath='src/span.h' line='54' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct tcmalloc::StackTrace -->
      <class-decl name='StackTrace' is-struct='yes' visibility='default' size-in-bits='2112' filepath='src/common.h' line='266' column='1' hash='9d0c2fee1fdc9125#2' id='type-id-1585'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- uintptr_t tcmalloc::StackTrace::size -->
          <var-decl name='size' type-id='type-id-277' visibility='default' filepath='src/common.h' line='267' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- uintptr_t tcmalloc::StackTrace::depth -->
          <var-decl name='depth' type-id='type-id-277' visibility='default' filepath='src/common.h' line='268' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='128'>
          <!-- void* tcmalloc::StackTrace::stack[31] -->
          <var-decl name='stack' type-id='type-id-1783' visibility='default' filepath='src/common.h' line='269' column='1'/>
        </data-member>
      </class-decl>
    </namespace-decl>
    <!-- void* (* __malloc_hook)(size_t, void*) -->
    <var-decl name='__malloc_hook' type-id='type-id-1924' mangled-name='__malloc_hook' visibility='default' filepath='src/libc_override_glibc.h' line='135' column='1' elf-symbol-id='__malloc_hook'/>
    <!-- void* (* __realloc_hook)(void*, size_t, void*) -->
    <var-decl name='__realloc_hook' type-id='type-id-1927' mangled-name='__realloc_hook' visibility='default' filepath='src/libc_override_glibc.h' line='137' column='1' elf-symbol-id='__realloc_hook'/>
    <!-- void (* __free_hook)(void*, void*) -->
    <var-decl name='__free_hook' type-id='type-id-1920' mangled-name='__free_hook' visibility='default' filepath='src/libc_override_glibc.h' line='139' column='1' elf-symbol-id='__free_hook'/>
    <!-- void* (* __memalign_hook)(size_t, size_t, void*) -->
    <var-decl name='__memalign_hook' type-id='type-id-1922' mangled-name='__memalign_hook' visibility='default' filepath='src/libc_override_glibc.h' line='141' column='1' elf-symbol-id='__memalign_hook'/>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead'>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_tcmalloc_large_alloc_report_threshold -->
      <var-decl name='FLAGS_tcmalloc_large_alloc_report_threshold' type-id='type-id-105' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead43FLAGS_tcmalloc_large_alloc_report_thresholdE' visibility='default' filepath='src/tcmalloc.cc' line='183' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead43FLAGS_tcmalloc_large_alloc_report_thresholdE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_notcmalloc_large_alloc_report_threshold -->
      <var-decl name='FLAGS_notcmalloc_large_alloc_report_threshold' type-id='type-id-82' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead45FLAGS_notcmalloc_large_alloc_report_thresholdE' visibility='default' filepath='src/tcmalloc.cc' line='195' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead45FLAGS_notcmalloc_large_alloc_report_thresholdE'/>
    </namespace-decl>
    <!-- const char* tc_version(int*, int*, const char**) -->
    <function-decl name='tc_version' mangled-name='tc_version' filepath='src/tcmalloc.cc' line='1547' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_version' hash='2450e95f0dafe912'>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-1218' filepath='src/tcmalloc.cc' line='1548' column='1'/>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-1218' filepath='src/tcmalloc.cc' line='1548' column='1'/>
      <!-- parameter of type 'const char**' -->
      <parameter type-id='type-id-1836' filepath='src/tcmalloc.cc' line='1548' column='1'/>
      <!-- const char* -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- int tc_set_new_mode(int) -->
    <function-decl name='tc_set_new_mode' mangled-name='tc_set_new_mode' filepath='src/tcmalloc.cc' line='1560' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_set_new_mode' hash='d628501fd2223339'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/tcmalloc.cc' line='1560' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void* tc_malloc(size_t) -->
    <function-decl name='tc_malloc' mangled-name='tc_malloc' filepath='src/tcmalloc.cc' line='1573' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_malloc' hash='e0055d99adb0e173'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- void tc_free(void*) -->
    <function-decl name='tc_free' mangled-name='tc_free' filepath='src/tcmalloc.cc' line='1579' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_free' hash='7f32ffea222edbe7'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* tc_calloc(size_t, size_t) -->
    <function-decl name='tc_calloc' mangled-name='tc_calloc' filepath='src/tcmalloc.cc' line='1584' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_calloc' hash='91495cdf6321a116'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- void tc_cfree(void*) -->
    <function-decl name='tc_cfree' mangled-name='tc_cfree' filepath='src/tcmalloc.cc' line='1591' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_cfree' hash='7f32ffea222edbe7'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* tc_realloc(void*, size_t) -->
    <function-decl name='tc_realloc' mangled-name='tc_realloc' filepath='src/tcmalloc.cc' line='1596' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_realloc' hash='e0055d99adb0e173'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- void* tc_new(size_t) -->
    <function-decl name='tc_new' mangled-name='tc_new' filepath='src/tcmalloc.cc' line='1611' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_new' hash='e0055d99adb0e173'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- void* tc_new_nothrow(size_t, const std::nothrow_t&) -->
    <function-decl name='tc_new_nothrow' mangled-name='tc_new_nothrow' filepath='src/tcmalloc.cc' line='1622' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_new_nothrow' hash='2989ba9a4d8ff45b'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/tcmalloc.cc' line='1652' column='1'/>
      <!-- parameter of type 'const std::nothrow_t&' -->
      <parameter type-id='type-id-1855'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- void tc_delete(void*) -->
    <function-decl name='tc_delete' mangled-name='tc_delete' filepath='src/tcmalloc.cc' line='1628' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_delete' hash='7f32ffea222edbe7'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void tc_delete_nothrow(void*, const std::nothrow_t&) -->
    <function-decl name='tc_delete_nothrow' mangled-name='tc_delete_nothrow' filepath='src/tcmalloc.cc' line='1636' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_delete_nothrow' hash='e423c4ae2aed7330'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/tcmalloc.cc' line='1636' column='1'/>
      <!-- parameter of type 'const std::nothrow_t&' -->
      <parameter type-id='type-id-1855'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* tc_newarray(size_t) -->
    <function-decl name='tc_newarray' mangled-name='tc_newarray' filepath='src/tcmalloc.cc' line='1641' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_newarray' hash='e0055d99adb0e173'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- void* tc_newarray_nothrow(size_t, const std::nothrow_t&) -->
    <function-decl name='tc_newarray_nothrow' mangled-name='tc_newarray_nothrow' filepath='src/tcmalloc.cc' line='1652' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_newarray_nothrow' hash='2989ba9a4d8ff45b'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/tcmalloc.cc' line='1652' column='1'/>
      <!-- parameter of type 'const std::nothrow_t&' -->
      <parameter type-id='type-id-1855'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- void tc_deletearray(void*) -->
    <function-decl name='tc_deletearray' mangled-name='tc_deletearray' filepath='src/tcmalloc.cc' line='1659' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_deletearray' hash='7f32ffea222edbe7'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void tc_deletearray_nothrow(void*, const std::nothrow_t&) -->
    <function-decl name='tc_deletearray_nothrow' mangled-name='tc_deletearray_nothrow' filepath='src/tcmalloc.cc' line='1664' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_deletearray_nothrow' hash='e423c4ae2aed7330'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/tcmalloc.cc' line='1636' column='1'/>
      <!-- parameter of type 'const std::nothrow_t&' -->
      <parameter type-id='type-id-1855'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* tc_memalign(size_t, size_t) -->
    <function-decl name='tc_memalign' mangled-name='tc_memalign' filepath='src/tcmalloc.cc' line='1669' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_memalign' hash='91495cdf6321a116'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- int tc_posix_memalign(void**, size_t, size_t) -->
    <function-decl name='tc_posix_memalign' mangled-name='tc_posix_memalign' filepath='src/tcmalloc.cc' line='1676' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_posix_memalign' hash='f74641e922c0ae49'>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-184' filepath='src/tcmalloc.cc' line='1677' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/tcmalloc.cc' line='1677' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61' filepath='src/tcmalloc.cc' line='1677' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void* tc_valloc(size_t) -->
    <function-decl name='tc_valloc' mangled-name='tc_valloc' filepath='src/tcmalloc.cc' line='1696' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_valloc' hash='e0055d99adb0e173'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- void* tc_pvalloc(size_t) -->
    <function-decl name='tc_pvalloc' mangled-name='tc_pvalloc' filepath='src/tcmalloc.cc' line='1704' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_pvalloc' hash='e0055d99adb0e173'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- void tc_malloc_stats() -->
    <function-decl name='tc_malloc_stats' mangled-name='tc_malloc_stats' filepath='src/tcmalloc.cc' line='1716' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_malloc_stats' hash='7f32ffea222edbe7'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- int tc_mallopt(int, int) -->
    <function-decl name='tc_mallopt' mangled-name='tc_mallopt' filepath='src/tcmalloc.cc' line='1720' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_mallopt' hash='a9fd86e6e981c3b5'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/tcmalloc.cc' line='1720' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' filepath='src/tcmalloc.cc' line='1720' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- mallinfo tc_mallinfo() -->
    <function-decl name='tc_mallinfo' mangled-name='tc_mallinfo' filepath='src/tcmalloc.cc' line='1725' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_mallinfo' hash='7f32ffea222edbe7'>
      <!-- struct mallinfo -->
      <return type-id='type-id-1763'/>
    </function-decl>
    <!-- size_t tc_malloc_size(void*) -->
    <function-decl name='tc_malloc_size' mangled-name='tc_malloc_size' filepath='src/tcmalloc.cc' line='1730' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_malloc_size' hash='e0055d99adb0e173'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56' filepath='src/malloc_extension.cc' line='371' column='1'/>
      <!-- typedef size_t -->
      <return type-id='type-id-61'/>
    </function-decl>
    <!-- void* tc_malloc_skip_new_handler(size_t) -->
    <function-decl name='tc_malloc_skip_new_handler' mangled-name='tc_malloc_skip_new_handler' filepath='src/tcmalloc.cc' line='1734' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_malloc_skip_new_handler' hash='e0055d99adb0e173'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-decl>
    <!-- variadic parameter type -->
    <type-decl name='variadic parameter type' id='type-id-1960'/>
    <!-- void -->
    <type-decl name='void' id='type-id-58'/>
    <!-- void* -->
    <pointer-type-def type-id='type-id-58' id='type-id-56'/>
    <class-decl name='MallocExtension' visibility='default' size-in-bits='64' filepath='src/gperftools/malloc_extension.h' line='90' column='1' hash='39d956fd1c90f113' id='type-id-1213'>
      <member-type access='private'>
        <!-- enum MallocExtension::Ownership -->
        <enum-decl name='Ownership' size-in-bits='32' alignment-in-bits='32' filepath='./src/gperftools/malloc_extension.h' line='315' column='1' hash='6707aa16baf14a9c' id='type-id-1222'>
          <underlying-type type-id='type-id-93'/>
          <enumerator name='kUnknownOwnership' value='0'/>
          <enumerator name='kOwned' value='1'/>
          <enumerator name='kNotOwned' value='2'/>
        </enum-decl>
      </member-type>
    </class-decl>
    <!-- int (void*, void*) -->
    <function-type size-in-bits='64' hash='388da3fa973fde78' id='type-id-1886'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- void (void*, const base::MallocRange*) -->
    <function-type size-in-bits='64' hash='eed386b2a4358ca5' id='type-id-1216'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'const base::MallocRange*' -->
      <parameter type-id='type-id-1829'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void* (size_t, size_t, void*) -->
    <function-type size-in-bits='64' hash='91495cdf6321a116' id='type-id-1921'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-type>
    <!-- void* (size_t, void*) -->
    <function-type size-in-bits='64' hash='e0055d99adb0e173' id='type-id-1923'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-type>
    <!-- void* (unsigned long int) -->
    <function-type size-in-bits='64' hash='e0055d99adb0e173' id='type-id-1925'>
      <!-- parameter of type 'unsigned long int' -->
      <parameter type-id='type-id-21'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-type>
    <!-- void* (void*, size_t, void*) -->
    <function-type size-in-bits='64' hash='e0055d99adb0e173' id='type-id-1926'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-type>
    <!-- int (tcmalloc::ThreadCache::*) () -->
    <function-type method-class-id='type-id-1873' size-in-bits='64' hash='388da3fa973fde78' id='type-id-1961'>
      <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
      <parameter type-id='type-id-1914' is-artificial='yes'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- tcmalloc::ThreadCache* (tcmalloc::ThreadCache::*) (pthread_t) -->
    <function-type method-class-id='type-id-1873' size-in-bits='64' hash='8a55066abb3ceba7' id='type-id-1962'>
      <!-- parameter of type 'typedef pthread_t' -->
      <parameter type-id='type-id-336'/>
      <!-- tcmalloc::ThreadCache* -->
      <return type-id='type-id-1914'/>
    </function-type>
    <!-- tcmalloc::ThreadCache* (tcmalloc::ThreadCache::*) (void) -->
    <function-type method-class-id='type-id-1873' size-in-bits='64' hash='3c9c2187771deea4' id='type-id-1963'>
      <!-- tcmalloc::ThreadCache* -->
      <return type-id='type-id-1914'/>
    </function-type>
    <!-- void (tcmalloc::ThreadCache::*) () -->
    <function-type method-class-id='type-id-1873' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-1964'>
      <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
      <parameter type-id='type-id-1914' is-artificial='yes'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::ThreadCache::*) (pthread_t) -->
    <function-type method-class-id='type-id-1873' size-in-bits='64' hash='e0055d99adb0e173' id='type-id-1965'>
      <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
      <parameter type-id='type-id-1914' is-artificial='yes'/>
      <!-- parameter of type 'typedef pthread_t' -->
      <parameter type-id='type-id-336'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::ThreadCache::*) (size_t) -->
    <function-type method-class-id='type-id-1873' size-in-bits='64' hash='e0055d99adb0e173' id='type-id-1966'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::ThreadCache::*) (tcmalloc::ThreadCache*) -->
    <function-type method-class-id='type-id-1873' size-in-bits='64' hash='3c9c2187771deea4' id='type-id-1967'>
      <!-- parameter of type 'tcmalloc::ThreadCache*' -->
      <parameter type-id='type-id-1914'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::ThreadCache::*) (tcmalloc::ThreadCache::FreeList*, size_t) -->
    <function-type method-class-id='type-id-1873' size-in-bits='64' hash='d751d2a92d25bbd5' id='type-id-1968'>
      <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
      <parameter type-id='type-id-1914' is-artificial='yes'/>
      <!-- parameter of type 'tcmalloc::ThreadCache::FreeList*' -->
      <parameter type-id='type-id-1916'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::ThreadCache::*) (tcmalloc::ThreadCache::FreeList*, size_t, int) -->
    <function-type method-class-id='type-id-1873' size-in-bits='64' hash='ac7b58633e4c893b' id='type-id-1969'>
      <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
      <parameter type-id='type-id-1914' is-artificial='yes'/>
      <!-- parameter of type 'tcmalloc::ThreadCache::FreeList*' -->
      <parameter type-id='type-id-1916'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::ThreadCache::*) (uint64_t*, uint64_t*) -->
    <function-type method-class-id='type-id-1873' size-in-bits='64' hash='06e9b8e3ea42e730' id='type-id-1970'>
      <!-- parameter of type 'uint64_t*' -->
      <parameter type-id='type-id-1918'/>
      <!-- parameter of type 'uint64_t*' -->
      <parameter type-id='type-id-1918'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::ThreadCache::*) (void) -->
    <function-type method-class-id='type-id-1873' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-1971'>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void (tcmalloc::ThreadCache::*) (void*) -->
    <function-type method-class-id='type-id-1873' size-in-bits='64' hash='7f32ffea222edbe7' id='type-id-1972'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-56'/>
      <!-- void -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void* (tcmalloc::ThreadCache::*) (size_t, size_t) -->
    <function-type method-class-id='type-id-1873' size-in-bits='64' hash='91495cdf6321a116' id='type-id-1973'>
      <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
      <parameter type-id='type-id-1914' is-artificial='yes'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-61'/>
      <!-- void* -->
      <return type-id='type-id-56'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/thread_cache.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- const tcmalloc::ThreadCache* const -->
    <qualified-type-def type-id='type-id-1875' const='yes' hash='252e1369d26e54aa' id='type-id-1974'/>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>* const -->
    <qualified-type-def type-id='type-id-1910' const='yes' hash='882543033d974202' id='type-id-1975'/>
    <!-- volatile size_t -->
    <qualified-type-def type-id='type-id-61' volatile='yes' hash='ed230d8a19f1bf1c' id='type-id-1959'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- class tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache> -->
      <class-decl name='PageHeapAllocator&lt;tcmalloc::ThreadCache&gt;' visibility='default' hash='0f6b2cb5860f7fa2' id='type-id-1976'/>
      <!-- tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache> tcmalloc::threadcache_allocator -->
      <var-decl name='threadcache_allocator' type-id='type-id-1869' mangled-name='_ZN8tcmalloc21threadcache_allocatorE' visibility='default' filepath='src/thread_cache.cc' line='67' column='1' elf-symbol-id='_ZN8tcmalloc21threadcache_allocatorE'/>
    </namespace-decl>
  </abi-instr>
</abi-corpus>
